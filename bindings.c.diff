diff --git a/bindings.c b/bindings.c
new file mode 100644
index 000000000..d6c7b3613
--- /dev/null
+++ b/bindings.c
@@ -0,0 +1,38931 @@
+# 1 "./rust/kernel/bindings_helper.h"
+# 1 "/home/ilia/Documents/hse/linux/builds/linux//"
+# 1 "<built-in>"
+# 1 "<command-line>"
+# 1 "././include/linux/compiler-version.h" 1
+# 1 "<command-line>" 2
+# 1 "././include/linux/kconfig.h" 1
+
+
+
+
+# 1 "./include/generated/autoconf.h" 1
+# 6 "././include/linux/kconfig.h" 2
+# 1 "<command-line>" 2
+# 1 "././include/linux/compiler_types.h" 1
+# 65 "././include/linux/compiler_types.h"
+# 1 "./include/linux/compiler_attributes.h" 1
+# 66 "././include/linux/compiler_types.h" 2
+# 85 "././include/linux/compiler_types.h"
+# 1 "./include/linux/compiler-gcc.h" 1
+# 86 "././include/linux/compiler_types.h" 2
+# 102 "././include/linux/compiler_types.h"
+struct ftrace_branch_data {
+ const char *func;
+ const char *file;
+ unsigned line;
+ union {
+  struct {
+   unsigned long correct;
+   unsigned long incorrect;
+  };
+  struct {
+   unsigned long miss;
+   unsigned long hit;
+  };
+  unsigned long miss_hit[2];
+ };
+};
+
+struct ftrace_likely_data {
+ struct ftrace_branch_data data;
+ unsigned long constant;
+};
+# 1 "<command-line>" 2
+# 1 "./rust/kernel/bindings_helper.h"
+
+
+# 1 "./include/linux/cdev.h" 1
+
+
+
+
+# 1 "./include/linux/kobject.h" 1
+# 18 "./include/linux/kobject.h"
+# 1 "./include/linux/types.h" 1
+
+
+
+
+
+# 1 "./include/uapi/linux/types.h" 1
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
+# 1 "./include/uapi/asm-generic/types.h" 1
+
+
+
+
+
+
+# 1 "./include/asm-generic/int-ll64.h" 1
+# 11 "./include/asm-generic/int-ll64.h"
+# 1 "./include/uapi/asm-generic/int-ll64.h" 1
+# 12 "./include/uapi/asm-generic/int-ll64.h"
+# 1 "./arch/x86/include/uapi/asm/bitsperlong.h" 1
+# 11 "./arch/x86/include/uapi/asm/bitsperlong.h"
+# 1 "./include/asm-generic/bitsperlong.h" 1
+
+
+
+
+# 1 "./include/uapi/asm-generic/bitsperlong.h" 1
+# 6 "./include/asm-generic/bitsperlong.h" 2
+# 12 "./arch/x86/include/uapi/asm/bitsperlong.h" 2
+# 13 "./include/uapi/asm-generic/int-ll64.h" 2
+
+
+
+
+
+
+
+typedef __signed__ char __s8;
+typedef unsigned char __u8;
+
+typedef __signed__ short __s16;
+typedef unsigned short __u16;
+
+typedef __signed__ int __s32;
+typedef unsigned int __u32;
+
+
+__extension__ typedef __signed__ long long __s64;
+__extension__ typedef unsigned long long __u64;
+# 12 "./include/asm-generic/int-ll64.h" 2
+
+
+
+
+typedef __s8 s8;
+typedef __u8 u8;
+typedef __s16 s16;
+typedef __u16 u16;
+typedef __s32 s32;
+typedef __u32 u32;
+typedef __s64 s64;
+typedef __u64 u64;
+# 8 "./include/uapi/asm-generic/types.h" 2
+# 2 "./arch/x86/include/generated/uapi/asm/types.h" 2
+# 6 "./include/uapi/linux/types.h" 2
+# 14 "./include/uapi/linux/types.h"
+# 1 "./include/uapi/linux/posix_types.h" 1
+
+
+
+
+# 1 "./include/linux/stddef.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/stddef.h" 1
+
+# 1 "./include/linux/compiler_types.h" 1
+# 3 "./include/uapi/linux/stddef.h" 2
+# 6 "./include/linux/stddef.h" 2
+
+
+
+
+enum {
+ false = 0,
+ true = 1
+};
+# 6 "./include/uapi/linux/posix_types.h" 2
+# 25 "./include/uapi/linux/posix_types.h"
+typedef struct {
+ unsigned long fds_bits[1024 / (8 * sizeof(long))];
+} __kernel_fd_set;
+
+
+typedef void (*__kernel_sighandler_t)(int);
+
+
+typedef int __kernel_key_t;
+typedef int __kernel_mqd_t;
+
+# 1 "./arch/x86/include/asm/posix_types.h" 1
+
+
+
+
+# 1 "./arch/x86/include/uapi/asm/posix_types_64.h" 1
+# 11 "./arch/x86/include/uapi/asm/posix_types_64.h"
+typedef unsigned short __kernel_old_uid_t;
+typedef unsigned short __kernel_old_gid_t;
+
+
+typedef unsigned long __kernel_old_dev_t;
+
+
+# 1 "./include/uapi/asm-generic/posix_types.h" 1
+# 15 "./include/uapi/asm-generic/posix_types.h"
+typedef long __kernel_long_t;
+typedef unsigned long __kernel_ulong_t;
+
+
+
+typedef __kernel_ulong_t __kernel_ino_t;
+
+
+
+typedef unsigned int __kernel_mode_t;
+
+
+
+typedef int __kernel_pid_t;
+
+
+
+typedef int __kernel_ipc_pid_t;
+
+
+
+typedef unsigned int __kernel_uid_t;
+typedef unsigned int __kernel_gid_t;
+
+
+
+typedef __kernel_long_t __kernel_suseconds_t;
+
+
+
+typedef int __kernel_daddr_t;
+
+
+
+typedef unsigned int __kernel_uid32_t;
+typedef unsigned int __kernel_gid32_t;
+# 72 "./include/uapi/asm-generic/posix_types.h"
+typedef __kernel_ulong_t __kernel_size_t;
+typedef __kernel_long_t __kernel_ssize_t;
+typedef __kernel_long_t __kernel_ptrdiff_t;
+
+
+
+
+typedef struct {
+ int val[2];
+} __kernel_fsid_t;
+
+
+
+
+
+typedef __kernel_long_t __kernel_off_t;
+typedef long long __kernel_loff_t;
+typedef __kernel_long_t __kernel_old_time_t;
+
+
+
+typedef long long __kernel_time64_t;
+typedef __kernel_long_t __kernel_clock_t;
+typedef int __kernel_timer_t;
+typedef int __kernel_clockid_t;
+typedef char * __kernel_caddr_t;
+typedef unsigned short __kernel_uid16_t;
+typedef unsigned short __kernel_gid16_t;
+# 19 "./arch/x86/include/uapi/asm/posix_types_64.h" 2
+# 6 "./arch/x86/include/asm/posix_types.h" 2
+# 37 "./include/uapi/linux/posix_types.h" 2
+# 15 "./include/uapi/linux/types.h" 2
+# 29 "./include/uapi/linux/types.h"
+typedef __u16 __le16;
+typedef __u16 __be16;
+typedef __u32 __le32;
+typedef __u32 __be32;
+typedef __u64 __le64;
+typedef __u64 __be64;
+
+typedef __u16 __sum16;
+typedef __u32 __wsum;
+# 52 "./include/uapi/linux/types.h"
+typedef unsigned __poll_t;
+# 7 "./include/linux/types.h" 2
+
+
+
+
+
+
+typedef u32 __kernel_dev_t;
+
+typedef __kernel_fd_set fd_set;
+typedef __kernel_dev_t dev_t;
+typedef __kernel_ulong_t ino_t;
+typedef __kernel_mode_t mode_t;
+typedef unsigned short umode_t;
+typedef u32 nlink_t;
+typedef __kernel_off_t off_t;
+typedef __kernel_pid_t pid_t;
+typedef __kernel_daddr_t daddr_t;
+typedef __kernel_key_t key_t;
+typedef __kernel_suseconds_t suseconds_t;
+typedef __kernel_timer_t timer_t;
+typedef __kernel_clockid_t clockid_t;
+typedef __kernel_mqd_t mqd_t;
+
+typedef _Bool bool;
+
+typedef __kernel_uid32_t uid_t;
+typedef __kernel_gid32_t gid_t;
+typedef __kernel_uid16_t uid16_t;
+typedef __kernel_gid16_t gid16_t;
+
+typedef unsigned long uintptr_t;
+# 46 "./include/linux/types.h"
+typedef __kernel_loff_t loff_t;
+# 55 "./include/linux/types.h"
+typedef __kernel_size_t size_t;
+
+
+
+
+typedef __kernel_ssize_t ssize_t;
+
+
+
+
+typedef __kernel_ptrdiff_t ptrdiff_t;
+
+
+
+
+typedef __kernel_clock_t clock_t;
+
+
+
+
+typedef __kernel_caddr_t caddr_t;
+
+
+
+typedef unsigned char u_char;
+typedef unsigned short u_short;
+typedef unsigned int u_int;
+typedef unsigned long u_long;
+
+
+typedef unsigned char unchar;
+typedef unsigned short ushort;
+typedef unsigned int uint;
+typedef unsigned long ulong;
+
+
+
+
+typedef u8 u_int8_t;
+typedef s8 int8_t;
+typedef u16 u_int16_t;
+typedef s16 int16_t;
+typedef u32 u_int32_t;
+typedef s32 int32_t;
+
+
+
+typedef u8 uint8_t;
+typedef u16 uint16_t;
+typedef u32 uint32_t;
+
+
+typedef u64 uint64_t;
+typedef u64 u_int64_t;
+typedef s64 int64_t;
+# 125 "./include/linux/types.h"
+typedef u64 sector_t;
+typedef u64 blkcnt_t;
+# 143 "./include/linux/types.h"
+typedef u64 dma_addr_t;
+
+
+
+
+typedef unsigned int gfp_t;
+typedef unsigned int slab_flags_t;
+typedef unsigned int fmode_t;
+
+
+typedef u64 phys_addr_t;
+
+
+
+
+typedef phys_addr_t resource_size_t;
+
+
+
+
+
+typedef unsigned long irq_hw_number_t;
+
+typedef struct {
+ int counter;
+} atomic_t;
+
+
+
+
+typedef struct {
+ s64 counter;
+} atomic64_t;
+
+
+struct list_head {
+ struct list_head *next, *prev;
+};
+
+struct hlist_head {
+ struct hlist_node *first;
+};
+
+struct hlist_node {
+ struct hlist_node *next, **pprev;
+};
+
+struct ustat {
+ __kernel_daddr_t f_tfree;
+
+
+
+ unsigned long f_tinode;
+
+ char f_fname[6];
+ char f_fpack[6];
+};
+# 220 "./include/linux/types.h"
+struct callback_head {
+ struct callback_head *next;
+ void (*func)(struct callback_head *head);
+} __attribute__((aligned(sizeof(void *))));
+
+
+typedef void (*rcu_callback_t)(struct callback_head *head);
+typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);
+
+typedef void (*swap_func_t)(void *a, void *b, int size);
+
+typedef int (*cmp_r_func_t)(const void *a, const void *b, const void *priv);
+typedef int (*cmp_func_t)(const void *a, const void *b);
+# 19 "./include/linux/kobject.h" 2
+# 1 "./include/linux/list.h" 1
+
+
+
+
+
+
+# 1 "./include/linux/poison.h" 1
+# 8 "./include/linux/list.h" 2
+# 1 "./include/linux/const.h" 1
+
+
+
+# 1 "./include/vdso/const.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/const.h" 1
+# 6 "./include/vdso/const.h" 2
+# 5 "./include/linux/const.h" 2
+# 9 "./include/linux/list.h" 2
+# 1 "./include/linux/kernel.h" 1
+
+
+
+
+# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0/include/stdarg.h" 1 3 4
+# 40 "/usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0/include/stdarg.h" 3 4
+
+# 40 "/usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0/include/stdarg.h" 3 4
+typedef __builtin_va_list __gnuc_va_list;
+# 99 "/usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0/include/stdarg.h" 3 4
+typedef __gnuc_va_list va_list;
+# 6 "./include/linux/kernel.h" 2
+# 1 "./include/linux/limits.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/limits.h" 1
+# 6 "./include/linux/limits.h" 2
+
+# 1 "./include/vdso/limits.h" 1
+# 8 "./include/linux/limits.h" 2
+# 7 "./include/linux/kernel.h" 2
+# 1 "./include/linux/linkage.h" 1
+
+
+
+
+
+# 1 "./include/linux/stringify.h" 1
+# 7 "./include/linux/linkage.h" 2
+# 1 "./include/linux/export.h" 1
+# 16 "./include/linux/export.h"
+
+# 16 "./include/linux/export.h"
+extern struct module __this_module;
+# 43 "./include/linux/export.h"
+# 1 "./include/linux/compiler.h" 1
+# 232 "./include/linux/compiler.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *offset_to_ptr(const int *off)
+{
+ return (void *)((unsigned long)off + *off);
+}
+# 248 "./include/linux/compiler.h"
+# 1 "./arch/x86/include/generated/asm/rwonce.h" 1
+# 1 "./include/asm-generic/rwonce.h" 1
+# 26 "./include/asm-generic/rwonce.h"
+# 1 "./include/linux/kasan-checks.h" 1
+# 19 "./include/linux/kasan-checks.h"
+bool __kasan_check_read(const volatile void *p, unsigned int size);
+bool __kasan_check_write(const volatile void *p, unsigned int size);
+# 27 "./include/asm-generic/rwonce.h" 2
+# 1 "./include/linux/kcsan-checks.h" 1
+# 142 "./include/linux/kcsan-checks.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_check_access(const volatile void *ptr, size_t size,
+     int type) { }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_disable_current(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current_nowarn(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_begin(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_end(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_begin(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_end(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_atomic_next(int n) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_set_access_mask(unsigned long mask) { }
+
+struct kcsan_scoped_access { };
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kcsan_scoped_access *
+kcsan_begin_scoped_access(const volatile void *ptr, size_t size, int type,
+     struct kcsan_scoped_access *sa) { return sa; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_end_scoped_access(struct kcsan_scoped_access *sa) { }
+# 178 "./include/linux/kcsan-checks.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_check_access(const volatile void *ptr, size_t size,
+          int type) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_enable_current(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_disable_current(void) { }
+# 28 "./include/asm-generic/rwonce.h" 2
+# 64 "./include/asm-generic/rwonce.h"
+static __attribute__((no_sanitize_address)) __attribute__((__no_instrument_function__)) __attribute__((__unused__))
+unsigned long __read_once_word_nocheck(const void *addr)
+{
+ return (*(const volatile typeof( _Generic((*(unsigned long *)addr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(unsigned long *)addr))) *)&(*(unsigned long *)addr));
+}
+# 82 "./include/asm-generic/rwonce.h"
+static __attribute__((no_sanitize_address)) __attribute__((__no_instrument_function__)) __attribute__((__unused__))
+unsigned long read_word_at_a_time(const void *addr)
+{
+ __kasan_check_read(addr, 1);
+ return *(unsigned long *)addr;
+}
+# 2 "./arch/x86/include/generated/asm/rwonce.h" 2
+# 249 "./include/linux/compiler.h" 2
+# 44 "./include/linux/export.h" 2
+# 60 "./include/linux/export.h"
+struct kernel_symbol {
+ int value_offset;
+ int name_offset;
+ int namespace_offset;
+};
+# 8 "./include/linux/linkage.h" 2
+# 1 "./arch/x86/include/asm/linkage.h" 1
+# 9 "./include/linux/linkage.h" 2
+# 8 "./include/linux/kernel.h" 2
+
+
+
+# 1 "./include/linux/bitops.h" 1
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
+# 6 "./include/linux/bitops.h" 2
+# 1 "./include/linux/bits.h" 1
+
+
+
+
+
+# 1 "./include/vdso/bits.h" 1
+# 7 "./include/linux/bits.h" 2
+# 22 "./include/linux/bits.h"
+# 1 "./include/linux/build_bug.h" 1
+# 23 "./include/linux/bits.h" 2
+# 7 "./include/linux/bitops.h" 2
+
+# 1 "./include/uapi/linux/kernel.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/sysinfo.h" 1
+
+
+
+
+
+
+
+struct sysinfo {
+ __kernel_long_t uptime;
+ __kernel_ulong_t loads[3];
+ __kernel_ulong_t totalram;
+ __kernel_ulong_t freeram;
+ __kernel_ulong_t sharedram;
+ __kernel_ulong_t bufferram;
+ __kernel_ulong_t totalswap;
+ __kernel_ulong_t freeswap;
+ __u16 procs;
+ __u16 pad;
+ __kernel_ulong_t totalhigh;
+ __kernel_ulong_t freehigh;
+ __u32 mem_unit;
+ char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
+};
+# 6 "./include/uapi/linux/kernel.h" 2
+# 9 "./include/linux/bitops.h" 2
+# 23 "./include/linux/bitops.h"
+extern unsigned int __sw_hweight8(unsigned int w);
+extern unsigned int __sw_hweight16(unsigned int w);
+extern unsigned int __sw_hweight32(unsigned int w);
+extern unsigned long __sw_hweight64(__u64 w);
+
+
+
+
+
+# 1 "./arch/x86/include/asm/bitops.h" 1
+# 17 "./arch/x86/include/asm/bitops.h"
+# 1 "./arch/x86/include/asm/alternative.h" 1
+# 10 "./arch/x86/include/asm/alternative.h"
+# 1 "./arch/x86/include/asm/asm.h" 1
+# 184 "./arch/x86/include/asm/asm.h"
+register unsigned long current_stack_pointer asm("rsp");
+# 11 "./arch/x86/include/asm/alternative.h" 2
+# 58 "./arch/x86/include/asm/alternative.h"
+struct alt_instr {
+ s32 instr_offset;
+ s32 repl_offset;
+ u16 cpuid;
+ u8 instrlen;
+ u8 replacementlen;
+ u8 padlen;
+} __attribute__((__packed__));
+
+
+
+
+
+extern int alternatives_patched;
+
+extern void alternative_instructions(void);
+extern void apply_alternatives(struct alt_instr *start, struct alt_instr *end);
+
+struct module;
+# 87 "./arch/x86/include/asm/alternative.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void alternatives_smp_module_add(struct module *mod, char *name,
+            void *locks, void *locks_end,
+            void *text, void *text_end) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void alternatives_smp_module_del(struct module *mod) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void alternatives_enable_smp(void) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int alternatives_text_reserved(void *start, void *end)
+{
+ return 0;
+}
+# 18 "./arch/x86/include/asm/bitops.h" 2
+# 1 "./arch/x86/include/asm/rmwcc.h" 1
+# 19 "./arch/x86/include/asm/bitops.h" 2
+# 1 "./arch/x86/include/asm/barrier.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/asm/nops.h" 1
+# 143 "./arch/x86/include/asm/nops.h"
+extern const unsigned char * const *ideal_nops;
+extern void arch_init_ideal_nops(void);
+# 7 "./arch/x86/include/asm/barrier.h" 2
+# 36 "./arch/x86/include/asm/barrier.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long array_index_mask_nospec(unsigned long index,
+  unsigned long size)
+{
+ unsigned long mask;
+
+ asm volatile ("cmp %1,%2; sbb %0,%0;"
+   :"=r" (mask)
+   :"g"(size),"r" (index)
+   :"cc");
+ return mask;
+}
+# 85 "./arch/x86/include/asm/barrier.h"
+# 1 "./include/asm-generic/barrier.h" 1
+# 17 "./include/asm-generic/barrier.h"
+# 1 "./arch/x86/include/generated/asm/rwonce.h" 1
+# 18 "./include/asm-generic/barrier.h" 2
+# 86 "./arch/x86/include/asm/barrier.h" 2
+# 100 "./arch/x86/include/asm/barrier.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void weak_wrmsr_fence(void)
+{
+ asm volatile("mfence; lfence" : : : "memory");
+}
+# 20 "./arch/x86/include/asm/bitops.h" 2
+# 51 "./arch/x86/include/asm/bitops.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch_set_bit(long nr, volatile unsigned long *addr)
+{
+ if (__builtin_constant_p(nr)) {
+  asm volatile("" "orb %b1,%0"
+   : "+m" (*(volatile char *) ((void *)(addr) + ((nr)>>3)))
+   : "iq" ((1 << ((nr) & 7)))
+   : "memory");
+ } else {
+  asm volatile("" " " "btsq" " " " %1,%0"
+   : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
+ }
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch___set_bit(long nr, volatile unsigned long *addr)
+{
+ asm volatile(" " "btsq" " " " %1,%0" : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch_clear_bit(long nr, volatile unsigned long *addr)
+{
+ if (__builtin_constant_p(nr)) {
+  asm volatile("" "andb %b1,%0"
+   : "+m" (*(volatile char *) ((void *)(addr) + ((nr)>>3)))
+   : "iq" (~(1 << ((nr) & 7))));
+ } else {
+  asm volatile("" " " "btrq" " " " %1,%0"
+   : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
+ }
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch_clear_bit_unlock(long nr, volatile unsigned long *addr)
+{
+ __asm__ __volatile__("": : :"memory");
+ arch_clear_bit(nr, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch___clear_bit(long nr, volatile unsigned long *addr)
+{
+ asm volatile(" " "btrq" " " " %1,%0" : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_clear_bit_unlock_is_negative_byte(long nr, volatile unsigned long *addr)
+{
+ bool negative;
+ asm volatile("" "andb %2,%1"
+  "\n\t/* output condition code " "s" "*/\n"
+  : "=@cc" "s" (negative), "+m" (*(volatile char *) (addr))
+  : "ir" ((char) ~(1 << nr)) : "memory");
+ return negative;
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch___clear_bit_unlock(long nr, volatile unsigned long *addr)
+{
+ arch___clear_bit(nr, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch___change_bit(long nr, volatile unsigned long *addr)
+{
+ asm volatile(" " "btcq" " " " %1,%0" : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch_change_bit(long nr, volatile unsigned long *addr)
+{
+ if (__builtin_constant_p(nr)) {
+  asm volatile("" "xorb %b1,%0"
+   : "+m" (*(volatile char *) ((void *)(addr) + ((nr)>>3)))
+   : "iq" ((1 << ((nr) & 7))));
+ } else {
+  asm volatile("" " " "btcq" " " " %1,%0"
+   : : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
+ }
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_test_and_set_bit(long nr, volatile unsigned long *addr)
+{
+ return ({ bool c; asm volatile ("" " " "btsq" " " " %[val], " "%[var]" "\n\t/* output condition code " "c" "*/\n" : [var] "+m" (*addr), "=@cc" "c" (c) : [val] "Ir" (nr) : "memory"); c; });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_test_and_set_bit_lock(long nr, volatile unsigned long *addr)
+{
+ return arch_test_and_set_bit(nr, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch___test_and_set_bit(long nr, volatile unsigned long *addr)
+{
+ bool oldbit;
+
+ asm(" " "btsq" " " " %2,%1"
+     "\n\t/* output condition code " "c" "*/\n"
+     : "=@cc" "c" (oldbit)
+     : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
+ return oldbit;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_test_and_clear_bit(long nr, volatile unsigned long *addr)
+{
+ return ({ bool c; asm volatile ("" " " "btrq" " " " %[val], " "%[var]" "\n\t/* output condition code " "c" "*/\n" : [var] "+m" (*addr), "=@cc" "c" (c) : [val] "Ir" (nr) : "memory"); c; });
+}
+# 173 "./arch/x86/include/asm/bitops.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch___test_and_clear_bit(long nr, volatile unsigned long *addr)
+{
+ bool oldbit;
+
+ asm volatile(" " "btrq" " " " %2,%1"
+       "\n\t/* output condition code " "c" "*/\n"
+       : "=@cc" "c" (oldbit)
+       : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
+ return oldbit;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch___test_and_change_bit(long nr, volatile unsigned long *addr)
+{
+ bool oldbit;
+
+ asm volatile(" " "btcq" " " " %2,%1"
+       "\n\t/* output condition code " "c" "*/\n"
+       : "=@cc" "c" (oldbit)
+       : "m" (*(volatile long *) (addr)), "Ir" (nr) : "memory");
+
+ return oldbit;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_test_and_change_bit(long nr, volatile unsigned long *addr)
+{
+ return ({ bool c; asm volatile ("" " " "btcq" " " " %[val], " "%[var]" "\n\t/* output condition code " "c" "*/\n" : [var] "+m" (*addr), "=@cc" "c" (c) : [val] "Ir" (nr) : "memory"); c; });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool constant_test_bit(long nr, const volatile unsigned long *addr)
+{
+ return ((1UL << (nr & (64 -1))) &
+  (addr[nr >> 6])) != 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool variable_test_bit(long nr, volatile const unsigned long *addr)
+{
+ bool oldbit;
+
+ asm volatile(" " "btq" " " " %2,%1"
+       "\n\t/* output condition code " "c" "*/\n"
+       : "=@cc" "c" (oldbit)
+       : "m" (*(unsigned long *)addr), "Ir" (nr) : "memory");
+
+ return oldbit;
+}
+# 233 "./arch/x86/include/asm/bitops.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __ffs(unsigned long word)
+{
+ asm("rep; bsf %1,%0"
+  : "=r" (word)
+  : "rm" (word));
+ return word;
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long ffz(unsigned long word)
+{
+ asm("rep; bsf %1,%0"
+  : "=r" (word)
+  : "r" (~word));
+ return word;
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __fls(unsigned long word)
+{
+ asm("bsr %1,%0"
+     : "=r" (word)
+     : "rm" (word));
+ return word;
+}
+# 283 "./arch/x86/include/asm/bitops.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int ffs(int x)
+{
+ int r;
+# 297 "./arch/x86/include/asm/bitops.h"
+ asm("bsfl %1,%0"
+     : "=r" (r)
+     : "rm" (x), "0" (-1));
+# 310 "./arch/x86/include/asm/bitops.h"
+ return r + 1;
+}
+# 324 "./arch/x86/include/asm/bitops.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int fls(unsigned int x)
+{
+ int r;
+# 338 "./arch/x86/include/asm/bitops.h"
+ asm("bsrl %1,%0"
+     : "=r" (r)
+     : "rm" (x), "0" (-1));
+# 351 "./arch/x86/include/asm/bitops.h"
+ return r + 1;
+}
+# 366 "./arch/x86/include/asm/bitops.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int fls64(__u64 x)
+{
+ int bitpos = -1;
+
+
+
+
+
+ asm("bsrq %1,%q0"
+     : "+r" (bitpos)
+     : "rm" (x));
+ return bitpos + 1;
+}
+
+
+
+
+# 1 "./include/asm-generic/bitops/find.h" 1
+# 15 "./include/asm-generic/bitops/find.h"
+extern unsigned long find_next_bit(const unsigned long *addr, unsigned long
+  size, unsigned long offset);
+# 30 "./include/asm-generic/bitops/find.h"
+extern unsigned long find_next_and_bit(const unsigned long *addr1,
+  const unsigned long *addr2, unsigned long size,
+  unsigned long offset);
+# 45 "./include/asm-generic/bitops/find.h"
+extern unsigned long find_next_zero_bit(const unsigned long *addr, unsigned
+  long size, unsigned long offset);
+# 59 "./include/asm-generic/bitops/find.h"
+extern unsigned long find_first_bit(const unsigned long *addr,
+        unsigned long size);
+# 70 "./include/asm-generic/bitops/find.h"
+extern unsigned long find_first_zero_bit(const unsigned long *addr,
+      unsigned long size);
+# 93 "./include/asm-generic/bitops/find.h"
+extern unsigned long find_next_clump8(unsigned long *clump,
+          const unsigned long *addr,
+          unsigned long size, unsigned long offset);
+# 384 "./arch/x86/include/asm/bitops.h" 2
+
+# 1 "./include/asm-generic/bitops/sched.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
+# 7 "./include/asm-generic/bitops/sched.h" 2
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sched_find_first_bit(const unsigned long *b)
+{
+
+ if (b[0])
+  return __ffs(b[0]);
+ return __ffs(b[1]) + 64;
+# 30 "./include/asm-generic/bitops/sched.h"
+}
+# 386 "./arch/x86/include/asm/bitops.h" 2
+
+# 1 "./arch/x86/include/asm/arch_hweight.h" 1
+
+
+
+
+# 1 "./arch/x86/include/asm/cpufeatures.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/asm/required-features.h" 1
+# 7 "./arch/x86/include/asm/cpufeatures.h" 2
+
+
+
+# 1 "./arch/x86/include/asm/disabled-features.h" 1
+# 11 "./arch/x86/include/asm/cpufeatures.h" 2
+# 6 "./arch/x86/include/asm/arch_hweight.h" 2
+# 15 "./arch/x86/include/asm/arch_hweight.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned int __arch_hweight32(unsigned int w)
+{
+ unsigned int res;
+
+ asm ("# ALT: oldnstr\n" "661:\n\t" "call __sw_hweight32" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 4*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "popcntl %1, %0" "\n" "665""1" ":\n" ".popsection\n"
+    : "=""a" (res)
+    : "D" (w));
+
+ return res;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __arch_hweight16(unsigned int w)
+{
+ return __arch_hweight32(w & 0xffff);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __arch_hweight8(unsigned int w)
+{
+ return __arch_hweight32(w & 0xff);
+}
+# 43 "./arch/x86/include/asm/arch_hweight.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __arch_hweight64(__u64 w)
+{
+ unsigned long res;
+
+ asm ("# ALT: oldnstr\n" "661:\n\t" "call __sw_hweight64" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 4*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "popcntq %1, %0" "\n" "665""1" ":\n" ".popsection\n"
+    : "=""a" (res)
+    : "D" (w));
+
+ return res;
+}
+# 388 "./arch/x86/include/asm/bitops.h" 2
+
+# 1 "./include/asm-generic/bitops/const_hweight.h" 1
+# 390 "./arch/x86/include/asm/bitops.h" 2
+
+# 1 "./include/asm-generic/bitops/instrumented-atomic.h" 1
+# 14 "./include/asm-generic/bitops/instrumented-atomic.h"
+# 1 "./include/linux/instrumented.h" 1
+# 24 "./include/linux/instrumented.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_read(const volatile void *v, size_t size)
+{
+ __kasan_check_read(v, size);
+ kcsan_check_access(v, size, 0);
+}
+# 39 "./include/linux/instrumented.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_write(const volatile void *v, size_t size)
+{
+ __kasan_check_write(v, size);
+ kcsan_check_access(v, size, (1 << 0));
+}
+# 54 "./include/linux/instrumented.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_read_write(const volatile void *v, size_t size)
+{
+ __kasan_check_write(v, size);
+ kcsan_check_access(v, size, (1 << 1) | (1 << 0));
+}
+# 69 "./include/linux/instrumented.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_atomic_read(const volatile void *v, size_t size)
+{
+ __kasan_check_read(v, size);
+ kcsan_check_access(v, size, (1 << 2));
+}
+# 84 "./include/linux/instrumented.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_atomic_write(const volatile void *v, size_t size)
+{
+ __kasan_check_write(v, size);
+ kcsan_check_access(v, size, (1 << 2) | (1 << 0));
+}
+# 99 "./include/linux/instrumented.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void instrument_atomic_read_write(const volatile void *v, size_t size)
+{
+ __kasan_check_write(v, size);
+ kcsan_check_access(v, size, (1 << 2) | (1 << 0) | (1 << 1));
+}
+# 115 "./include/linux/instrumented.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+instrument_copy_to_user(void *to, const void *from, unsigned long n)
+{
+ __kasan_check_read(from, n);
+ kcsan_check_access(from, n, 0);
+}
+# 132 "./include/linux/instrumented.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+instrument_copy_from_user(const void *to, const void *from, unsigned long n)
+{
+ __kasan_check_write(to, n);
+ kcsan_check_access(to, n, (1 << 0));
+}
+# 15 "./include/asm-generic/bitops/instrumented-atomic.h" 2
+# 26 "./include/asm-generic/bitops/instrumented-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_bit(long nr, volatile unsigned long *addr)
+{
+ instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
+ arch_set_bit(nr, addr);
+}
+# 39 "./include/asm-generic/bitops/instrumented-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_bit(long nr, volatile unsigned long *addr)
+{
+ instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
+ arch_clear_bit(nr, addr);
+}
+# 55 "./include/asm-generic/bitops/instrumented-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void change_bit(long nr, volatile unsigned long *addr)
+{
+ instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
+ arch_change_bit(nr, addr);
+}
+# 68 "./include/asm-generic/bitops/instrumented-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_and_set_bit(long nr, volatile unsigned long *addr)
+{
+ instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
+ return arch_test_and_set_bit(nr, addr);
+}
+# 81 "./include/asm-generic/bitops/instrumented-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_and_clear_bit(long nr, volatile unsigned long *addr)
+{
+ instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
+ return arch_test_and_clear_bit(nr, addr);
+}
+# 94 "./include/asm-generic/bitops/instrumented-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_and_change_bit(long nr, volatile unsigned long *addr)
+{
+ instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
+ return arch_test_and_change_bit(nr, addr);
+}
+# 392 "./arch/x86/include/asm/bitops.h" 2
+# 1 "./include/asm-generic/bitops/instrumented-non-atomic.h" 1
+# 25 "./include/asm-generic/bitops/instrumented-non-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __set_bit(long nr, volatile unsigned long *addr)
+{
+ instrument_write(addr + ((nr) / 64), sizeof(long));
+ arch___set_bit(nr, addr);
+}
+# 40 "./include/asm-generic/bitops/instrumented-non-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __clear_bit(long nr, volatile unsigned long *addr)
+{
+ instrument_write(addr + ((nr) / 64), sizeof(long));
+ arch___clear_bit(nr, addr);
+}
+# 55 "./include/asm-generic/bitops/instrumented-non-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __change_bit(long nr, volatile unsigned long *addr)
+{
+ instrument_write(addr + ((nr) / 64), sizeof(long));
+ arch___change_bit(nr, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __instrument_read_write_bitop(long nr, volatile unsigned long *addr)
+{
+ if (0) {
+# 74 "./include/asm-generic/bitops/instrumented-non-atomic.h"
+  kcsan_check_access(addr + ((nr) / 64), sizeof(long), 0);
+
+
+
+
+  instrument_write(addr + ((nr) / 64), sizeof(long));
+ } else {
+  instrument_read_write(addr + ((nr) / 64), sizeof(long));
+ }
+}
+# 93 "./include/asm-generic/bitops/instrumented-non-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __test_and_set_bit(long nr, volatile unsigned long *addr)
+{
+ __instrument_read_write_bitop(nr, addr);
+ return arch___test_and_set_bit(nr, addr);
+}
+# 107 "./include/asm-generic/bitops/instrumented-non-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __test_and_clear_bit(long nr, volatile unsigned long *addr)
+{
+ __instrument_read_write_bitop(nr, addr);
+ return arch___test_and_clear_bit(nr, addr);
+}
+# 121 "./include/asm-generic/bitops/instrumented-non-atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __test_and_change_bit(long nr, volatile unsigned long *addr)
+{
+ __instrument_read_write_bitop(nr, addr);
+ return arch___test_and_change_bit(nr, addr);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_bit(long nr, const volatile unsigned long *addr)
+{
+ instrument_atomic_read(addr + ((nr) / 64), sizeof(long));
+ return (__builtin_constant_p((nr)) ? constant_test_bit((nr), (addr)) : variable_test_bit((nr), (addr)));
+}
+# 393 "./arch/x86/include/asm/bitops.h" 2
+# 1 "./include/asm-generic/bitops/instrumented-lock.h" 1
+# 23 "./include/asm-generic/bitops/instrumented-lock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_bit_unlock(long nr, volatile unsigned long *addr)
+{
+ instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
+ arch_clear_bit_unlock(nr, addr);
+}
+# 38 "./include/asm-generic/bitops/instrumented-lock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __clear_bit_unlock(long nr, volatile unsigned long *addr)
+{
+ instrument_write(addr + ((nr) / 64), sizeof(long));
+ arch___clear_bit_unlock(nr, addr);
+}
+# 53 "./include/asm-generic/bitops/instrumented-lock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_and_set_bit_lock(long nr, volatile unsigned long *addr)
+{
+ instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
+ return arch_test_and_set_bit_lock(nr, addr);
+}
+# 71 "./include/asm-generic/bitops/instrumented-lock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
+clear_bit_unlock_is_negative_byte(long nr, volatile unsigned long *addr)
+{
+ instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
+ return arch_clear_bit_unlock_is_negative_byte(nr, addr);
+}
+# 394 "./arch/x86/include/asm/bitops.h" 2
+
+# 1 "./include/asm-generic/bitops/le.h" 1
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
+# 6 "./include/asm-generic/bitops/le.h" 2
+# 1 "./arch/x86/include/uapi/asm/byteorder.h" 1
+
+
+
+
+# 1 "./include/linux/byteorder/little_endian.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/byteorder/little_endian.h" 1
+# 13 "./include/uapi/linux/byteorder/little_endian.h"
+# 1 "./include/linux/swab.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/swab.h" 1
+
+
+
+
+
+
+
+# 1 "./arch/x86/include/uapi/asm/swab.h" 1
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __arch_swab32(__u32 val)
+{
+ asm("bswapl %0" : "=r" (val) : "0" (val));
+ return val;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u64 __arch_swab64(__u64 val)
+{
+# 31 "./arch/x86/include/uapi/asm/swab.h"
+ asm("bswapq %0" : "=r" (val) : "0" (val));
+ return val;
+
+}
+# 9 "./include/uapi/linux/swab.h" 2
+# 48 "./include/uapi/linux/swab.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u16 __fswab16(__u16 val)
+{
+
+
+
+ return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswab32(__u32 val)
+{
+
+ return __arch_swab32(val);
+
+
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u64 __fswab64(__u64 val)
+{
+
+ return __arch_swab64(val);
+
+
+
+
+
+
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswahw32(__u32 val)
+{
+
+
+
+ return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswahb32(__u32 val)
+{
+
+
+
+ return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));
+
+}
+# 136 "./include/uapi/linux/swab.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __swab(const unsigned long y)
+{
+
+ return (__u64)__builtin_bswap64((__u64)(y));
+
+
+
+}
+# 171 "./include/uapi/linux/swab.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u16 __swab16p(const __u16 *p)
+{
+
+
+
+ return (__u16)__builtin_bswap16((__u16)(*p));
+
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u32 __swab32p(const __u32 *p)
+{
+
+
+
+ return (__u32)__builtin_bswap32((__u32)(*p));
+
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u64 __swab64p(const __u64 *p)
+{
+
+
+
+ return (__u64)__builtin_bswap64((__u64)(*p));
+
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u32 __swahw32p(const __u32 *p)
+{
+
+
+
+ return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));
+
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u32 __swahb32p(const __u32 *p)
+{
+
+
+
+ return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));
+
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __swab16s(__u16 *p)
+{
+
+
+
+ *p = __swab16p(p);
+
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __swab32s(__u32 *p)
+{
+
+
+
+ *p = __swab32p(p);
+
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __swab64s(__u64 *p)
+{
+
+
+
+ *p = __swab64p(p);
+
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __swahw32s(__u32 *p)
+{
+
+
+
+ *p = __swahw32p(p);
+
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __swahb32s(__u32 *p)
+{
+
+
+
+ *p = __swahb32p(p);
+
+}
+# 6 "./include/linux/swab.h" 2
+# 14 "./include/uapi/linux/byteorder/little_endian.h" 2
+# 44 "./include/uapi/linux/byteorder/little_endian.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __le64 __cpu_to_le64p(const __u64 *p)
+{
+ return ( __le64)*p;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u64 __le64_to_cpup(const __le64 *p)
+{
+ return ( __u64)*p;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __le32 __cpu_to_le32p(const __u32 *p)
+{
+ return ( __le32)*p;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u32 __le32_to_cpup(const __le32 *p)
+{
+ return ( __u32)*p;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __le16 __cpu_to_le16p(const __u16 *p)
+{
+ return ( __le16)*p;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u16 __le16_to_cpup(const __le16 *p)
+{
+ return ( __u16)*p;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __be64 __cpu_to_be64p(const __u64 *p)
+{
+ return ( __be64)__swab64p(p);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u64 __be64_to_cpup(const __be64 *p)
+{
+ return __swab64p((__u64 *)p);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __be32 __cpu_to_be32p(const __u32 *p)
+{
+ return ( __be32)__swab32p(p);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u32 __be32_to_cpup(const __be32 *p)
+{
+ return __swab32p((__u32 *)p);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __be16 __cpu_to_be16p(const __u16 *p)
+{
+ return ( __be16)__swab16p(p);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __u16 __be16_to_cpup(const __be16 *p)
+{
+ return __swab16p((__u16 *)p);
+}
+# 6 "./include/linux/byteorder/little_endian.h" 2
+
+
+
+
+
+# 1 "./include/linux/byteorder/generic.h" 1
+# 144 "./include/linux/byteorder/generic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void le16_add_cpu(__le16 *var, u16 val)
+{
+ *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void le32_add_cpu(__le32 *var, u32 val)
+{
+ *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void le64_add_cpu(__le64 *var, u64 val)
+{
+ *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void le32_to_cpu_array(u32 *buf, unsigned int words)
+{
+ while (words--) {
+  do { (void)(buf); } while (0);
+  buf++;
+ }
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_to_le32_array(u32 *buf, unsigned int words)
+{
+ while (words--) {
+  do { (void)(buf); } while (0);
+  buf++;
+ }
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void be16_add_cpu(__be16 *var, u16 val)
+{
+ *var = (( __be16)(__u16)__builtin_bswap16((__u16)(((__u16)__builtin_bswap16((__u16)(( __u16)(__be16)(*var))) + val))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void be32_add_cpu(__be32 *var, u32 val)
+{
+ *var = (( __be32)(__u32)__builtin_bswap32((__u32)(((__u32)__builtin_bswap32((__u32)(( __u32)(__be32)(*var))) + val))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void be64_add_cpu(__be64 *var, u64 val)
+{
+ *var = (( __be64)(__u64)__builtin_bswap64((__u64)(((__u64)__builtin_bswap64((__u64)(( __u64)(__be64)(*var))) + val))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_to_be32_array(__be32 *dst, const u32 *src, size_t len)
+{
+ int i;
+
+ for (i = 0; i < len; i++)
+  dst[i] = (( __be32)(__u32)__builtin_bswap32((__u32)((src[i]))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void be32_to_cpu_array(u32 *dst, const __be32 *src, size_t len)
+{
+ int i;
+
+ for (i = 0; i < len; i++)
+  dst[i] = (__u32)__builtin_bswap32((__u32)(( __u32)(__be32)(src[i])));
+}
+# 12 "./include/linux/byteorder/little_endian.h" 2
+# 6 "./arch/x86/include/uapi/asm/byteorder.h" 2
+# 7 "./include/asm-generic/bitops/le.h" 2
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long find_next_zero_bit_le(const void *addr,
+  unsigned long size, unsigned long offset)
+{
+ return find_next_zero_bit(addr, size, offset);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long find_next_bit_le(const void *addr,
+  unsigned long size, unsigned long offset)
+{
+ return find_next_bit(addr, size, offset);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long find_first_zero_bit_le(const void *addr,
+  unsigned long size)
+{
+ return find_first_zero_bit(addr, size);
+}
+# 53 "./include/asm-generic/bitops/le.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_bit_le(int nr, const void *addr)
+{
+ return test_bit(nr ^ 0, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_bit_le(int nr, void *addr)
+{
+ set_bit(nr ^ 0, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_bit_le(int nr, void *addr)
+{
+ clear_bit(nr ^ 0, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __set_bit_le(int nr, void *addr)
+{
+ __set_bit(nr ^ 0, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __clear_bit_le(int nr, void *addr)
+{
+ __clear_bit(nr ^ 0, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_set_bit_le(int nr, void *addr)
+{
+ return test_and_set_bit(nr ^ 0, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_clear_bit_le(int nr, void *addr)
+{
+ return test_and_clear_bit(nr ^ 0, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __test_and_set_bit_le(int nr, void *addr)
+{
+ return __test_and_set_bit(nr ^ 0, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __test_and_clear_bit_le(int nr, void *addr)
+{
+ return __test_and_clear_bit(nr ^ 0, addr);
+}
+# 396 "./arch/x86/include/asm/bitops.h" 2
+
+# 1 "./include/asm-generic/bitops/ext2-atomic-setbit.h" 1
+# 398 "./arch/x86/include/asm/bitops.h" 2
+# 33 "./include/linux/bitops.h" 2
+# 68 "./include/linux/bitops.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_bitmask_order(unsigned int count)
+{
+ int order;
+
+ order = fls(count);
+ return order;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long hweight_long(unsigned long w)
+{
+ return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p((__u64)w) ? (((((unsigned int) ((!!(((__u64)w) & (1ULL << 0))) + (!!(((__u64)w) & (1ULL << 1))) + (!!(((__u64)w) & (1ULL << 2))) + (!!(((__u64)w) & (1ULL << 3))) + (!!(((__u64)w) & (1ULL << 4))) + (!!(((__u64)w) & (1ULL << 5))) + (!!(((__u64)w) & (1ULL << 6))) + (!!(((__u64)w) & (1ULL << 7))))) + ((unsigned int) ((!!((((__u64)w) >> 8) & (1ULL << 0))) + (!!((((__u64)w) >> 8) & (1ULL << 1))) + (!!((((__u64)w) >> 8) & (1ULL << 2))) + (!!((((__u64)w) >> 8) & (1ULL << 3))) + (!!((((__u64)w) >> 8) & (1ULL << 4))) + (!!((((__u64)w) >> 8) & (1ULL << 5))) + (!!((((__u64)w) >> 8) & (1ULL << 6))) + (!!((((__u64)w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((__u64)w) >> 16) & (1ULL << 0))) + (!!((((__u64)w) >> 16) & (1ULL << 1))) + (!!((((__u64)w) >> 16) & (1ULL << 2))) + (!!((((__u64)w) >> 16) & (1ULL << 3))) + (!!((((__u64)w) >> 16) & (1ULL << 4))) + (!!((((__u64)w) >> 16) & (1ULL << 5))) + (!!((((__u64)w) >> 16) & (1ULL << 6))) + (!!((((__u64)w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 16) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!((((__u64)w) >> 32) & (1ULL << 0))) + (!!((((__u64)w) >> 32) & (1ULL << 1))) + (!!((((__u64)w) >> 32) & (1ULL << 2))) + (!!((((__u64)w) >> 32) & (1ULL << 3))) + (!!((((__u64)w) >> 32) & (1ULL << 4))) + (!!((((__u64)w) >> 32) & (1ULL << 5))) + (!!((((__u64)w) >> 32) & (1ULL << 6))) + (!!((((__u64)w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 32) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((((__u64)w) >> 32) >> 16) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64((__u64)w));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u64 rol64(__u64 word, unsigned int shift)
+{
+ return (word << (shift & 63)) | (word >> ((-shift) & 63));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u64 ror64(__u64 word, unsigned int shift)
+{
+ return (word >> (shift & 63)) | (word << ((-shift) & 63));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u32 rol32(__u32 word, unsigned int shift)
+{
+ return (word << (shift & 31)) | (word >> ((-shift) & 31));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u32 ror32(__u32 word, unsigned int shift)
+{
+ return (word >> (shift & 31)) | (word << ((-shift) & 31));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u16 rol16(__u16 word, unsigned int shift)
+{
+ return (word << (shift & 15)) | (word >> ((-shift) & 15));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u16 ror16(__u16 word, unsigned int shift)
+{
+ return (word >> (shift & 15)) | (word << ((-shift) & 15));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u8 rol8(__u8 word, unsigned int shift)
+{
+ return (word << (shift & 7)) | (word >> ((-shift) & 7));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u8 ror8(__u8 word, unsigned int shift)
+{
+ return (word >> (shift & 7)) | (word << ((-shift) & 7));
+}
+# 168 "./include/linux/bitops.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __s32 sign_extend32(__u32 value, int index)
+{
+ __u8 shift = 31 - index;
+ return (__s32)(value << shift) >> shift;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __s64 sign_extend64(__u64 value, int index)
+{
+ __u8 shift = 63 - index;
+ return (__s64)(value << shift) >> shift;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned fls_long(unsigned long l)
+{
+ if (sizeof(l) == 4)
+  return fls(l);
+ return fls64(l);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_count_order(unsigned int count)
+{
+ if (count == 0)
+  return -1;
+
+ return fls(--count);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_count_order_long(unsigned long l)
+{
+ if (l == 0UL)
+  return -1;
+ return (int)fls_long(--l);
+}
+# 221 "./include/linux/bitops.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __ffs64(u64 word)
+{
+
+
+
+
+
+
+ return __ffs((unsigned long)word);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void assign_bit(long nr, volatile unsigned long *addr,
+           bool value)
+{
+ if (value)
+  set_bit(nr, addr);
+ else
+  clear_bit(nr, addr);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __assign_bit(long nr, volatile unsigned long *addr,
+      bool value)
+{
+ if (value)
+  __set_bit(nr, addr);
+ else
+  __clear_bit(nr, addr);
+}
+# 297 "./include/linux/bitops.h"
+extern unsigned long find_last_bit(const unsigned long *addr,
+       unsigned long size);
+# 12 "./include/linux/kernel.h" 2
+# 1 "./include/linux/log2.h" 1
+# 21 "./include/linux/log2.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
+int __ilog2_u32(u32 n)
+{
+ return fls(n) - 1;
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
+int __ilog2_u64(u64 n)
+{
+ return fls64(n) - 1;
+}
+# 44 "./include/linux/log2.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
+bool is_power_of_2(unsigned long n)
+{
+ return (n != 0 && ((n & (n - 1)) == 0));
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
+unsigned long __roundup_pow_of_two(unsigned long n)
+{
+ return 1UL << fls_long(n - 1);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
+unsigned long __rounddown_pow_of_two(unsigned long n)
+{
+ return 1UL << (fls_long(n) - 1);
+}
+# 198 "./include/linux/log2.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__const__))
+int __order_base_2(unsigned long n)
+{
+ return n > 1 ? ( __builtin_constant_p(n - 1) ? ((n - 1) < 2 ? 0 : 63 - __builtin_clzll(n - 1)) : (sizeof(n - 1) <= 4) ? __ilog2_u32(n - 1) : __ilog2_u64(n - 1) ) + 1 : 0;
+}
+# 225 "./include/linux/log2.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((const))
+int __bits_per(unsigned long n)
+{
+ if (n < 2)
+  return 1;
+ if (is_power_of_2(n))
+  return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) ) + 1;
+ return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) );
+}
+# 13 "./include/linux/kernel.h" 2
+# 1 "./include/linux/math.h" 1
+
+
+
+
+# 1 "./arch/x86/include/asm/div64.h" 1
+# 75 "./arch/x86/include/asm/div64.h"
+# 1 "./include/asm-generic/div64.h" 1
+# 76 "./arch/x86/include/asm/div64.h" 2
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 mul_u64_u64_div_u64(u64 a, u64 mul, u64 div)
+{
+ u64 q;
+
+ asm ("mulq %2; divq %3" : "=a" (q)
+    : "a" (a), "rm" (mul), "rm" (div)
+    : "rdx");
+
+ return q;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 mul_u64_u32_div(u64 a, u32 mul, u32 div)
+{
+ return mul_u64_u64_div_u64(a, mul, div);
+}
+# 6 "./include/linux/math.h" 2
+# 160 "./include/linux/math.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 reciprocal_scale(u32 val, u32 ep_ro)
+{
+ return (u32)(((u64) val * ep_ro) >> 32);
+}
+
+u64 int_pow(u64 base, unsigned int exp);
+unsigned long int_sqrt(unsigned long);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 int_sqrt64(u64 x)
+{
+ return (u32)int_sqrt(x);
+}
+# 14 "./include/linux/kernel.h" 2
+# 1 "./include/linux/minmax.h" 1
+# 15 "./include/linux/kernel.h" 2
+# 1 "./include/linux/typecheck.h" 1
+# 16 "./include/linux/kernel.h" 2
+# 1 "./include/linux/printk.h" 1
+
+
+
+
+
+# 1 "./include/linux/init.h" 1
+# 116 "./include/linux/init.h"
+typedef int (*initcall_t)(void);
+typedef void (*exitcall_t)(void);
+
+
+typedef int initcall_entry_t;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) initcall_t initcall_from_entry(initcall_entry_t *entry)
+{
+ return offset_to_ptr(entry);
+}
+# 135 "./include/linux/init.h"
+extern initcall_entry_t __con_initcall_start[], __con_initcall_end[];
+
+
+typedef void (*ctor_fn_t)(void);
+
+struct file_system_type;
+
+
+extern int do_one_initcall(initcall_t fn);
+extern char __attribute__((__section__(".init.data"))) boot_command_line[];
+extern char *saved_command_line;
+extern unsigned int reset_devices;
+
+
+void setup_arch(char **);
+void prepare_namespace(void);
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) init_rootfs(void);
+extern struct file_system_type rootfs_fs_type;
+
+
+extern bool rodata_enabled;
+
+
+void mark_rodata_ro(void);
+
+
+extern void (*late_time_init)(void);
+
+extern bool initcall_debug;
+# 7 "./include/linux/printk.h" 2
+# 1 "./include/linux/kern_levels.h" 1
+# 8 "./include/linux/printk.h" 2
+
+# 1 "./include/linux/cache.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/asm/cache.h" 1
+# 7 "./include/linux/cache.h" 2
+# 10 "./include/linux/printk.h" 2
+# 1 "./include/linux/ratelimit_types.h" 1
+
+
+
+
+
+# 1 "./include/uapi/linux/param.h" 1
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/param.h" 1
+# 1 "./include/asm-generic/param.h" 1
+
+
+
+
+# 1 "./include/uapi/asm-generic/param.h" 1
+# 6 "./include/asm-generic/param.h" 2
+# 2 "./arch/x86/include/generated/uapi/asm/param.h" 2
+# 6 "./include/uapi/linux/param.h" 2
+# 7 "./include/linux/ratelimit_types.h" 2
+# 1 "./include/linux/spinlock_types.h" 1
+# 15 "./include/linux/spinlock_types.h"
+# 1 "./include/linux/spinlock_types_up.h" 1
+# 17 "./include/linux/spinlock_types_up.h"
+typedef struct {
+ volatile unsigned int slock;
+} arch_spinlock_t;
+# 31 "./include/linux/spinlock_types_up.h"
+typedef struct {
+
+} arch_rwlock_t;
+# 16 "./include/linux/spinlock_types.h" 2
+
+
+# 1 "./include/linux/lockdep_types.h" 1
+# 17 "./include/linux/lockdep_types.h"
+enum lockdep_wait_type {
+ LD_WAIT_INV = 0,
+
+ LD_WAIT_FREE,
+ LD_WAIT_SPIN,
+
+
+ LD_WAIT_CONFIG,
+
+
+
+ LD_WAIT_SLEEP,
+
+ LD_WAIT_MAX,
+};
+
+enum lockdep_lock_type {
+ LD_LOCK_NORMAL = 0,
+ LD_LOCK_PERCPU,
+ LD_LOCK_MAX,
+};
+# 69 "./include/linux/lockdep_types.h"
+struct lockdep_subclass_key {
+ char __one_byte;
+} __attribute__ ((__packed__));
+
+
+struct lock_class_key {
+ union {
+  struct hlist_node hash_entry;
+  struct lockdep_subclass_key subkeys[8UL];
+ };
+};
+
+extern struct lock_class_key __lockdep_no_validate__;
+
+struct lock_trace;
+
+
+
+
+
+
+
+struct lock_class {
+
+
+
+ struct hlist_node hash_entry;
+
+
+
+
+
+
+ struct list_head lock_entry;
+
+
+
+
+
+
+ struct list_head locks_after, locks_before;
+
+ const struct lockdep_subclass_key *key;
+ unsigned int subclass;
+ unsigned int dep_gen_id;
+
+
+
+
+ unsigned long usage_mask;
+ const struct lock_trace *usage_traces[(2*4 + 2)];
+
+
+
+
+
+ int name_version;
+ const char *name;
+
+ u8 wait_type_inner;
+ u8 wait_type_outer;
+ u8 lock_type;
+
+
+
+
+
+
+} ;
+# 176 "./include/linux/lockdep_types.h"
+struct lockdep_map {
+ struct lock_class_key *key;
+ struct lock_class *class_cache[2];
+ const char *name;
+ u8 wait_type_outer;
+ u8 wait_type_inner;
+ u8 lock_type;
+
+
+
+
+
+};
+
+struct pin_cookie { unsigned int val; };
+# 19 "./include/linux/spinlock_types.h" 2
+
+typedef struct raw_spinlock {
+ arch_spinlock_t raw_lock;
+
+ unsigned int magic, owner_cpu;
+ void *owner;
+
+
+ struct lockdep_map dep_map;
+
+} raw_spinlock_t;
+# 71 "./include/linux/spinlock_types.h"
+typedef struct spinlock {
+ union {
+  struct raw_spinlock rlock;
+
+
+
+  struct {
+   u8 __padding[(__builtin_offsetof(struct raw_spinlock, dep_map))];
+   struct lockdep_map dep_map;
+  };
+
+ };
+} spinlock_t;
+# 99 "./include/linux/spinlock_types.h"
+# 1 "./include/linux/rwlock_types.h" 1
+# 11 "./include/linux/rwlock_types.h"
+typedef struct {
+ arch_rwlock_t raw_lock;
+
+ unsigned int magic, owner_cpu;
+ void *owner;
+
+
+ struct lockdep_map dep_map;
+
+} rwlock_t;
+# 100 "./include/linux/spinlock_types.h" 2
+# 8 "./include/linux/ratelimit_types.h" 2
+
+
+
+
+
+
+
+struct ratelimit_state {
+ raw_spinlock_t lock;
+
+ int interval;
+ int burst;
+ int printed;
+ int missed;
+ unsigned long begin;
+ unsigned long flags;
+};
+# 40 "./include/linux/ratelimit_types.h"
+extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
+# 11 "./include/linux/printk.h" 2
+
+extern const char linux_banner[];
+extern const char linux_proc_banner[];
+
+extern int oops_in_progress;
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int printk_get_level(const char *buffer)
+{
+ if (buffer[0] == '\001' && buffer[1]) {
+  switch (buffer[1]) {
+  case '0' ... '7':
+  case 'c':
+   return buffer[1];
+  }
+ }
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *printk_skip_level(const char *buffer)
+{
+ if (printk_get_level(buffer))
+  return buffer + 2;
+
+ return buffer;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *printk_skip_headers(const char *buffer)
+{
+ while (printk_get_level(buffer))
+  buffer = printk_skip_level(buffer);
+
+ return buffer;
+}
+# 65 "./include/linux/printk.h"
+extern int console_printk[];
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void console_silent(void)
+{
+ (console_printk[0]) = 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void console_verbose(void)
+{
+ if ((console_printk[0]))
+  (console_printk[0]) = 15;
+}
+
+
+
+extern char devkmsg_log_str[];
+struct ctl_table;
+
+extern int suppress_printk;
+
+struct va_format {
+ const char *fmt;
+ va_list *va;
+};
+# 145 "./include/linux/printk.h"
+extern __attribute__((__format__(printf, 1, 2)))
+void early_printk(const char *fmt, ...);
+
+
+
+
+
+
+extern void printk_nmi_enter(void);
+extern void printk_nmi_exit(void);
+extern void printk_nmi_direct_enter(void);
+extern void printk_nmi_direct_exit(void);
+
+
+
+
+
+
+
+struct dev_printk_info;
+
+
+ __attribute__((__format__(printf, 4, 0)))
+int vprintk_emit(int facility, int level,
+   const struct dev_printk_info *dev_info,
+   const char *fmt, va_list args);
+
+ __attribute__((__format__(printf, 1, 0)))
+int vprintk(const char *fmt, va_list args);
+
+ __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
+int printk(const char *fmt, ...);
+
+
+
+
+__attribute__((__format__(printf, 1, 2))) __attribute__((__cold__)) int printk_deferred(const char *fmt, ...);
+
+
+
+
+
+
+extern int __printk_ratelimit(const char *func);
+
+extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
+       unsigned int interval_msec);
+
+extern int printk_delay_msec;
+extern int dmesg_restrict;
+
+extern int
+devkmsg_sysctl_set_loglvl(struct ctl_table *table, int write, void *buf,
+     size_t *lenp, loff_t *ppos);
+
+extern void wake_up_klogd(void);
+
+char *log_buf_addr_get(void);
+u32 log_buf_len_get(void);
+void log_buf_vmcoreinfo_setup(void);
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_log_buf(int early);
+__attribute__((__format__(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...);
+void dump_stack_print_info(const char *log_lvl);
+void show_regs_print_info(const char *log_lvl);
+extern void dump_stack(void) __attribute__((__cold__));
+extern void printk_safe_flush(void);
+extern void printk_safe_flush_on_panic(void);
+# 285 "./include/linux/printk.h"
+extern int kptr_restrict;
+# 565 "./include/linux/printk.h"
+extern const struct file_operations kmsg_fops;
+
+enum {
+ DUMP_PREFIX_NONE,
+ DUMP_PREFIX_ADDRESS,
+ DUMP_PREFIX_OFFSET
+};
+extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
+         int groupsize, char *linebuf, size_t linebuflen,
+         bool ascii);
+
+extern void print_hex_dump(const char *level, const char *prefix_str,
+      int prefix_type, int rowsize, int groupsize,
+      const void *buf, size_t len, bool ascii);
+# 604 "./include/linux/printk.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void print_hex_dump_debug(const char *prefix_str, int prefix_type,
+     int rowsize, int groupsize,
+     const void *buf, size_t len, bool ascii)
+{
+}
+# 17 "./include/linux/kernel.h" 2
+
+# 1 "./include/linux/static_call_types.h" 1
+# 32 "./include/linux/static_call_types.h"
+struct static_call_site {
+ s32 addr;
+ s32 key;
+};
+# 19 "./include/linux/kernel.h" 2
+# 79 "./include/linux/kernel.h"
+struct completion;
+struct pt_regs;
+struct user;
+# 163 "./include/linux/kernel.h"
+  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ___might_sleep(const char *file, int line,
+       int preempt_offset) { }
+  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __might_sleep(const char *file, int line,
+       int preempt_offset) { }
+# 180 "./include/linux/kernel.h"
+void __might_fault(const char *file, int line);
+
+
+
+
+extern struct atomic_notifier_head panic_notifier_list;
+extern long (*panic_blink)(int state);
+__attribute__((__format__(printf, 1, 2)))
+void panic(const char *fmt, ...) __attribute__((__noreturn__)) __attribute__((__cold__));
+void nmi_panic(struct pt_regs *regs, const char *msg);
+extern void oops_enter(void);
+extern void oops_exit(void);
+extern bool oops_may_print(void);
+void do_exit(long error_code) __attribute__((__noreturn__));
+void complete_and_exit(struct completion *, long) __attribute__((__noreturn__));
+
+
+int __attribute__((__warn_unused_result__)) _kstrtoul(const char *s, unsigned int base, unsigned long *res);
+int __attribute__((__warn_unused_result__)) _kstrtol(const char *s, unsigned int base, long *res);
+
+int __attribute__((__warn_unused_result__)) kstrtoull(const char *s, unsigned int base, unsigned long long *res);
+int __attribute__((__warn_unused_result__)) kstrtoll(const char *s, unsigned int base, long long *res);
+# 218 "./include/linux/kernel.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtoul(const char *s, unsigned int base, unsigned long *res)
+{
+
+
+
+
+ if (sizeof(unsigned long) == sizeof(unsigned long long) &&
+     __alignof__(unsigned long) == __alignof__(unsigned long long))
+  return kstrtoull(s, base, (unsigned long long *)res);
+ else
+  return _kstrtoul(s, base, res);
+}
+# 246 "./include/linux/kernel.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtol(const char *s, unsigned int base, long *res)
+{
+
+
+
+
+ if (sizeof(long) == sizeof(long long) &&
+     __alignof__(long) == __alignof__(long long))
+  return kstrtoll(s, base, (long long *)res);
+ else
+  return _kstrtol(s, base, res);
+}
+
+int __attribute__((__warn_unused_result__)) kstrtouint(const char *s, unsigned int base, unsigned int *res);
+int __attribute__((__warn_unused_result__)) kstrtoint(const char *s, unsigned int base, int *res);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtou64(const char *s, unsigned int base, u64 *res)
+{
+ return kstrtoull(s, base, res);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtos64(const char *s, unsigned int base, s64 *res)
+{
+ return kstrtoll(s, base, res);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtou32(const char *s, unsigned int base, u32 *res)
+{
+ return kstrtouint(s, base, res);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtos32(const char *s, unsigned int base, s32 *res)
+{
+ return kstrtoint(s, base, res);
+}
+
+int __attribute__((__warn_unused_result__)) kstrtou16(const char *s, unsigned int base, u16 *res);
+int __attribute__((__warn_unused_result__)) kstrtos16(const char *s, unsigned int base, s16 *res);
+int __attribute__((__warn_unused_result__)) kstrtou8(const char *s, unsigned int base, u8 *res);
+int __attribute__((__warn_unused_result__)) kstrtos8(const char *s, unsigned int base, s8 *res);
+int __attribute__((__warn_unused_result__)) kstrtobool(const char *s, bool *res);
+
+int __attribute__((__warn_unused_result__)) kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
+int __attribute__((__warn_unused_result__)) kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
+int __attribute__((__warn_unused_result__)) kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
+int __attribute__((__warn_unused_result__)) kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
+int __attribute__((__warn_unused_result__)) kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
+int __attribute__((__warn_unused_result__)) kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
+int __attribute__((__warn_unused_result__)) kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
+int __attribute__((__warn_unused_result__)) kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
+int __attribute__((__warn_unused_result__)) kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
+int __attribute__((__warn_unused_result__)) kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
+int __attribute__((__warn_unused_result__)) kstrtobool_from_user(const char *s, size_t count, bool *res);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
+{
+ return kstrtoull_from_user(s, count, base, res);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
+{
+ return kstrtoll_from_user(s, count, base, res);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
+{
+ return kstrtouint_from_user(s, count, base, res);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
+{
+ return kstrtoint_from_user(s, count, base, res);
+}
+# 333 "./include/linux/kernel.h"
+extern unsigned long simple_strtoul(const char *,char **,unsigned int);
+extern long simple_strtol(const char *,char **,unsigned int);
+extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
+extern long long simple_strtoll(const char *,char **,unsigned int);
+
+extern int num_to_str(char *buf, int size,
+        unsigned long long num, unsigned int width);
+
+
+
+extern __attribute__((__format__(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
+extern __attribute__((__format__(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
+extern __attribute__((__format__(printf, 3, 4)))
+int snprintf(char *buf, size_t size, const char *fmt, ...);
+extern __attribute__((__format__(printf, 3, 0)))
+int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
+extern __attribute__((__format__(printf, 3, 4)))
+int scnprintf(char *buf, size_t size, const char *fmt, ...);
+extern __attribute__((__format__(printf, 3, 0)))
+int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
+extern __attribute__((__format__(printf, 2, 3))) __attribute__((__malloc__))
+char *kasprintf(gfp_t gfp, const char *fmt, ...);
+extern __attribute__((__format__(printf, 2, 0))) __attribute__((__malloc__))
+char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
+extern __attribute__((__format__(printf, 2, 0)))
+const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);
+
+extern __attribute__((__format__(scanf, 2, 3)))
+int sscanf(const char *, const char *, ...);
+extern __attribute__((__format__(scanf, 2, 0)))
+int vsscanf(const char *, const char *, va_list);
+
+extern int get_option(char **str, int *pint);
+extern char *get_options(const char *str, int nints, int *ints);
+extern unsigned long long memparse(const char *ptr, char **retptr);
+extern bool parse_option_str(const char *str, const char *option);
+extern char *next_arg(char *args, char **param, char **val);
+
+extern int core_kernel_text(unsigned long addr);
+extern int init_kernel_text(unsigned long addr);
+extern int core_kernel_data(unsigned long addr);
+extern int __kernel_text_address(unsigned long addr);
+extern int kernel_text_address(unsigned long addr);
+extern int func_ptr_is_kernel_text(void *ptr);
+
+
+
+
+
+
+
+extern void bust_spinlocks(int yes);
+extern int panic_timeout;
+extern unsigned long panic_print;
+extern int panic_on_oops;
+extern int panic_on_unrecovered_nmi;
+extern int panic_on_io_nmi;
+extern int panic_on_warn;
+extern unsigned long panic_on_taint;
+extern bool panic_on_taint_nousertaint;
+extern int sysctl_panic_on_rcu_stall;
+extern int sysctl_max_rcu_stall_to_panic;
+extern int sysctl_panic_on_stackoverflow;
+
+extern bool crash_kexec_post_notifiers;
+
+
+
+
+
+
+extern atomic_t panic_cpu;
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_arch_panic_timeout(int timeout, int arch_default_timeout)
+{
+ if (panic_timeout == arch_default_timeout)
+  panic_timeout = timeout;
+}
+extern const char *print_tainted(void);
+enum lockdep_ok {
+ LOCKDEP_STILL_OK,
+ LOCKDEP_NOW_UNRELIABLE
+};
+extern void add_taint(unsigned flag, enum lockdep_ok);
+extern int test_taint(unsigned flag);
+extern unsigned long get_taint(void);
+extern int root_mountflags;
+
+extern bool early_boot_irqs_disabled;
+
+
+
+
+
+extern enum system_states {
+ SYSTEM_BOOTING,
+ SYSTEM_SCHEDULING,
+ SYSTEM_RUNNING,
+ SYSTEM_HALT,
+ SYSTEM_POWER_OFF,
+ SYSTEM_RESTART,
+ SYSTEM_SUSPEND,
+} system_state;
+# 464 "./include/linux/kernel.h"
+struct taint_flag {
+ char c_true;
+ char c_false;
+ bool module;
+};
+
+extern const struct taint_flag taint_flags[18];
+
+extern const char hex_asc[];
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char *hex_byte_pack(char *buf, u8 byte)
+{
+ *buf++ = hex_asc[((byte) & 0xf0) >> 4];
+ *buf++ = hex_asc[((byte) & 0x0f)];
+ return buf;
+}
+
+extern const char hex_asc_upper[];
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char *hex_byte_pack_upper(char *buf, u8 byte)
+{
+ *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
+ *buf++ = hex_asc_upper[((byte) & 0x0f)];
+ return buf;
+}
+
+extern int hex_to_bin(char ch);
+extern int __attribute__((__warn_unused_result__)) hex2bin(u8 *dst, const char *src, size_t count);
+extern char *bin2hex(char *dst, const void *src, size_t count);
+
+bool mac_pton(const char *s, u8 *mac);
+# 520 "./include/linux/kernel.h"
+enum ftrace_dump_mode {
+ DUMP_NONE,
+ DUMP_ALL,
+ DUMP_ORIG,
+};
+
+
+void tracing_on(void);
+void tracing_off(void);
+int tracing_is_on(void);
+void tracing_snapshot(void);
+void tracing_snapshot_alloc(void);
+
+extern void tracing_start(void);
+extern void tracing_stop(void);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 1, 2)))
+void ____trace_printk_check_format(const char *fmt, ...)
+{
+}
+# 599 "./include/linux/kernel.h"
+extern __attribute__((__format__(printf, 2, 3)))
+int __trace_bprintk(unsigned long ip, const char *fmt, ...);
+
+extern __attribute__((__format__(printf, 2, 3)))
+int __trace_printk(unsigned long ip, const char *fmt, ...);
+# 640 "./include/linux/kernel.h"
+extern int __trace_bputs(unsigned long ip, const char *str);
+extern int __trace_puts(unsigned long ip, const char *str, int size);
+
+extern void trace_dump_stack(int skip);
+# 662 "./include/linux/kernel.h"
+extern __attribute__((__format__(printf, 2, 0))) int
+__ftrace_vbprintk(unsigned long ip, const char *fmt, va_list ap);
+
+extern __attribute__((__format__(printf, 2, 0))) int
+__ftrace_vprintk(unsigned long ip, const char *fmt, va_list ap);
+
+extern void ftrace_dump(enum ftrace_dump_mode oops_dump_mode);
+# 10 "./include/linux/list.h" 2
+# 33 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void INIT_LIST_HEAD(struct list_head *list)
+{
+ do { do { extern void __compiletime_assert_0(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_0(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
+ list->prev = list;
+}
+
+
+extern bool __list_add_valid(struct list_head *new,
+         struct list_head *prev,
+         struct list_head *next);
+extern bool __list_del_entry_valid(struct list_head *entry);
+# 63 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_add(struct list_head *new,
+         struct list_head *prev,
+         struct list_head *next)
+{
+ if (!__list_add_valid(new, prev, next))
+  return;
+
+ next->prev = new;
+ new->next = next;
+ new->prev = prev;
+ do { do { extern void __compiletime_assert_1(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_1(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (new); } while (0); } while (0);
+}
+# 84 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_add(struct list_head *new, struct list_head *head)
+{
+ __list_add(new, head, head->next);
+}
+# 98 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_add_tail(struct list_head *new, struct list_head *head)
+{
+ __list_add(new, head->prev, head);
+}
+# 110 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_del(struct list_head * prev, struct list_head * next)
+{
+ next->prev = prev;
+ do { do { extern void __compiletime_assert_2(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_2(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (next); } while (0); } while (0);
+}
+# 124 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_del_clearprev(struct list_head *entry)
+{
+ __list_del(entry->prev, entry->next);
+ entry->prev = ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_del_entry(struct list_head *entry)
+{
+ if (!__list_del_entry_valid(entry))
+  return;
+
+ __list_del(entry->prev, entry->next);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_del(struct list_head *entry)
+{
+ __list_del_entry(entry);
+ entry->next = ((void *) 0x100 + (0xdead000000000000UL));
+ entry->prev = ((void *) 0x122 + (0xdead000000000000UL));
+}
+# 158 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_replace(struct list_head *old,
+    struct list_head *new)
+{
+ new->next = old->next;
+ new->next->prev = new;
+ new->prev = old->prev;
+ new->prev->next = new;
+}
+# 174 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_replace_init(struct list_head *old,
+         struct list_head *new)
+{
+ list_replace(old, new);
+ INIT_LIST_HEAD(old);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_swap(struct list_head *entry1,
+        struct list_head *entry2)
+{
+ struct list_head *pos = entry2->prev;
+
+ list_del(entry2);
+ list_replace(entry1, entry2);
+ if (pos == entry1)
+  pos = entry2;
+ list_add(entry1, pos);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_del_init(struct list_head *entry)
+{
+ __list_del_entry(entry);
+ INIT_LIST_HEAD(entry);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_move(struct list_head *list, struct list_head *head)
+{
+ __list_del_entry(list);
+ list_add(list, head);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_move_tail(struct list_head *list,
+      struct list_head *head)
+{
+ __list_del_entry(list);
+ list_add_tail(list, head);
+}
+# 240 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_bulk_move_tail(struct list_head *head,
+           struct list_head *first,
+           struct list_head *last)
+{
+ first->prev->next = last->next;
+ last->next->prev = first->prev;
+
+ head->prev->next = first;
+ first->prev = head->prev;
+
+ last->next = head;
+ head->prev = last;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int list_is_first(const struct list_head *list,
+     const struct list_head *head)
+{
+ return list->prev == head;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int list_is_last(const struct list_head *list,
+    const struct list_head *head)
+{
+ return list->next == head;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int list_empty(const struct list_head *head)
+{
+ return ({ do { extern void __compiletime_assert_3(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head->next) == sizeof(char) || sizeof(head->next) == sizeof(short) || sizeof(head->next) == sizeof(int) || sizeof(head->next) == sizeof(long)) || sizeof(head->next) == sizeof(long long))) __compiletime_assert_3(); } while (0); (*(const volatile typeof( _Generic((head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->next))) *)&(head->next)); }) == head;
+}
+# 296 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_del_init_careful(struct list_head *entry)
+{
+ __list_del_entry(entry);
+ entry->prev = entry;
+ do { do { extern void __compiletime_assert_4(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&entry->next) == sizeof(char) || sizeof(*&entry->next) == sizeof(short) || sizeof(*&entry->next) == sizeof(int) || sizeof(*&entry->next) == sizeof(long)))) __compiletime_assert_4(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_5(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&entry->next) == sizeof(char) || sizeof(*&entry->next) == sizeof(short) || sizeof(*&entry->next) == sizeof(int) || sizeof(*&entry->next) == sizeof(long)) || sizeof(*&entry->next) == sizeof(long long))) __compiletime_assert_5(); } while (0); do { *(volatile typeof(*&entry->next) *)&(*&entry->next) = (entry); } while (0); } while (0); } while (0);
+}
+# 316 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int list_empty_careful(const struct list_head *head)
+{
+ struct list_head *next = ({ typeof( _Generic((*&head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&head->next))) ___p1 = ({ do { extern void __compiletime_assert_6(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&head->next) == sizeof(char) || sizeof(*&head->next) == sizeof(short) || sizeof(*&head->next) == sizeof(int) || sizeof(*&head->next) == sizeof(long)) || sizeof(*&head->next) == sizeof(long long))) __compiletime_assert_6(); } while (0); (*(const volatile typeof( _Generic((*&head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&head->next))) *)&(*&head->next)); }); do { extern void __compiletime_assert_7(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&head->next) == sizeof(char) || sizeof(*&head->next) == sizeof(short) || sizeof(*&head->next) == sizeof(int) || sizeof(*&head->next) == sizeof(long)))) __compiletime_assert_7(); } while (0); __asm__ __volatile__("": : :"memory"); (typeof(*&head->next))___p1; });
+ return (next == head) && (next == head->prev);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_rotate_left(struct list_head *head)
+{
+ struct list_head *first;
+
+ if (!list_empty(head)) {
+  first = head->next;
+  list_move_tail(first, head);
+ }
+}
+# 343 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_rotate_to_front(struct list_head *list,
+     struct list_head *head)
+{
+
+
+
+
+
+ list_move_tail(head, list);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int list_is_singular(const struct list_head *head)
+{
+ return !list_empty(head) && (head->next == head->prev);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_cut_position(struct list_head *list,
+  struct list_head *head, struct list_head *entry)
+{
+ struct list_head *new_first = entry->next;
+ list->next = head->next;
+ list->next->prev = list;
+ list->prev = entry;
+ entry->next = list;
+ head->next = new_first;
+ new_first->prev = head;
+}
+# 389 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_cut_position(struct list_head *list,
+  struct list_head *head, struct list_head *entry)
+{
+ if (list_empty(head))
+  return;
+ if (list_is_singular(head) &&
+  (head->next != entry && head != entry))
+  return;
+ if (entry == head)
+  INIT_LIST_HEAD(list);
+ else
+  __list_cut_position(list, head, entry);
+}
+# 417 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_cut_before(struct list_head *list,
+       struct list_head *head,
+       struct list_head *entry)
+{
+ if (head->next == entry) {
+  INIT_LIST_HEAD(list);
+  return;
+ }
+ list->next = head->next;
+ list->next->prev = list;
+ list->prev = entry->prev;
+ list->prev->next = list;
+ head->next = entry;
+ entry->prev = head;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_splice(const struct list_head *list,
+     struct list_head *prev,
+     struct list_head *next)
+{
+ struct list_head *first = list->next;
+ struct list_head *last = list->prev;
+
+ first->prev = prev;
+ prev->next = first;
+
+ last->next = next;
+ next->prev = last;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice(const struct list_head *list,
+    struct list_head *head)
+{
+ if (!list_empty(list))
+  __list_splice(list, head, head->next);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice_tail(struct list_head *list,
+    struct list_head *head)
+{
+ if (!list_empty(list))
+  __list_splice(list, head->prev, head);
+}
+# 478 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice_init(struct list_head *list,
+        struct list_head *head)
+{
+ if (!list_empty(list)) {
+  __list_splice(list, head, head->next);
+  INIT_LIST_HEAD(list);
+ }
+}
+# 495 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice_tail_init(struct list_head *list,
+      struct list_head *head)
+{
+ if (!list_empty(list)) {
+  __list_splice(list, head->prev, head);
+  INIT_LIST_HEAD(list);
+ }
+}
+# 792 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void INIT_HLIST_NODE(struct hlist_node *h)
+{
+ h->next = ((void *)0);
+ h->pprev = ((void *)0);
+}
+# 806 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hlist_unhashed(const struct hlist_node *h)
+{
+ return !h->pprev;
+}
+# 819 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hlist_unhashed_lockless(const struct hlist_node *h)
+{
+ return !({ do { extern void __compiletime_assert_8(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->pprev) == sizeof(char) || sizeof(h->pprev) == sizeof(short) || sizeof(h->pprev) == sizeof(int) || sizeof(h->pprev) == sizeof(long)) || sizeof(h->pprev) == sizeof(long long))) __compiletime_assert_8(); } while (0); (*(const volatile typeof( _Generic((h->pprev), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->pprev))) *)&(h->pprev)); });
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hlist_empty(const struct hlist_head *h)
+{
+ return !({ do { extern void __compiletime_assert_9(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_9(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __hlist_del(struct hlist_node *n)
+{
+ struct hlist_node *next = n->next;
+ struct hlist_node **pprev = n->pprev;
+
+ do { do { extern void __compiletime_assert_10(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_10(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = (next); } while (0); } while (0);
+ if (next)
+  do { do { extern void __compiletime_assert_11(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_11(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (pprev); } while (0); } while (0);
+}
+# 850 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_del(struct hlist_node *n)
+{
+ __hlist_del(n);
+ n->next = ((void *) 0x100 + (0xdead000000000000UL));
+ n->pprev = ((void *) 0x122 + (0xdead000000000000UL));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_del_init(struct hlist_node *n)
+{
+ if (!hlist_unhashed(n)) {
+  __hlist_del(n);
+  INIT_HLIST_NODE(n);
+ }
+}
+# 879 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
+{
+ struct hlist_node *first = h->first;
+ do { do { extern void __compiletime_assert_12(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_12(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (first); } while (0); } while (0);
+ if (first)
+  do { do { extern void __compiletime_assert_13(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_13(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_14(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_14(); } while (0); do { *(volatile typeof(h->first) *)&(h->first) = (n); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_15(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_15(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_before(struct hlist_node *n,
+        struct hlist_node *next)
+{
+ do { do { extern void __compiletime_assert_16(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_16(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_17(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_17(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (next); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_18(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_18(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_19(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*(n->pprev)) == sizeof(char) || sizeof(*(n->pprev)) == sizeof(short) || sizeof(*(n->pprev)) == sizeof(int) || sizeof(*(n->pprev)) == sizeof(long)) || sizeof(*(n->pprev)) == sizeof(long long))) __compiletime_assert_19(); } while (0); do { *(volatile typeof(*(n->pprev)) *)&(*(n->pprev)) = (n); } while (0); } while (0);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_behind(struct hlist_node *n,
+        struct hlist_node *prev)
+{
+ do { do { extern void __compiletime_assert_20(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_20(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (prev->next); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_21(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_21(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (n); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_22(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_22(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);
+
+ if (n->next)
+  do { do { extern void __compiletime_assert_23(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_23(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
+}
+# 927 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_fake(struct hlist_node *n)
+{
+ n->pprev = &n->next;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hlist_fake(struct hlist_node *h)
+{
+ return h->pprev == &h->next;
+}
+# 949 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
+hlist_is_singular_node(struct hlist_node *n, struct hlist_head *h)
+{
+ return !n->next && n->pprev == &h->first;
+}
+# 963 "./include/linux/list.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_move_list(struct hlist_head *old,
+       struct hlist_head *new)
+{
+ new->first = old->first;
+ if (new->first)
+  new->first->pprev = &new->first;
+ old->first = ((void *)0);
+}
+# 20 "./include/linux/kobject.h" 2
+# 1 "./include/linux/sysfs.h" 1
+# 16 "./include/linux/sysfs.h"
+# 1 "./include/linux/kernfs.h" 1
+# 10 "./include/linux/kernfs.h"
+# 1 "./include/linux/err.h" 1
+
+
+
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/errno.h" 1
+# 1 "./include/uapi/asm-generic/errno.h" 1
+
+
+
+
+# 1 "./include/uapi/asm-generic/errno-base.h" 1
+# 6 "./include/uapi/asm-generic/errno.h" 2
+# 2 "./arch/x86/include/generated/uapi/asm/errno.h" 2
+# 9 "./include/linux/err.h" 2
+# 24 "./include/linux/err.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void * __attribute__((__warn_unused_result__)) ERR_PTR(long error)
+{
+ return (void *) error;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long __attribute__((__warn_unused_result__)) PTR_ERR( const void *ptr)
+{
+ return (long) ptr;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) IS_ERR( const void *ptr)
+{
+ return __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) IS_ERR_OR_NULL( const void *ptr)
+{
+ return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
+}
+# 51 "./include/linux/err.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void * __attribute__((__warn_unused_result__)) ERR_CAST( const void *ptr)
+{
+
+ return (void *) ptr;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) PTR_ERR_OR_ZERO( const void *ptr)
+{
+ if (IS_ERR(ptr))
+  return PTR_ERR(ptr);
+ else
+  return 0;
+}
+# 11 "./include/linux/kernfs.h" 2
+
+# 1 "./include/linux/mutex.h" 1
+# 14 "./include/linux/mutex.h"
+# 1 "./arch/x86/include/asm/current.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/asm/percpu.h" 1
+# 358 "./arch/x86/include/asm/percpu.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool x86_this_cpu_constant_test_bit(unsigned int nr,
+                        const unsigned long *addr)
+{
+ unsigned long *a =
+  (unsigned long *)addr + nr / 64;
+
+
+ return ((1UL << (nr % 64)) & ({ u64 pfo_val__; asm ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (*a)); (typeof(*a))(unsigned long) pfo_val__; })) != 0;
+
+
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool x86_this_cpu_variable_test_bit(int nr,
+                        const unsigned long *addr)
+{
+ bool oldbit;
+
+ asm volatile("btl """ "%" "2"",%1"
+   "\n\t/* output condition code " "c" "*/\n"
+   : "=@cc" "c" (oldbit)
+   : "m" (*(unsigned long *)addr), "Ir" (nr));
+
+ return oldbit;
+}
+
+
+
+
+
+
+
+# 1 "./include/asm-generic/percpu.h" 1
+
+
+
+
+
+# 1 "./include/linux/threads.h" 1
+# 7 "./include/asm-generic/percpu.h" 2
+# 1 "./include/linux/percpu-defs.h" 1
+# 308 "./include/linux/percpu-defs.h"
+extern void __bad_size_call_parameter(void);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __this_cpu_preempt_check(const char *op) { }
+# 8 "./include/asm-generic/percpu.h" 2
+# 391 "./arch/x86/include/asm/percpu.h" 2
+
+
+extern __attribute__((section(".data" "..read_mostly"))) __typeof__(unsigned long) this_cpu_off;
+# 7 "./arch/x86/include/asm/current.h" 2
+
+
+struct task_struct;
+
+extern __attribute__((section(".data" ""))) __typeof__(struct task_struct *) current_task;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct task_struct *get_current(void)
+{
+ return ({ typeof(current_task) pscr_ret__; do { const void *__vpp_verify = (typeof((&(current_task)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(current_task)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm("mov" "b " "" "%" "P[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "p" (&(current_task))); (typeof(current_task))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm("mov" "w " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(current_task))); (typeof(current_task))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm("mov" "l " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(current_task))); (typeof(current_task))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm("mov" "q " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(current_task))); (typeof(current_task))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
+}
+# 15 "./include/linux/mutex.h" 2
+
+
+# 1 "./include/linux/lockdep.h" 1
+# 14 "./include/linux/lockdep.h"
+# 1 "./include/linux/smp.h" 1
+# 10 "./include/linux/smp.h"
+# 1 "./include/linux/errno.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/errno.h" 1
+# 1 "./arch/x86/include/generated/uapi/asm/errno.h" 1
+# 2 "./include/uapi/linux/errno.h" 2
+# 6 "./include/linux/errno.h" 2
+# 11 "./include/linux/smp.h" 2
+
+
+# 1 "./include/linux/cpumask.h" 1
+# 12 "./include/linux/cpumask.h"
+# 1 "./include/linux/bitmap.h" 1
+# 9 "./include/linux/bitmap.h"
+# 1 "./include/linux/string.h" 1
+# 11 "./include/linux/string.h"
+# 1 "./include/uapi/linux/string.h" 1
+# 12 "./include/linux/string.h" 2
+
+extern char *strndup_user(const char *, long);
+extern void *memdup_user(const void *, size_t);
+extern void *vmemdup_user(const void *, size_t);
+extern void *memdup_user_nul(const void *, size_t);
+
+
+
+
+# 1 "./arch/x86/include/asm/string.h" 1
+
+
+
+
+# 1 "./arch/x86/include/asm/string_64.h" 1
+
+
+
+
+
+# 1 "./include/linux/jump_label.h" 1
+# 79 "./include/linux/jump_label.h"
+extern bool static_key_initialized;
+# 110 "./include/linux/jump_label.h"
+struct static_key {
+ atomic_t enabled;
+};
+# 184 "./include/linux/jump_label.h"
+enum jump_label_type {
+ JUMP_LABEL_NOP = 0,
+ JUMP_LABEL_JMP,
+};
+
+struct module;
+# 249 "./include/linux/jump_label.h"
+# 1 "./include/linux/atomic.h" 1
+
+
+
+
+
+
+# 1 "./arch/x86/include/asm/atomic.h" 1
+
+
+
+
+
+
+
+# 1 "./arch/x86/include/asm/cmpxchg.h" 1
+# 13 "./arch/x86/include/asm/cmpxchg.h"
+extern void __xchg_wrong_size(void)
+ __attribute__((__error__("Bad argument size for xchg")));
+extern void __cmpxchg_wrong_size(void)
+ __attribute__((__error__("Bad argument size for cmpxchg")));
+extern void __xadd_wrong_size(void)
+ __attribute__((__error__("Bad argument size for xadd")));
+extern void __add_wrong_size(void)
+ __attribute__((__error__("Bad argument size for add")));
+# 145 "./arch/x86/include/asm/cmpxchg.h"
+# 1 "./arch/x86/include/asm/cmpxchg_64.h" 1
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_64bit(volatile u64 *ptr, u64 val)
+{
+ *ptr = val;
+}
+# 146 "./arch/x86/include/asm/cmpxchg.h" 2
+# 9 "./arch/x86/include/asm/atomic.h" 2
+# 23 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_read(const atomic_t *v)
+{
+
+
+
+
+ return (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));
+}
+# 39 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_set(atomic_t *v, int i)
+{
+ do { *(volatile typeof(v->counter) *)&(v->counter) = (i); } while (0);
+}
+# 51 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_add(int i, atomic_t *v)
+{
+ asm volatile("" "addl %1,%0"
+       : "+m" (v->counter)
+       : "ir" (i) : "memory");
+}
+# 65 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_sub(int i, atomic_t *v)
+{
+ asm volatile("" "subl %1,%0"
+       : "+m" (v->counter)
+       : "ir" (i) : "memory");
+}
+# 81 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic_sub_and_test(int i, atomic_t *v)
+{
+ return ({ bool c; asm volatile ("" "subl" " %[val], " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : [val] "er" (i) : "memory"); c; });
+}
+# 93 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_inc(atomic_t *v)
+{
+ asm volatile("" "incl %0"
+       : "+m" (v->counter) :: "memory");
+}
+# 106 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_dec(atomic_t *v)
+{
+ asm volatile("" "decl %0"
+       : "+m" (v->counter) :: "memory");
+}
+# 121 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic_dec_and_test(atomic_t *v)
+{
+ return ({ bool c; asm volatile ("" "decl" " " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); c; });
+}
+# 135 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic_inc_and_test(atomic_t *v)
+{
+ return ({ bool c; asm volatile ("" "incl" " " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); c; });
+}
+# 150 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic_add_negative(int i, atomic_t *v)
+{
+ return ({ bool c; asm volatile ("" "addl" " %[val], " "%[var]" "\n\t/* output condition code " "s" "*/\n" : [var] "+m" (v->counter), "=@cc" "s" (c) : [val] "er" (i) : "memory"); c; });
+}
+# 163 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_add_return(int i, atomic_t *v)
+{
+ return i + ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
+}
+# 176 "./arch/x86/include/asm/atomic.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_sub_return(int i, atomic_t *v)
+{
+ return arch_atomic_add_return(-i, v);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_fetch_add(int i, atomic_t *v)
+{
+ return ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_fetch_sub(int i, atomic_t *v)
+{
+ return ({ __typeof__ (*(((&v->counter)))) __ret = (((-i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_cmpxchg(atomic_t *v, int old, int new)
+{
+ return ({ __typeof__(*((&v->counter))) __ret; __typeof__(*((&v->counter))) __old = ((old)); __typeof__(*((&v->counter))) __new = ((new)); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)((&v->counter)); asm volatile("" "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)((&v->counter)); asm volatile("" "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)((&v->counter)); asm volatile("" "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)((&v->counter)); asm volatile("" "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; });
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
+{
+ return ({ bool success; __typeof__(((&v->counter))) _old = (__typeof__(((&v->counter))))(((old))); __typeof__(*(((&v->counter)))) __old = *_old; __typeof__(*(((&v->counter)))) __new = (((new))); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)(((&v->counter))); asm volatile("" "cmpxchgb %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "q" (__new) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)(((&v->counter))); asm volatile("" "cmpxchgw %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)(((&v->counter))); asm volatile("" "cmpxchgl %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)(((&v->counter))); asm volatile("" "cmpxchgq %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } default: __cmpxchg_wrong_size(); } if (__builtin_expect(!!(!success), 0)) *_old = __old; __builtin_expect(!!(success), 1); });
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_xchg(atomic_t *v, int new)
+{
+ return ({ __typeof__ (*((&v->counter))) __ret = ((new)); switch (sizeof(*((&v->counter)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_and(int i, atomic_t *v)
+{
+ asm volatile("" "andl %1,%0"
+   : "+m" (v->counter)
+   : "ir" (i)
+   : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_fetch_and(int i, atomic_t *v)
+{
+ int val = arch_atomic_read(v);
+
+ do { } while (!arch_atomic_try_cmpxchg(v, &val, val & i));
+
+ return val;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_or(int i, atomic_t *v)
+{
+ asm volatile("" "orl %1,%0"
+   : "+m" (v->counter)
+   : "ir" (i)
+   : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_fetch_or(int i, atomic_t *v)
+{
+ int val = arch_atomic_read(v);
+
+ do { } while (!arch_atomic_try_cmpxchg(v, &val, val | i));
+
+ return val;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic_xor(int i, atomic_t *v)
+{
+ asm volatile("" "xorl %1,%0"
+   : "+m" (v->counter)
+   : "ir" (i)
+   : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_atomic_fetch_xor(int i, atomic_t *v)
+{
+ int val = arch_atomic_read(v);
+
+ do { } while (!arch_atomic_try_cmpxchg(v, &val, val ^ i));
+
+ return val;
+}
+
+
+
+
+
+# 1 "./arch/x86/include/asm/atomic64_64.h" 1
+# 20 "./arch/x86/include/asm/atomic64_64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_read(const atomic64_t *v)
+{
+ return (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));
+}
+# 32 "./arch/x86/include/asm/atomic64_64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_atomic64_set(atomic64_t *v, s64 i)
+{
+ do { *(volatile typeof(v->counter) *)&(v->counter) = (i); } while (0);
+}
+# 44 "./arch/x86/include/asm/atomic64_64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic64_add(s64 i, atomic64_t *v)
+{
+ asm volatile("" "addq %1,%0"
+       : "=m" (v->counter)
+       : "er" (i), "m" (v->counter) : "memory");
+}
+# 58 "./arch/x86/include/asm/atomic64_64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_atomic64_sub(s64 i, atomic64_t *v)
+{
+ asm volatile("" "subq %1,%0"
+       : "=m" (v->counter)
+       : "er" (i), "m" (v->counter) : "memory");
+}
+# 74 "./arch/x86/include/asm/atomic64_64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_atomic64_sub_and_test(s64 i, atomic64_t *v)
+{
+ return ({ bool c; asm volatile ("" "subq" " %[val], " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : [val] "er" (i) : "memory"); c; });
+}
+# 86 "./arch/x86/include/asm/atomic64_64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic64_inc(atomic64_t *v)
+{
+ asm volatile("" "incq %0"
+       : "=m" (v->counter)
+       : "m" (v->counter) : "memory");
+}
+# 100 "./arch/x86/include/asm/atomic64_64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_atomic64_dec(atomic64_t *v)
+{
+ asm volatile("" "decq %0"
+       : "=m" (v->counter)
+       : "m" (v->counter) : "memory");
+}
+# 116 "./arch/x86/include/asm/atomic64_64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_atomic64_dec_and_test(atomic64_t *v)
+{
+ return ({ bool c; asm volatile ("" "decq" " " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); c; });
+}
+# 130 "./arch/x86/include/asm/atomic64_64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_atomic64_inc_and_test(atomic64_t *v)
+{
+ return ({ bool c; asm volatile ("" "incq" " " "%[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); c; });
+}
+# 145 "./arch/x86/include/asm/atomic64_64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_atomic64_add_negative(s64 i, atomic64_t *v)
+{
+ return ({ bool c; asm volatile ("" "addq" " %[val], " "%[var]" "\n\t/* output condition code " "s" "*/\n" : [var] "+m" (v->counter), "=@cc" "s" (c) : [val] "er" (i) : "memory"); c; });
+}
+# 158 "./arch/x86/include/asm/atomic64_64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64 arch_atomic64_add_return(s64 i, atomic64_t *v)
+{
+ return i + ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_sub_return(s64 i, atomic64_t *v)
+{
+ return arch_atomic64_add_return(-i, v);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_fetch_add(s64 i, atomic64_t *v)
+{
+ return ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_fetch_sub(s64 i, atomic64_t *v)
+{
+ return ({ __typeof__ (*(((&v->counter)))) __ret = (((-i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile ("" "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile ("" "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile ("" "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile ("" "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
+{
+ return ({ __typeof__(*((&v->counter))) __ret; __typeof__(*((&v->counter))) __old = ((old)); __typeof__(*((&v->counter))) __new = ((new)); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)((&v->counter)); asm volatile("" "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)((&v->counter)); asm volatile("" "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)((&v->counter)); asm volatile("" "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)((&v->counter)); asm volatile("" "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; });
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
+{
+ return ({ bool success; __typeof__(((&v->counter))) _old = (__typeof__(((&v->counter))))(((old))); __typeof__(*(((&v->counter)))) __old = *_old; __typeof__(*(((&v->counter)))) __new = (((new))); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)(((&v->counter))); asm volatile("" "cmpxchgb %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "q" (__new) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)(((&v->counter))); asm volatile("" "cmpxchgw %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)(((&v->counter))); asm volatile("" "cmpxchgl %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)(((&v->counter))); asm volatile("" "cmpxchgq %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } default: __cmpxchg_wrong_size(); } if (__builtin_expect(!!(!success), 0)) *_old = __old; __builtin_expect(!!(success), 1); });
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_xchg(atomic64_t *v, s64 new)
+{
+ return ({ __typeof__ (*((&v->counter))) __ret = ((new)); switch (sizeof(*((&v->counter)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_atomic64_and(s64 i, atomic64_t *v)
+{
+ asm volatile("" "andq %1,%0"
+   : "+m" (v->counter)
+   : "er" (i)
+   : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_fetch_and(s64 i, atomic64_t *v)
+{
+ s64 val = arch_atomic64_read(v);
+
+ do {
+ } while (!arch_atomic64_try_cmpxchg(v, &val, val & i));
+ return val;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_atomic64_or(s64 i, atomic64_t *v)
+{
+ asm volatile("" "orq %1,%0"
+   : "+m" (v->counter)
+   : "er" (i)
+   : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_fetch_or(s64 i, atomic64_t *v)
+{
+ s64 val = arch_atomic64_read(v);
+
+ do {
+ } while (!arch_atomic64_try_cmpxchg(v, &val, val | i));
+ return val;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_atomic64_xor(s64 i, atomic64_t *v)
+{
+ asm volatile("" "xorq %1,%0"
+   : "+m" (v->counter)
+   : "er" (i)
+   : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 arch_atomic64_fetch_xor(s64 i, atomic64_t *v)
+{
+ s64 val = arch_atomic64_read(v);
+
+ do {
+ } while (!arch_atomic64_try_cmpxchg(v, &val, val ^ i));
+ return val;
+}
+# 270 "./arch/x86/include/asm/atomic.h" 2
+# 8 "./include/linux/atomic.h" 2
+# 81 "./include/linux/atomic.h"
+# 1 "./include/linux/atomic-arch-fallback.h" 1
+# 151 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_read_acquire(const atomic_t *v)
+{
+ return ({ typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) ___p1 = ({ do { extern void __compiletime_assert_24(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_24(); } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { extern void __compiletime_assert_25(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_25(); } while (0); __asm__ __volatile__("": : :"memory"); (typeof(*&(v)->counter))___p1; });
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch_atomic_set_release(atomic_t *v, int i)
+{
+ do { do { extern void __compiletime_assert_26(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_26(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_27(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_27(); } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
+}
+# 353 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_inc_return(atomic_t *v)
+{
+ return arch_atomic_add_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_inc_return_acquire(atomic_t *v)
+{
+ return arch_atomic_add_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_inc_return_release(atomic_t *v)
+{
+ return arch_atomic_add_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_inc_return_relaxed(atomic_t *v)
+{
+ return arch_atomic_add_return(1, v);
+}
+# 434 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_inc(atomic_t *v)
+{
+ return arch_atomic_fetch_add(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_inc_acquire(atomic_t *v)
+{
+ return arch_atomic_fetch_add(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_inc_release(atomic_t *v)
+{
+ return arch_atomic_fetch_add(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_inc_relaxed(atomic_t *v)
+{
+ return arch_atomic_fetch_add(1, v);
+}
+# 524 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_dec_return(atomic_t *v)
+{
+ return arch_atomic_sub_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_dec_return_acquire(atomic_t *v)
+{
+ return arch_atomic_sub_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_dec_return_release(atomic_t *v)
+{
+ return arch_atomic_sub_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_dec_return_relaxed(atomic_t *v)
+{
+ return arch_atomic_sub_return(1, v);
+}
+# 605 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_dec(atomic_t *v)
+{
+ return arch_atomic_fetch_sub(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_dec_acquire(atomic_t *v)
+{
+ return arch_atomic_fetch_sub(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_dec_release(atomic_t *v)
+{
+ return arch_atomic_fetch_sub(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_dec_relaxed(atomic_t *v)
+{
+ return arch_atomic_fetch_sub(1, v);
+}
+# 721 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch_atomic_andnot(int i, atomic_t *v)
+{
+ arch_atomic_and(~i, v);
+}
+# 737 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_andnot(int i, atomic_t *v)
+{
+ return arch_atomic_fetch_and(~i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_andnot_acquire(int i, atomic_t *v)
+{
+ return arch_atomic_fetch_and(~i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_andnot_release(int i, atomic_t *v)
+{
+ return arch_atomic_fetch_and(~i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_andnot_relaxed(int i, atomic_t *v)
+{
+ return arch_atomic_fetch_and(~i, v);
+}
+# 1155 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_fetch_add_unless(atomic_t *v, int a, int u)
+{
+ int c = arch_atomic_read(v);
+
+ do {
+  if (__builtin_expect(!!(c == u), 0))
+   break;
+ } while (!arch_atomic_try_cmpxchg(v, &c, c + a));
+
+ return c;
+}
+# 1180 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_atomic_add_unless(atomic_t *v, int a, int u)
+{
+ return arch_atomic_fetch_add_unless(v, a, u) != u;
+}
+# 1196 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_atomic_inc_not_zero(atomic_t *v)
+{
+ return arch_atomic_add_unless(v, 1, 0);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_atomic_inc_unless_negative(atomic_t *v)
+{
+ int c = arch_atomic_read(v);
+
+ do {
+  if (__builtin_expect(!!(c < 0), 0))
+   return false;
+ } while (!arch_atomic_try_cmpxchg(v, &c, c + 1));
+
+ return true;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_atomic_dec_unless_positive(atomic_t *v)
+{
+ int c = arch_atomic_read(v);
+
+ do {
+  if (__builtin_expect(!!(c > 0), 0))
+   return false;
+ } while (!arch_atomic_try_cmpxchg(v, &c, c - 1));
+
+ return true;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+arch_atomic_dec_if_positive(atomic_t *v)
+{
+ int dec, c = arch_atomic_read(v);
+
+ do {
+  dec = c - 1;
+  if (__builtin_expect(!!(dec < 0), 0))
+   break;
+ } while (!arch_atomic_try_cmpxchg(v, &c, dec));
+
+ return dec;
+}
+# 1258 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_read_acquire(const atomic64_t *v)
+{
+ return ({ typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) ___p1 = ({ do { extern void __compiletime_assert_28(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_28(); } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { extern void __compiletime_assert_29(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_29(); } while (0); __asm__ __volatile__("": : :"memory"); (typeof(*&(v)->counter))___p1; });
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch_atomic64_set_release(atomic64_t *v, s64 i)
+{
+ do { do { extern void __compiletime_assert_30(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_30(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_31(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_31(); } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
+}
+# 1460 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_inc_return(atomic64_t *v)
+{
+ return arch_atomic64_add_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_inc_return_acquire(atomic64_t *v)
+{
+ return arch_atomic64_add_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_inc_return_release(atomic64_t *v)
+{
+ return arch_atomic64_add_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_inc_return_relaxed(atomic64_t *v)
+{
+ return arch_atomic64_add_return(1, v);
+}
+# 1541 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_inc(atomic64_t *v)
+{
+ return arch_atomic64_fetch_add(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_inc_acquire(atomic64_t *v)
+{
+ return arch_atomic64_fetch_add(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_inc_release(atomic64_t *v)
+{
+ return arch_atomic64_fetch_add(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_inc_relaxed(atomic64_t *v)
+{
+ return arch_atomic64_fetch_add(1, v);
+}
+# 1631 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_dec_return(atomic64_t *v)
+{
+ return arch_atomic64_sub_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_dec_return_acquire(atomic64_t *v)
+{
+ return arch_atomic64_sub_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_dec_return_release(atomic64_t *v)
+{
+ return arch_atomic64_sub_return(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_dec_return_relaxed(atomic64_t *v)
+{
+ return arch_atomic64_sub_return(1, v);
+}
+# 1712 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_dec(atomic64_t *v)
+{
+ return arch_atomic64_fetch_sub(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_dec_acquire(atomic64_t *v)
+{
+ return arch_atomic64_fetch_sub(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_dec_release(atomic64_t *v)
+{
+ return arch_atomic64_fetch_sub(1, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_dec_relaxed(atomic64_t *v)
+{
+ return arch_atomic64_fetch_sub(1, v);
+}
+# 1828 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+arch_atomic64_andnot(s64 i, atomic64_t *v)
+{
+ arch_atomic64_and(~i, v);
+}
+# 1844 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_andnot(s64 i, atomic64_t *v)
+{
+ return arch_atomic64_fetch_and(~i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
+{
+ return arch_atomic64_fetch_and(~i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
+{
+ return arch_atomic64_fetch_and(~i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
+{
+ return arch_atomic64_fetch_and(~i, v);
+}
+# 2262 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
+{
+ s64 c = arch_atomic64_read(v);
+
+ do {
+  if (__builtin_expect(!!(c == u), 0))
+   break;
+ } while (!arch_atomic64_try_cmpxchg(v, &c, c + a));
+
+ return c;
+}
+# 2287 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
+{
+ return arch_atomic64_fetch_add_unless(v, a, u) != u;
+}
+# 2303 "./include/linux/atomic-arch-fallback.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_atomic64_inc_not_zero(atomic64_t *v)
+{
+ return arch_atomic64_add_unless(v, 1, 0);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_atomic64_inc_unless_negative(atomic64_t *v)
+{
+ s64 c = arch_atomic64_read(v);
+
+ do {
+  if (__builtin_expect(!!(c < 0), 0))
+   return false;
+ } while (!arch_atomic64_try_cmpxchg(v, &c, c + 1));
+
+ return true;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+arch_atomic64_dec_unless_positive(atomic64_t *v)
+{
+ s64 c = arch_atomic64_read(v);
+
+ do {
+  if (__builtin_expect(!!(c > 0), 0))
+   return false;
+ } while (!arch_atomic64_try_cmpxchg(v, &c, c - 1));
+
+ return true;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+arch_atomic64_dec_if_positive(atomic64_t *v)
+{
+ s64 dec, c = arch_atomic64_read(v);
+
+ do {
+  dec = c - 1;
+  if (__builtin_expect(!!(dec < 0), 0))
+   break;
+ } while (!arch_atomic64_try_cmpxchg(v, &c, dec));
+
+ return dec;
+}
+# 82 "./include/linux/atomic.h" 2
+# 1 "./include/asm-generic/atomic-instrumented.h" 1
+# 24 "./include/asm-generic/atomic-instrumented.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_read(const atomic_t *v)
+{
+ instrument_atomic_read(v, sizeof(*v));
+ return arch_atomic_read(v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_read_acquire(const atomic_t *v)
+{
+ instrument_atomic_read(v, sizeof(*v));
+ return arch_atomic_read_acquire(v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_set(atomic_t *v, int i)
+{
+ instrument_atomic_write(v, sizeof(*v));
+ arch_atomic_set(v, i);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_set_release(atomic_t *v, int i)
+{
+ instrument_atomic_write(v, sizeof(*v));
+ arch_atomic_set_release(v, i);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_add(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic_add(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_add_return(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_add_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_add_return_acquire(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_add_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_add_return_release(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_add_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_add_return_relaxed(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_add_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_add(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_add(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_add_acquire(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_add(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_add_release(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_add(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_add_relaxed(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_add(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_sub(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic_sub(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_sub_return(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_sub_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_sub_return_acquire(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_sub_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_sub_return_release(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_sub_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_sub_return_relaxed(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_sub_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_sub(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_sub(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_sub_acquire(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_sub(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_sub_release(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_sub(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_sub_relaxed(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_sub(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_inc(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic_inc(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_inc_return(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_inc_return(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_inc_return_acquire(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_inc_return_acquire(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_inc_return_release(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_inc_return_release(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_inc_return_relaxed(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_inc_return_relaxed(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_inc(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_inc(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_inc_acquire(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_inc_acquire(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_inc_release(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_inc_release(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_inc_relaxed(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_inc_relaxed(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_dec(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic_dec(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_dec_return(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_dec_return(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_dec_return_acquire(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_dec_return_acquire(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_dec_return_release(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_dec_return_release(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_dec_return_relaxed(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_dec_return_relaxed(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_dec(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_dec(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_dec_acquire(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_dec_acquire(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_dec_release(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_dec_release(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_dec_relaxed(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_dec_relaxed(v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_and(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic_and(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_and(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_and(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_and_acquire(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_and(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_and_release(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_and(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_and_relaxed(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_and(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_andnot(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic_andnot(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_andnot(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_andnot(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_andnot_acquire(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_andnot_acquire(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_andnot_release(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_andnot_release(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_andnot_relaxed(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_andnot_relaxed(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_or(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic_or(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_or(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_or(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_or_acquire(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_or(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_or_release(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_or(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_or_relaxed(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_or(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_xor(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic_xor(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_xor(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_xor(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_xor_acquire(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_xor(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_xor_release(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_xor(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_xor_relaxed(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_xor(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_xchg(atomic_t *v, int i)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_xchg(v, i);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_xchg_acquire(atomic_t *v, int i)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_xchg(v, i);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_xchg_release(atomic_t *v, int i)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_xchg(v, i);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_xchg_relaxed(atomic_t *v, int i)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_xchg(v, i);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_cmpxchg(atomic_t *v, int old, int new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_cmpxchg_release(atomic_t *v, int old, int new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_try_cmpxchg(atomic_t *v, int *old, int new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ instrument_atomic_read_write(old, sizeof(*old));
+ return arch_atomic_try_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ instrument_atomic_read_write(old, sizeof(*old));
+ return arch_atomic_try_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ instrument_atomic_read_write(old, sizeof(*old));
+ return arch_atomic_try_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ instrument_atomic_read_write(old, sizeof(*old));
+ return arch_atomic_try_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_sub_and_test(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_sub_and_test(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_dec_and_test(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_dec_and_test(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_inc_and_test(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_inc_and_test(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_add_negative(int i, atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_add_negative(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_fetch_add_unless(atomic_t *v, int a, int u)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_fetch_add_unless(v, a, u);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_add_unless(atomic_t *v, int a, int u)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_add_unless(v, a, u);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_inc_not_zero(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_inc_not_zero(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_inc_unless_negative(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_inc_unless_negative(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_dec_unless_positive(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_dec_unless_positive(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int
+atomic_dec_if_positive(atomic_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic_dec_if_positive(v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_read(const atomic64_t *v)
+{
+ instrument_atomic_read(v, sizeof(*v));
+ return arch_atomic64_read(v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_read_acquire(const atomic64_t *v)
+{
+ instrument_atomic_read(v, sizeof(*v));
+ return arch_atomic64_read_acquire(v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic64_set(atomic64_t *v, s64 i)
+{
+ instrument_atomic_write(v, sizeof(*v));
+ arch_atomic64_set(v, i);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic64_set_release(atomic64_t *v, s64 i)
+{
+ instrument_atomic_write(v, sizeof(*v));
+ arch_atomic64_set_release(v, i);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic64_add(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic64_add(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_add_return(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_add_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_add_return_acquire(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_add_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_add_return_release(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_add_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_add_return_relaxed(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_add_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_add(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_add(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_add_acquire(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_add(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_add_release(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_add(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_add_relaxed(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_add(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic64_sub(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic64_sub(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_sub_return(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_sub_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_sub_return_acquire(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_sub_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_sub_return_release(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_sub_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_sub_return_relaxed(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_sub_return(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_sub(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_sub(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_sub_acquire(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_sub(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_sub_release(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_sub(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_sub(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic64_inc(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic64_inc(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_inc_return(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_inc_return(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_inc_return_acquire(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_inc_return_acquire(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_inc_return_release(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_inc_return_release(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_inc_return_relaxed(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_inc_return_relaxed(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_inc(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_inc(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_inc_acquire(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_inc_acquire(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_inc_release(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_inc_release(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_inc_relaxed(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_inc_relaxed(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic64_dec(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic64_dec(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_dec_return(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_dec_return(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_dec_return_acquire(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_dec_return_acquire(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_dec_return_release(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_dec_return_release(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_dec_return_relaxed(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_dec_return_relaxed(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_dec(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_dec(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_dec_acquire(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_dec_acquire(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_dec_release(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_dec_release(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_dec_relaxed(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_dec_relaxed(v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic64_and(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic64_and(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_and(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_and(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_and_acquire(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_and(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_and_release(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_and(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_and_relaxed(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_and(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic64_andnot(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic64_andnot(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_andnot(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_andnot(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_andnot_acquire(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_andnot_release(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_andnot_relaxed(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic64_or(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic64_or(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_or(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_or(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_or_acquire(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_or(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_or_release(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_or(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_or_relaxed(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_or(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic64_xor(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ arch_atomic64_xor(i, v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_xor(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_xor(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_xor_acquire(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_xor(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_xor_release(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_xor(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_xor(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_xchg(atomic64_t *v, s64 i)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_xchg(v, i);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_xchg_acquire(atomic64_t *v, s64 i)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_xchg(v, i);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_xchg_release(atomic64_t *v, s64 i)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_xchg(v, i);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_xchg_relaxed(atomic64_t *v, s64 i)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_xchg(v, i);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_cmpxchg_acquire(atomic64_t *v, s64 old, s64 new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_cmpxchg_release(atomic64_t *v, s64 old, s64 new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_cmpxchg_relaxed(atomic64_t *v, s64 old, s64 new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ instrument_atomic_read_write(old, sizeof(*old));
+ return arch_atomic64_try_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ instrument_atomic_read_write(old, sizeof(*old));
+ return arch_atomic64_try_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ instrument_atomic_read_write(old, sizeof(*old));
+ return arch_atomic64_try_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ instrument_atomic_read_write(old, sizeof(*old));
+ return arch_atomic64_try_cmpxchg(v, old, new);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_sub_and_test(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_sub_and_test(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_dec_and_test(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_dec_and_test(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_inc_and_test(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_inc_and_test(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_add_negative(s64 i, atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_add_negative(i, v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_fetch_add_unless(v, a, u);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_add_unless(v, a, u);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_inc_not_zero(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_inc_not_zero(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_inc_unless_negative(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_inc_unless_negative(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic64_dec_unless_positive(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_dec_unless_positive(v);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) s64
+atomic64_dec_if_positive(atomic64_t *v)
+{
+ instrument_atomic_read_write(v, sizeof(*v));
+ return arch_atomic64_dec_if_positive(v);
+}
+# 83 "./include/linux/atomic.h" 2
+
+
+
+
+# 1 "./include/asm-generic/atomic-long.h" 1
+# 10 "./include/asm-generic/atomic-long.h"
+# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
+# 11 "./include/asm-generic/atomic-long.h" 2
+
+
+typedef atomic64_t atomic_long_t;
+# 26 "./include/asm-generic/atomic-long.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_read(const atomic_long_t *v)
+{
+ return atomic64_read(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_read_acquire(const atomic_long_t *v)
+{
+ return atomic64_read_acquire(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_long_set(atomic_long_t *v, long i)
+{
+ atomic64_set(v, i);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_long_set_release(atomic_long_t *v, long i)
+{
+ atomic64_set_release(v, i);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_long_add(long i, atomic_long_t *v)
+{
+ atomic64_add(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_add_return(long i, atomic_long_t *v)
+{
+ return atomic64_add_return(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_add_return_acquire(long i, atomic_long_t *v)
+{
+ return atomic64_add_return_acquire(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_add_return_release(long i, atomic_long_t *v)
+{
+ return atomic64_add_return_release(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_add_return_relaxed(long i, atomic_long_t *v)
+{
+ return atomic64_add_return_relaxed(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_add(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_add(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_add_acquire(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_add_release(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_add_release(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_add_relaxed(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_long_sub(long i, atomic_long_t *v)
+{
+ atomic64_sub(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_sub_return(long i, atomic_long_t *v)
+{
+ return atomic64_sub_return(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_sub_return_acquire(long i, atomic_long_t *v)
+{
+ return atomic64_sub_return_acquire(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_sub_return_release(long i, atomic_long_t *v)
+{
+ return atomic64_sub_return_release(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
+{
+ return atomic64_sub_return_relaxed(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_sub(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_sub(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_sub_acquire(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_sub_release(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_sub_release(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_sub_relaxed(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_long_inc(atomic_long_t *v)
+{
+ atomic64_inc(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_inc_return(atomic_long_t *v)
+{
+ return atomic64_inc_return(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_inc_return_acquire(atomic_long_t *v)
+{
+ return atomic64_inc_return_acquire(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_inc_return_release(atomic_long_t *v)
+{
+ return atomic64_inc_return_release(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_inc_return_relaxed(atomic_long_t *v)
+{
+ return atomic64_inc_return_relaxed(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_inc(atomic_long_t *v)
+{
+ return atomic64_fetch_inc(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_inc_acquire(atomic_long_t *v)
+{
+ return atomic64_fetch_inc_acquire(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_inc_release(atomic_long_t *v)
+{
+ return atomic64_fetch_inc_release(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_inc_relaxed(atomic_long_t *v)
+{
+ return atomic64_fetch_inc_relaxed(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_long_dec(atomic_long_t *v)
+{
+ atomic64_dec(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_dec_return(atomic_long_t *v)
+{
+ return atomic64_dec_return(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_dec_return_acquire(atomic_long_t *v)
+{
+ return atomic64_dec_return_acquire(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_dec_return_release(atomic_long_t *v)
+{
+ return atomic64_dec_return_release(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_dec_return_relaxed(atomic_long_t *v)
+{
+ return atomic64_dec_return_relaxed(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_dec(atomic_long_t *v)
+{
+ return atomic64_fetch_dec(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_dec_acquire(atomic_long_t *v)
+{
+ return atomic64_fetch_dec_acquire(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_dec_release(atomic_long_t *v)
+{
+ return atomic64_fetch_dec_release(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_dec_relaxed(atomic_long_t *v)
+{
+ return atomic64_fetch_dec_relaxed(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_long_and(long i, atomic_long_t *v)
+{
+ atomic64_and(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_and(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_and(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_and_acquire(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_and_release(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_and_release(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_and_relaxed(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_long_andnot(long i, atomic_long_t *v)
+{
+ atomic64_andnot(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_andnot(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_andnot(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_andnot_acquire(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_andnot_release(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_andnot_relaxed(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_long_or(long i, atomic_long_t *v)
+{
+ atomic64_or(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_or(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_or(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_or_acquire(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_or_release(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_or_release(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_or_relaxed(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+atomic_long_xor(long i, atomic_long_t *v)
+{
+ atomic64_xor(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_xor(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_xor(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_xor_acquire(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_xor_release(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_xor_release(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
+{
+ return atomic64_fetch_xor_relaxed(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_xchg(atomic_long_t *v, long i)
+{
+ return atomic64_xchg(v, i);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_xchg_acquire(atomic_long_t *v, long i)
+{
+ return atomic64_xchg_acquire(v, i);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_xchg_release(atomic_long_t *v, long i)
+{
+ return atomic64_xchg_release(v, i);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_xchg_relaxed(atomic_long_t *v, long i)
+{
+ return atomic64_xchg_relaxed(v, i);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
+{
+ return atomic64_cmpxchg(v, old, new);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
+{
+ return atomic64_cmpxchg_acquire(v, old, new);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
+{
+ return atomic64_cmpxchg_release(v, old, new);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
+{
+ return atomic64_cmpxchg_relaxed(v, old, new);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
+{
+ return atomic64_try_cmpxchg(v, (s64 *)old, new);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
+{
+ return atomic64_try_cmpxchg_acquire(v, (s64 *)old, new);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
+{
+ return atomic64_try_cmpxchg_release(v, (s64 *)old, new);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
+{
+ return atomic64_try_cmpxchg_relaxed(v, (s64 *)old, new);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_sub_and_test(long i, atomic_long_t *v)
+{
+ return atomic64_sub_and_test(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_dec_and_test(atomic_long_t *v)
+{
+ return atomic64_dec_and_test(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_inc_and_test(atomic_long_t *v)
+{
+ return atomic64_inc_and_test(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_add_negative(long i, atomic_long_t *v)
+{
+ return atomic64_add_negative(i, v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
+{
+ return atomic64_fetch_add_unless(v, a, u);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_add_unless(atomic_long_t *v, long a, long u)
+{
+ return atomic64_add_unless(v, a, u);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_inc_not_zero(atomic_long_t *v)
+{
+ return atomic64_inc_not_zero(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_inc_unless_negative(atomic_long_t *v)
+{
+ return atomic64_inc_unless_negative(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool
+atomic_long_dec_unless_positive(atomic_long_t *v)
+{
+ return atomic64_dec_unless_positive(v);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+atomic_long_dec_if_positive(atomic_long_t *v)
+{
+ return atomic64_dec_if_positive(v);
+}
+# 88 "./include/linux/atomic.h" 2
+# 250 "./include/linux/jump_label.h" 2
+# 1 "./include/linux/bug.h" 1
+
+
+
+
+# 1 "./arch/x86/include/asm/bug.h" 1
+
+
+
+
+
+# 1 "./include/linux/instrumentation.h" 1
+# 7 "./arch/x86/include/asm/bug.h" 2
+# 93 "./arch/x86/include/asm/bug.h"
+# 1 "./include/asm-generic/bug.h" 1
+# 25 "./include/asm-generic/bug.h"
+struct bug_entry {
+
+
+
+ signed int bug_addr_disp;
+
+
+
+
+
+ signed int file_disp;
+
+ unsigned short line;
+
+ unsigned short flags;
+};
+# 93 "./include/asm-generic/bug.h"
+extern __attribute__((__format__(printf, 1, 2))) void __warn_printk(const char *fmt, ...);
+# 111 "./include/asm-generic/bug.h"
+struct warn_args;
+struct pt_regs;
+
+void __warn(const char *file, int line, void *caller, unsigned taint,
+     struct pt_regs *regs, struct warn_args *args);
+# 94 "./arch/x86/include/asm/bug.h" 2
+# 6 "./include/linux/bug.h" 2
+
+
+
+enum bug_trap_type {
+ BUG_TRAP_TYPE_NONE = 0,
+ BUG_TRAP_TYPE_WARN = 1,
+ BUG_TRAP_TYPE_BUG = 2,
+};
+
+struct pt_regs;
+# 34 "./include/linux/bug.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_warning_bug(const struct bug_entry *bug)
+{
+ return bug->flags & (1 << 0);
+}
+
+struct bug_entry *find_bug(unsigned long bugaddr);
+
+enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);
+
+
+int is_valid_bugaddr(unsigned long addr);
+
+void generic_bug_clear_once(void);
+# 70 "./include/linux/bug.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool check_data_corruption(bool v) { return v; }
+# 251 "./include/linux/jump_label.h" 2
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int static_key_count(struct static_key *key)
+{
+ return atomic_read(&key->enabled);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void jump_label_init(void)
+{
+ static_key_initialized = true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool static_key_false(struct static_key *key)
+{
+ if (__builtin_expect(!!(static_key_count(key) > 0), 0))
+  return true;
+ return false;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool static_key_true(struct static_key *key)
+{
+ if (__builtin_expect(!!(static_key_count(key) > 0), 1))
+  return true;
+ return false;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void static_key_slow_inc(struct static_key *key)
+{
+ ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/jump_label.h"), "i" (278), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (32)); }); do { } while(0); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ atomic_inc(&key->enabled);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void static_key_slow_dec(struct static_key *key)
+{
+ ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/jump_label.h"), "i" (284), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (33)); }); do { } while(0); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ atomic_dec(&key->enabled);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int jump_label_text_reserved(void *start, void *end)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void jump_label_lock(void) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void jump_label_unlock(void) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int jump_label_apply_nops(struct module *mod)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void static_key_enable(struct static_key *key)
+{
+ ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/jump_label.h"), "i" (306), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (34)); }); do { } while(0); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+
+ if (atomic_read(&key->enabled) != 0) {
+  ({ int __ret_warn_on = !!(atomic_read(&key->enabled) != 1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/jump_label.h"), "i" (309), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (35)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+  return;
+ }
+ atomic_set(&key->enabled, 1);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void static_key_disable(struct static_key *key)
+{
+ ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("%s(): static key '%pS' used before call to jump_label_init()", __func__, (key)); do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/jump_label.h"), "i" (317), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (36)); }); do { } while(0); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+
+ if (atomic_read(&key->enabled) != 1) {
+  ({ int __ret_warn_on = !!(atomic_read(&key->enabled) != 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/jump_label.h"), "i" (320), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (37)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+  return;
+ }
+ atomic_set(&key->enabled, 0);
+}
+# 346 "./include/linux/jump_label.h"
+struct static_key_true {
+ struct static_key key;
+};
+
+struct static_key_false {
+ struct static_key key;
+};
+# 385 "./include/linux/jump_label.h"
+extern bool ____wrong_branch_error(void);
+# 7 "./arch/x86/include/asm/string_64.h" 2
+
+
+
+
+
+
+
+extern void *memcpy(void *to, const void *from, size_t len);
+extern void *__memcpy(void *to, const void *from, size_t len);
+
+
+void *memset(void *s, int c, size_t n);
+void *__memset(void *s, int c, size_t n);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memset16(uint16_t *s, uint16_t v, size_t n)
+{
+ long d0, d1;
+ asm volatile("rep\n\t"
+       "stosw"
+       : "=&c" (d0), "=&D" (d1)
+       : "a" (v), "1" (s), "0" (n)
+       : "memory");
+ return s;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memset32(uint32_t *s, uint32_t v, size_t n)
+{
+ long d0, d1;
+ asm volatile("rep\n\t"
+       "stosl"
+       : "=&c" (d0), "=&D" (d1)
+       : "a" (v), "1" (s), "0" (n)
+       : "memory");
+ return s;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memset64(uint64_t *s, uint64_t v, size_t n)
+{
+ long d0, d1;
+ asm volatile("rep\n\t"
+       "stosq"
+       : "=&c" (d0), "=&D" (d1)
+       : "a" (v), "1" (s), "0" (n)
+       : "memory");
+ return s;
+}
+
+
+void *memmove(void *dest, const void *src, size_t count);
+void *__memmove(void *dest, const void *src, size_t count);
+
+int memcmp(const void *cs, const void *ct, size_t count);
+size_t strlen(const char *s);
+char *strcpy(char *dest, const char *src);
+char *strcat(char *dest, const char *src);
+int strcmp(const char *cs, const char *ct);
+# 87 "./arch/x86/include/asm/string_64.h"
+void __memcpy_flushcache(void *dst, const void *src, size_t cnt);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void memcpy_flushcache(void *dst, const void *src, size_t cnt)
+{
+ if (__builtin_constant_p(cnt)) {
+  switch (cnt) {
+   case 4:
+    asm ("movntil %1, %0" : "=m"(*(u32 *)dst) : "r"(*(u32 *)src));
+    return;
+   case 8:
+    asm ("movntiq %1, %0" : "=m"(*(u64 *)dst) : "r"(*(u64 *)src));
+    return;
+   case 16:
+    asm ("movntiq %1, %0" : "=m"(*(u64 *)dst) : "r"(*(u64 *)src));
+    asm ("movntiq %1, %0" : "=m"(*(u64 *)(dst + 8)) : "r"(*(u64 *)(src + 8)));
+    return;
+  }
+ }
+ __memcpy_flushcache(dst, src, cnt);
+}
+# 6 "./arch/x86/include/asm/string.h" 2
+# 22 "./include/linux/string.h" 2
+
+
+extern char * strcpy(char *,const char *);
+
+
+extern char * strncpy(char *,const char *, __kernel_size_t);
+
+
+size_t strlcpy(char *, const char *, size_t);
+
+
+ssize_t strscpy(char *, const char *, size_t);
+
+
+
+ssize_t strscpy_pad(char *dest, const char *src, size_t count);
+
+
+extern char * strcat(char *, const char *);
+
+
+extern char * strncat(char *, const char *, __kernel_size_t);
+
+
+extern size_t strlcat(char *, const char *, __kernel_size_t);
+
+
+extern int strcmp(const char *,const char *);
+
+
+extern int strncmp(const char *,const char *,__kernel_size_t);
+
+
+extern int strcasecmp(const char *s1, const char *s2);
+
+
+extern int strncasecmp(const char *s1, const char *s2, size_t n);
+
+
+extern char * strchr(const char *,int);
+
+
+extern char * strchrnul(const char *,int);
+
+extern char * strnchrnul(const char *, size_t, int);
+
+extern char * strnchr(const char *, size_t, int);
+
+
+extern char * strrchr(const char *,int);
+
+extern char * __attribute__((__warn_unused_result__)) skip_spaces(const char *);
+
+extern char *strim(char *);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) char *strstrip(char *str)
+{
+ return strim(str);
+}
+
+
+extern char * strstr(const char *, const char *);
+
+
+extern char * strnstr(const char *, const char *, size_t);
+
+
+extern __kernel_size_t strlen(const char *);
+
+
+extern __kernel_size_t strnlen(const char *,__kernel_size_t);
+
+
+extern char * strpbrk(const char *,const char *);
+
+
+extern char * strsep(char **,const char *);
+
+
+extern __kernel_size_t strspn(const char *,const char *);
+
+
+extern __kernel_size_t strcspn(const char *,const char *);
+# 123 "./include/linux/string.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memset_l(unsigned long *p, unsigned long v,
+  __kernel_size_t n)
+{
+ if (64 == 32)
+  return memset32((uint32_t *)p, v, n);
+ else
+  return memset64((uint64_t *)p, v, n);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *memset_p(void **p, void *v, __kernel_size_t n)
+{
+ if (64 == 32)
+  return memset32((uint32_t *)p, (uintptr_t)v, n);
+ else
+  return memset64((uint64_t *)p, (uintptr_t)v, n);
+}
+
+extern void **__memcat_p(void **a, void **b);
+# 154 "./include/linux/string.h"
+extern void * memscan(void *,int,__kernel_size_t);
+
+
+extern int memcmp(const void *,const void *,__kernel_size_t);
+
+
+extern int bcmp(const void *,const void *,__kernel_size_t);
+
+
+extern void * memchr(const void *,int,__kernel_size_t);
+# 172 "./include/linux/string.h"
+void *memchr_inv(const void *s, int c, size_t n);
+char *strreplace(char *s, char old, char new);
+
+extern void kfree_const(const void *x);
+
+extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
+extern const char *kstrdup_const(const char *s, gfp_t gfp);
+extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
+extern void *kmemdup(const void *src, size_t len, gfp_t gfp);
+extern char *kmemdup_nul(const char *s, size_t len, gfp_t gfp);
+
+extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
+extern void argv_free(char **argv);
+
+extern bool sysfs_streq(const char *s1, const char *s2);
+extern int kstrtobool(const char *s, bool *res);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int strtobool(const char *s, bool *res)
+{
+ return kstrtobool(s, res);
+}
+
+int match_string(const char * const *array, size_t n, const char *string);
+int __sysfs_match_string(const char * const *array, size_t n, const char *s);
+# 206 "./include/linux/string.h"
+int vbin_printf(u32 *bin_buf, size_t size, const char *fmt, va_list args);
+int bstr_printf(char *buf, size_t size, const char *fmt, const u32 *bin_buf);
+int bprintf(u32 *bin_buf, size_t size, const char *fmt, ...) __attribute__((__format__(printf, 3, 4)));
+
+
+extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
+           const void *from, size_t available);
+
+int ptr_to_hashval(const void *ptr, unsigned long *hashval_out);
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool strstarts(const char *str, const char *prefix)
+{
+ return strncmp(str, prefix, strlen(prefix)) == 0;
+}
+
+size_t memweight(const void *ptr, size_t bytes);
+# 242 "./include/linux/string.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memzero_explicit(void *s, size_t count)
+{
+ memset(s, 0, count);
+ __asm__ __volatile__("": :"r"(s) :"memory");
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *kbasename(const char *path)
+{
+ const char *tail = strrchr(path, '/');
+ return tail ? tail + 1 : path;
+}
+
+
+
+
+void fortify_panic(const char *name) __attribute__((__noreturn__)) __attribute__((__cold__));
+void __read_overflow(void) __attribute__((__error__("detected read beyond size of object passed as 1st parameter")));
+void __read_overflow2(void) __attribute__((__error__("detected read beyond size of object passed as 2nd parameter")));
+void __read_overflow3(void) __attribute__((__error__("detected read beyond size of object passed as 3rd parameter")));
+void __write_overflow(void) __attribute__((__error__("detected write beyond size of object passed as 1st parameter")));
+# 280 "./include/linux/string.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void memcpy_and_pad(void *dest, size_t dest_len,
+      const void *src, size_t count, int pad)
+{
+ if (dest_len > count) {
+  memcpy(dest, src, count);
+  memset(dest + count, pad, dest_len - count);
+ } else
+  memcpy(dest, src, dest_len);
+}
+# 305 "./include/linux/string.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) size_t str_has_prefix(const char *str, const char *prefix)
+{
+ size_t len = strlen(prefix);
+ return strncmp(str, prefix, len) == 0 ? len : 0;
+}
+# 10 "./include/linux/bitmap.h" 2
+# 121 "./include/linux/bitmap.h"
+extern unsigned long *bitmap_alloc(unsigned int nbits, gfp_t flags);
+extern unsigned long *bitmap_zalloc(unsigned int nbits, gfp_t flags);
+extern void bitmap_free(const unsigned long *bitmap);
+
+
+
+
+
+extern int __bitmap_equal(const unsigned long *bitmap1,
+     const unsigned long *bitmap2, unsigned int nbits);
+extern bool __attribute__((__pure__)) __bitmap_or_equal(const unsigned long *src1,
+         const unsigned long *src2,
+         const unsigned long *src3,
+         unsigned int nbits);
+extern void __bitmap_complement(unsigned long *dst, const unsigned long *src,
+   unsigned int nbits);
+extern void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
+    unsigned int shift, unsigned int nbits);
+extern void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
+    unsigned int shift, unsigned int nbits);
+extern void bitmap_cut(unsigned long *dst, const unsigned long *src,
+         unsigned int first, unsigned int cut,
+         unsigned int nbits);
+extern int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
+   const unsigned long *bitmap2, unsigned int nbits);
+extern void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
+   const unsigned long *bitmap2, unsigned int nbits);
+extern void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
+   const unsigned long *bitmap2, unsigned int nbits);
+extern int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
+   const unsigned long *bitmap2, unsigned int nbits);
+extern void __bitmap_replace(unsigned long *dst,
+   const unsigned long *old, const unsigned long *new,
+   const unsigned long *mask, unsigned int nbits);
+extern int __bitmap_intersects(const unsigned long *bitmap1,
+   const unsigned long *bitmap2, unsigned int nbits);
+extern int __bitmap_subset(const unsigned long *bitmap1,
+   const unsigned long *bitmap2, unsigned int nbits);
+extern int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);
+extern void __bitmap_set(unsigned long *map, unsigned int start, int len);
+extern void __bitmap_clear(unsigned long *map, unsigned int start, int len);
+
+extern unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
+          unsigned long size,
+          unsigned long start,
+          unsigned int nr,
+          unsigned long align_mask,
+          unsigned long align_offset);
+# 182 "./include/linux/bitmap.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
+bitmap_find_next_zero_area(unsigned long *map,
+      unsigned long size,
+      unsigned long start,
+      unsigned int nr,
+      unsigned long align_mask)
+{
+ return bitmap_find_next_zero_area_off(map, size, start, nr,
+           align_mask, 0);
+}
+
+extern int bitmap_parse(const char *buf, unsigned int buflen,
+   unsigned long *dst, int nbits);
+extern int bitmap_parse_user(const char *ubuf, unsigned int ulen,
+   unsigned long *dst, int nbits);
+extern int bitmap_parselist(const char *buf, unsigned long *maskp,
+   int nmaskbits);
+extern int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
+   unsigned long *dst, int nbits);
+extern void bitmap_remap(unsigned long *dst, const unsigned long *src,
+  const unsigned long *old, const unsigned long *new, unsigned int nbits);
+extern int bitmap_bitremap(int oldbit,
+  const unsigned long *old, const unsigned long *new, int bits);
+extern void bitmap_onto(unsigned long *dst, const unsigned long *orig,
+  const unsigned long *relmap, unsigned int bits);
+extern void bitmap_fold(unsigned long *dst, const unsigned long *orig,
+  unsigned int sz, unsigned int nbits);
+extern int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
+extern void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
+extern int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);
+
+
+
+
+
+
+extern unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
+extern int bitmap_print_to_pagebuf(bool list, char *buf,
+       const unsigned long *maskp, int nmaskbits);
+# 233 "./include/linux/bitmap.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_zero(unsigned long *dst, unsigned int nbits)
+{
+ unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
+ memset(dst, 0, len);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_fill(unsigned long *dst, unsigned int nbits)
+{
+ unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
+ memset(dst, 0xff, len);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_copy(unsigned long *dst, const unsigned long *src,
+   unsigned int nbits)
+{
+ unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
+ memcpy(dst, src, len);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_copy_clear_tail(unsigned long *dst,
+  const unsigned long *src, unsigned int nbits)
+{
+ bitmap_copy(dst, src, nbits);
+ if (nbits % 64)
+  dst[nbits / 64] &= (~0UL >> (-(nbits) & (64 - 1)));
+}
+
+
+
+
+
+
+extern void bitmap_from_arr32(unsigned long *bitmap, const u32 *buf,
+       unsigned int nbits);
+extern void bitmap_to_arr32(u32 *buf, const unsigned long *bitmap,
+       unsigned int nbits);
+# 281 "./include/linux/bitmap.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bitmap_and(unsigned long *dst, const unsigned long *src1,
+   const unsigned long *src2, unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
+ return __bitmap_and(dst, src1, src2, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_or(unsigned long *dst, const unsigned long *src1,
+   const unsigned long *src2, unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  *dst = *src1 | *src2;
+ else
+  __bitmap_or(dst, src1, src2, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_xor(unsigned long *dst, const unsigned long *src1,
+   const unsigned long *src2, unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  *dst = *src1 ^ *src2;
+ else
+  __bitmap_xor(dst, src1, src2, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
+   const unsigned long *src2, unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
+ return __bitmap_andnot(dst, src1, src2, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_complement(unsigned long *dst, const unsigned long *src,
+   unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  *dst = ~(*src);
+ else
+  __bitmap_complement(dst, src, nbits);
+}
+# 331 "./include/linux/bitmap.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bitmap_equal(const unsigned long *src1,
+   const unsigned long *src2, unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & (64 - 1))));
+ if (__builtin_constant_p(nbits & (8 - 1)) &&
+     (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
+  return !memcmp(src1, src2, nbits / 8);
+ return __bitmap_equal(src1, src2, nbits);
+}
+# 351 "./include/linux/bitmap.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bitmap_or_equal(const unsigned long *src1,
+       const unsigned long *src2,
+       const unsigned long *src3,
+       unsigned int nbits)
+{
+ if (!(__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  return __bitmap_or_equal(src1, src2, src3, nbits);
+
+ return !(((*src1 | *src2) ^ *src3) & (~0UL >> (-(nbits) & (64 - 1))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bitmap_intersects(const unsigned long *src1,
+   const unsigned long *src2, unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
+ else
+  return __bitmap_intersects(src1, src2, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bitmap_subset(const unsigned long *src1,
+   const unsigned long *src2, unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (64 - 1))));
+ else
+  return __bitmap_subset(src1, src2, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bitmap_empty(const unsigned long *src, unsigned nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  return ! (*src & (~0UL >> (-(nbits) & (64 - 1))));
+
+ return find_first_bit(src, nbits) == nbits;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bitmap_full(const unsigned long *src, unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  return ! (~(*src) & (~0UL >> (-(nbits) & (64 - 1))));
+
+ return find_first_zero_bit(src, nbits) == nbits;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int bitmap_weight(const unsigned long *src, unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  return hweight_long(*src & (~0UL >> (-(nbits) & (64 - 1))));
+ return __bitmap_weight(src, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void bitmap_set(unsigned long *map, unsigned int start,
+  unsigned int nbits)
+{
+ if (__builtin_constant_p(nbits) && nbits == 1)
+  __set_bit(start, map);
+ else if (__builtin_constant_p(start & (8 - 1)) &&
+   (((start) & ((typeof(start))(8) - 1)) == 0) &&
+   __builtin_constant_p(nbits & (8 - 1)) &&
+   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
+  memset((char *)map + start / 8, 0xff, nbits / 8);
+ else
+  __bitmap_set(map, start, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void bitmap_clear(unsigned long *map, unsigned int start,
+  unsigned int nbits)
+{
+ if (__builtin_constant_p(nbits) && nbits == 1)
+  __clear_bit(start, map);
+ else if (__builtin_constant_p(start & (8 - 1)) &&
+   (((start) & ((typeof(start))(8) - 1)) == 0) &&
+   __builtin_constant_p(nbits & (8 - 1)) &&
+   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
+  memset((char *)map + start / 8, 0, nbits / 8);
+ else
+  __bitmap_clear(map, start, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
+    unsigned int shift, unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  *dst = (*src & (~0UL >> (-(nbits) & (64 - 1)))) >> shift;
+ else
+  __bitmap_shift_right(dst, src, shift, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
+    unsigned int shift, unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  *dst = (*src << shift) & (~0UL >> (-(nbits) & (64 - 1)));
+ else
+  __bitmap_shift_left(dst, src, shift, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_replace(unsigned long *dst,
+      const unsigned long *old,
+      const unsigned long *new,
+      const unsigned long *mask,
+      unsigned int nbits)
+{
+ if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
+  *dst = (*old & ~(*mask)) | (*new & *mask);
+ else
+  __bitmap_replace(dst, old, new, mask, nbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_next_clear_region(unsigned long *bitmap,
+         unsigned int *rs, unsigned int *re,
+         unsigned int end)
+{
+ *rs = find_next_zero_bit(bitmap, end, *rs);
+ *re = find_next_bit(bitmap, end, *rs + 1);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_next_set_region(unsigned long *bitmap,
+       unsigned int *rs, unsigned int *re,
+       unsigned int end)
+{
+ *rs = find_next_bit(bitmap, end, *rs);
+ *re = find_next_zero_bit(bitmap, end, *rs + 1);
+}
+# 539 "./include/linux/bitmap.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_from_u64(unsigned long *dst, u64 mask)
+{
+ dst[0] = mask & (~0UL);
+
+ if (sizeof(mask) > sizeof(unsigned long))
+  dst[1] = mask >> 32;
+}
+# 555 "./include/linux/bitmap.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long bitmap_get_value8(const unsigned long *map,
+           unsigned long start)
+{
+ const size_t index = ((start) / 64);
+ const unsigned long offset = start % 64;
+
+ return (map[index] >> offset) & 0xFF;
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bitmap_set_value8(unsigned long *map, unsigned long value,
+         unsigned long start)
+{
+ const size_t index = ((start) / 64);
+ const unsigned long offset = start % 64;
+
+ map[index] &= ~(0xFFUL << offset);
+ map[index] |= value << offset;
+}
+# 13 "./include/linux/cpumask.h" 2
+
+
+
+
+typedef struct cpumask { unsigned long bits[(((1) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } cpumask_t;
+# 90 "./include/linux/cpumask.h"
+extern struct cpumask __cpu_possible_mask;
+extern struct cpumask __cpu_online_mask;
+extern struct cpumask __cpu_present_mask;
+extern struct cpumask __cpu_active_mask;
+
+
+
+
+
+extern atomic_t __num_online_cpus;
+# 132 "./include/linux/cpumask.h"
+extern cpumask_t cpus_booted_once_mask;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
+{
+
+
+
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_check(unsigned int cpu)
+{
+ cpu_max_bits_warn(cpu, ((unsigned int)1));
+ return cpu;
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_first(const struct cpumask *srcp)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_last(const struct cpumask *srcp)
+{
+ return 0;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_next(int n, const struct cpumask *srcp)
+{
+ return n+1;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
+{
+ return n+1;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_next_and(int n,
+         const struct cpumask *srcp,
+         const struct cpumask *andp)
+{
+ return n+1;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_next_wrap(int n, const struct cpumask *mask,
+          int start, bool wrap)
+{
+
+ return (wrap && n == 0);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_any_but(const struct cpumask *mask,
+        unsigned int cpu)
+{
+ return 1;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_local_spread(unsigned int i, int node)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_any_and_distribute(const struct cpumask *src1p,
+          const struct cpumask *src2p) {
+ return cpumask_next_and(-1, src1p, src2p);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_any_distribute(const struct cpumask *srcp)
+{
+ return cpumask_first(srcp);
+}
+# 338 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
+{
+ set_bit(cpumask_check(cpu), ((dstp)->bits));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
+{
+ __set_bit(cpumask_check(cpu), ((dstp)->bits));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
+{
+ clear_bit(cpumask_check(cpu), ((dstp)->bits));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __cpumask_clear_cpu(int cpu, struct cpumask *dstp)
+{
+ __clear_bit(cpumask_check(cpu), ((dstp)->bits));
+}
+# 371 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
+{
+ return test_bit(cpumask_check(cpu), (((cpumask))->bits));
+}
+# 385 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
+{
+ return test_and_set_bit(cpumask_check(cpu), ((cpumask)->bits));
+}
+# 399 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
+{
+ return test_and_clear_bit(cpumask_check(cpu), ((cpumask)->bits));
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_setall(struct cpumask *dstp)
+{
+ bitmap_fill(((dstp)->bits), ((unsigned int)1));
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_clear(struct cpumask *dstp)
+{
+ bitmap_zero(((dstp)->bits), ((unsigned int)1));
+}
+# 430 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_and(struct cpumask *dstp,
+          const struct cpumask *src1p,
+          const struct cpumask *src2p)
+{
+ return bitmap_and(((dstp)->bits), ((src1p)->bits),
+           ((src2p)->bits), ((unsigned int)1));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
+         const struct cpumask *src2p)
+{
+ bitmap_or(((dstp)->bits), ((src1p)->bits),
+          ((src2p)->bits), ((unsigned int)1));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_xor(struct cpumask *dstp,
+          const struct cpumask *src1p,
+          const struct cpumask *src2p)
+{
+ bitmap_xor(((dstp)->bits), ((src1p)->bits),
+           ((src2p)->bits), ((unsigned int)1));
+}
+# 473 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_andnot(struct cpumask *dstp,
+      const struct cpumask *src1p,
+      const struct cpumask *src2p)
+{
+ return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
+       ((src2p)->bits), ((unsigned int)1));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_complement(struct cpumask *dstp,
+          const struct cpumask *srcp)
+{
+ bitmap_complement(((dstp)->bits), ((srcp)->bits),
+           ((unsigned int)1));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_equal(const struct cpumask *src1p,
+    const struct cpumask *src2p)
+{
+ return bitmap_equal(((src1p)->bits), ((src2p)->bits),
+       ((unsigned int)1));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_or_equal(const struct cpumask *src1p,
+        const struct cpumask *src2p,
+        const struct cpumask *src3p)
+{
+ return bitmap_or_equal(((src1p)->bits), ((src2p)->bits),
+          ((src3p)->bits), ((unsigned int)1));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_intersects(const struct cpumask *src1p,
+         const struct cpumask *src2p)
+{
+ return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
+            ((unsigned int)1));
+}
+# 538 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_subset(const struct cpumask *src1p,
+     const struct cpumask *src2p)
+{
+ return bitmap_subset(((src1p)->bits), ((src2p)->bits),
+        ((unsigned int)1));
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_empty(const struct cpumask *srcp)
+{
+ return bitmap_empty(((srcp)->bits), ((unsigned int)1));
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_full(const struct cpumask *srcp)
+{
+ return bitmap_full(((srcp)->bits), ((unsigned int)1));
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_weight(const struct cpumask *srcp)
+{
+ return bitmap_weight(((srcp)->bits), ((unsigned int)1));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_shift_right(struct cpumask *dstp,
+           const struct cpumask *srcp, int n)
+{
+ bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
+            ((unsigned int)1));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_shift_left(struct cpumask *dstp,
+          const struct cpumask *srcp, int n)
+{
+ bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
+           ((unsigned int)1));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpumask_copy(struct cpumask *dstp,
+    const struct cpumask *srcp)
+{
+ bitmap_copy(((dstp)->bits), ((srcp)->bits), ((unsigned int)1));
+}
+# 649 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_parse_user(const char *buf, int len,
+         struct cpumask *dstp)
+{
+ return bitmap_parse_user(buf, len, ((dstp)->bits), ((unsigned int)1));
+}
+# 663 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_parselist_user(const char *buf, int len,
+         struct cpumask *dstp)
+{
+ return bitmap_parselist_user(buf, len, ((dstp)->bits),
+         ((unsigned int)1));
+}
+# 677 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpumask_parse(const char *buf, struct cpumask *dstp)
+{
+ return bitmap_parse(buf, (~0U), ((dstp)->bits), ((unsigned int)1));
+}
+# 689 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cpulist_parse(const char *buf, struct cpumask *dstp)
+{
+ return bitmap_parselist(buf, ((dstp)->bits), ((unsigned int)1));
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpumask_size(void)
+{
+ return (((((unsigned int)1)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(long);
+}
+# 762 "./include/linux/cpumask.h"
+typedef struct cpumask cpumask_var_t[1];
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
+{
+ return true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
+       int node)
+{
+ return true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
+{
+ cpumask_clear(*mask);
+ return true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
+       int node)
+{
+ cpumask_clear(*mask);
+ return true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void free_cpumask_var(cpumask_var_t mask)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void free_bootmem_cpumask_var(cpumask_var_t mask)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpumask_available(cpumask_var_t mask)
+{
+ return true;
+}
+
+
+
+
+extern const unsigned long cpu_all_bits[(((1) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
+# 822 "./include/linux/cpumask.h"
+void init_cpu_present(const struct cpumask *src);
+void init_cpu_possible(const struct cpumask *src);
+void init_cpu_online(const struct cpumask *src);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void reset_cpu_possible_mask(void)
+{
+ bitmap_zero(((&__cpu_possible_mask)->bits), 1);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+set_cpu_possible(unsigned int cpu, bool possible)
+{
+ if (possible)
+  cpumask_set_cpu(cpu, &__cpu_possible_mask);
+ else
+  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+set_cpu_present(unsigned int cpu, bool present)
+{
+ if (present)
+  cpumask_set_cpu(cpu, &__cpu_present_mask);
+ else
+  cpumask_clear_cpu(cpu, &__cpu_present_mask);
+}
+
+void set_cpu_online(unsigned int cpu, bool online);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+set_cpu_active(unsigned int cpu, bool active)
+{
+ if (active)
+  cpumask_set_cpu(cpu, &__cpu_active_mask);
+ else
+  cpumask_clear_cpu(cpu, &__cpu_active_mask);
+}
+# 875 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __check_is_bitmap(const unsigned long *bitmap)
+{
+ return 1;
+}
+# 887 "./include/linux/cpumask.h"
+extern const unsigned long
+ cpu_bit_bitmap[64 +1][(((1) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const struct cpumask *get_cpu_mask(unsigned int cpu)
+{
+ const unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
+ p -= cpu / 64;
+ return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
+}
+# 924 "./include/linux/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t
+cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
+{
+ return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
+          1U);
+}
+# 14 "./include/linux/smp.h" 2
+
+# 1 "./include/linux/smp_types.h" 1
+
+
+
+
+# 1 "./include/linux/llist.h" 1
+# 54 "./include/linux/llist.h"
+struct llist_head {
+ struct llist_node *first;
+};
+
+struct llist_node {
+ struct llist_node *next;
+};
+# 69 "./include/linux/llist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_llist_head(struct llist_head *list)
+{
+ list->first = ((void *)0);
+}
+# 187 "./include/linux/llist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool llist_empty(const struct llist_head *head)
+{
+ return ({ do { extern void __compiletime_assert_38(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head->first) == sizeof(char) || sizeof(head->first) == sizeof(short) || sizeof(head->first) == sizeof(int) || sizeof(head->first) == sizeof(long)) || sizeof(head->first) == sizeof(long long))) __compiletime_assert_38(); } while (0); (*(const volatile typeof( _Generic((head->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->first))) *)&(head->first)); }) == ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct llist_node *llist_next(struct llist_node *node)
+{
+ return node->next;
+}
+
+extern bool llist_add_batch(struct llist_node *new_first,
+       struct llist_node *new_last,
+       struct llist_head *head);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __llist_add_batch(struct llist_node *new_first,
+         struct llist_node *new_last,
+         struct llist_head *head)
+{
+ new_last->next = head->first;
+ head->first = new_first;
+ return new_last->next == ((void *)0);
+}
+# 217 "./include/linux/llist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool llist_add(struct llist_node *new, struct llist_head *head)
+{
+ return llist_add_batch(new, new, head);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __llist_add(struct llist_node *new, struct llist_head *head)
+{
+ return __llist_add_batch(new, new, head);
+}
+# 235 "./include/linux/llist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct llist_node *llist_del_all(struct llist_head *head)
+{
+ return ({ typeof(&head->first) __ai_ptr = (&head->first); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__ (*((__ai_ptr))) __ret = ((((void *)0))); switch (sizeof(*((__ai_ptr)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }); });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct llist_node *__llist_del_all(struct llist_head *head)
+{
+ struct llist_node *first = head->first;
+
+ head->first = ((void *)0);
+ return first;
+}
+
+extern struct llist_node *llist_del_first(struct llist_head *head);
+
+struct llist_node *llist_reverse_order(struct llist_node *head);
+# 6 "./include/linux/smp_types.h" 2
+
+enum {
+ CSD_FLAG_LOCK = 0x01,
+
+ IRQ_WORK_PENDING = 0x01,
+ IRQ_WORK_BUSY = 0x02,
+ IRQ_WORK_LAZY = 0x04,
+ IRQ_WORK_HARD_IRQ = 0x08,
+
+ IRQ_WORK_CLAIMED = (IRQ_WORK_PENDING | IRQ_WORK_BUSY),
+
+ CSD_TYPE_ASYNC = 0x00,
+ CSD_TYPE_SYNC = 0x10,
+ CSD_TYPE_IRQ_WORK = 0x20,
+ CSD_TYPE_TTWU = 0x30,
+
+ CSD_FLAG_TYPE_MASK = 0xF0,
+};
+# 58 "./include/linux/smp_types.h"
+struct __call_single_node {
+ struct llist_node llist;
+ union {
+  unsigned int u_flags;
+  atomic_t a_flags;
+ };
+
+ u16 src, dst;
+
+};
+# 16 "./include/linux/smp.h" 2
+
+typedef void (*smp_call_func_t)(void *info);
+typedef bool (*smp_cond_func_t)(int cpu, void *info);
+
+
+
+
+struct __call_single_data {
+ struct __call_single_node node;
+ smp_call_func_t func;
+ void *info;
+};
+
+
+
+
+
+typedef struct __call_single_data call_single_data_t
+ __attribute__((__aligned__(sizeof(struct __call_single_data))));
+# 45 "./include/linux/smp.h"
+extern void __smp_call_single_queue(int cpu, struct llist_node *node);
+
+
+extern unsigned int total_cpus;
+
+int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
+        int wait);
+
+
+
+
+void on_each_cpu(smp_call_func_t func, void *info, int wait);
+
+
+
+
+
+void on_each_cpu_mask(const struct cpumask *mask, smp_call_func_t func,
+  void *info, bool wait);
+
+
+
+
+
+
+void on_each_cpu_cond(smp_cond_func_t cond_func, smp_call_func_t func,
+        void *info, bool wait);
+
+void on_each_cpu_cond_mask(smp_cond_func_t cond_func, smp_call_func_t func,
+      void *info, bool wait, const struct cpumask *mask);
+
+int smp_call_function_single_async(int cpu, call_single_data_t *csd);
+# 157 "./include/linux/smp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void smp_send_stop(void) { }
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void up_smp_call_function(smp_call_func_t func, void *info)
+{
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void smp_send_reschedule(int cpu) { }
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void call_function_init(void) { }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+smp_call_function_any(const struct cpumask *mask, smp_call_func_t func,
+        void *info, int wait)
+{
+ return smp_call_function_single(0, func, info, wait);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kick_all_cpus_sync(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wake_up_all_idle_cpus(void) { }
+
+
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) up_late_init(void);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void smp_init(void) { up_late_init(); }
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_boot_cpu_id(void)
+{
+ return 0;
+}
+# 245 "./include/linux/smp.h"
+extern void arch_disable_smp_support(void);
+
+extern void arch_thaw_secondary_cpus_begin(void);
+extern void arch_thaw_secondary_cpus_end(void);
+
+void smp_setup_processor_id(void);
+
+int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par,
+      bool phys);
+
+
+int smpcfd_prepare_cpu(unsigned int cpu);
+int smpcfd_dead_cpu(unsigned int cpu);
+int smpcfd_dying_cpu(unsigned int cpu);
+# 15 "./include/linux/lockdep.h" 2
+
+
+struct task_struct;
+
+
+extern int prove_locking;
+extern int lock_stat;
+
+
+
+
+
+# 1 "./include/linux/debug_locks.h" 1
+# 9 "./include/linux/debug_locks.h"
+struct task_struct;
+
+extern int debug_locks __attribute__((__section__(".data..read_mostly")));
+extern int debug_locks_silent __attribute__((__section__(".data..read_mostly")));
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int __debug_locks_off(void)
+{
+ return ({ typeof(&debug_locks) __ai_ptr = (&debug_locks); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__ (*((__ai_ptr))) __ret = ((0)); switch (sizeof(*((__ai_ptr)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }); });
+}
+
+
+
+
+extern int debug_locks_off(void);
+# 49 "./include/linux/debug_locks.h"
+struct task_struct;
+
+
+extern void debug_show_all_locks(void);
+extern void debug_show_held_locks(struct task_struct *task);
+extern void debug_check_no_locks_freed(const void *from, unsigned long len);
+extern void debug_check_no_locks_held(void);
+# 28 "./include/linux/lockdep.h" 2
+# 1 "./include/linux/stacktrace.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/errno.h" 1
+# 7 "./include/linux/stacktrace.h" 2
+
+struct task_struct;
+struct pt_regs;
+
+
+void stack_trace_print(const unsigned long *trace, unsigned int nr_entries,
+         int spaces);
+int stack_trace_snprint(char *buf, size_t size, const unsigned long *entries,
+   unsigned int nr_entries, int spaces);
+unsigned int stack_trace_save(unsigned long *store, unsigned int size,
+         unsigned int skipnr);
+unsigned int stack_trace_save_tsk(struct task_struct *task,
+      unsigned long *store, unsigned int size,
+      unsigned int skipnr);
+unsigned int stack_trace_save_regs(struct pt_regs *regs, unsigned long *store,
+       unsigned int size, unsigned int skipnr);
+unsigned int stack_trace_save_user(unsigned long *store, unsigned int size);
+# 36 "./include/linux/stacktrace.h"
+typedef bool (*stack_trace_consume_fn)(void *cookie, unsigned long addr);
+# 53 "./include/linux/stacktrace.h"
+void arch_stack_walk(stack_trace_consume_fn consume_entry, void *cookie,
+       struct task_struct *task, struct pt_regs *regs);
+int arch_stack_walk_reliable(stack_trace_consume_fn consume_entry, void *cookie,
+        struct task_struct *task);
+void arch_stack_walk_user(stack_trace_consume_fn consume_entry, void *cookie,
+     const struct pt_regs *regs);
+# 79 "./include/linux/stacktrace.h"
+int stack_trace_save_tsk_reliable(struct task_struct *tsk, unsigned long *store,
+      unsigned int size);
+# 29 "./include/linux/lockdep.h" 2
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_copy_map(struct lockdep_map *to,
+        struct lockdep_map *from)
+{
+ int i;
+
+ *to = *from;
+# 44 "./include/linux/lockdep.h"
+ for (i = 0; i < 2; i++)
+  to->class_cache[i] = ((void *)0);
+}
+
+
+
+
+
+struct lock_list {
+ struct list_head entry;
+ struct lock_class *class;
+ struct lock_class *links_to;
+ const struct lock_trace *trace;
+ u16 distance;
+
+ u8 dep;
+
+ u8 only_xr;
+
+
+
+
+
+ struct lock_list *parent;
+};
+# 79 "./include/linux/lockdep.h"
+struct lock_chain {
+
+ unsigned int irq_context : 2,
+     depth : 6,
+     base : 24;
+
+ struct hlist_node entry;
+ u64 chain_key;
+};
+
+
+
+
+
+struct held_lock {
+# 108 "./include/linux/lockdep.h"
+ u64 prev_chain_key;
+ unsigned long acquire_ip;
+ struct lockdep_map *instance;
+ struct lockdep_map *nest_lock;
+# 121 "./include/linux/lockdep.h"
+ unsigned int class_idx:13;
+# 135 "./include/linux/lockdep.h"
+ unsigned int irq_context:2;
+ unsigned int trylock:1;
+
+ unsigned int read:2;
+ unsigned int check:1;
+ unsigned int hardirqs_off:1;
+ unsigned int references:12;
+ unsigned int pin_count;
+};
+
+
+
+
+extern void lockdep_init(void);
+extern void lockdep_reset(void);
+extern void lockdep_reset_lock(struct lockdep_map *lock);
+extern void lockdep_free_key_range(void *start, unsigned long size);
+extern void lockdep_sys_exit(void);
+extern void lockdep_set_selftest_task(struct task_struct *task);
+
+extern void lockdep_init_task(struct task_struct *task);
+# 179 "./include/linux/lockdep.h"
+extern void lockdep_register_key(struct lock_class_key *key);
+extern void lockdep_unregister_key(struct lock_class_key *key);
+
+
+
+
+
+
+
+extern void lockdep_init_map_type(struct lockdep_map *lock, const char *name,
+ struct lock_class_key *key, int subclass, u8 inner, u8 outer, u8 lock_type);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+lockdep_init_map_waits(struct lockdep_map *lock, const char *name,
+         struct lock_class_key *key, int subclass, u8 inner, u8 outer)
+{
+ lockdep_init_map_type(lock, name, key, subclass, inner, LD_WAIT_INV, LD_LOCK_NORMAL);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+lockdep_init_map_wait(struct lockdep_map *lock, const char *name,
+        struct lock_class_key *key, int subclass, u8 inner)
+{
+ lockdep_init_map_waits(lock, name, key, subclass, inner, LD_WAIT_INV);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_init_map(struct lockdep_map *lock, const char *name,
+        struct lock_class_key *key, int subclass)
+{
+ lockdep_init_map_wait(lock, name, key, subclass, LD_WAIT_INV);
+}
+# 245 "./include/linux/lockdep.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int lockdep_match_key(struct lockdep_map *lock,
+        struct lock_class_key *key)
+{
+ return lock->key == key;
+}
+# 265 "./include/linux/lockdep.h"
+extern void lock_acquire(struct lockdep_map *lock, unsigned int subclass,
+    int trylock, int read, int check,
+    struct lockdep_map *nest_lock, unsigned long ip);
+
+extern void lock_release(struct lockdep_map *lock, unsigned long ip);
+
+
+
+
+extern int lock_is_held_type(const struct lockdep_map *lock, int read);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int lock_is_held(const struct lockdep_map *lock)
+{
+ return lock_is_held_type(lock, -1);
+}
+
+
+
+
+extern void lock_set_class(struct lockdep_map *lock, const char *name,
+      struct lock_class_key *key, unsigned int subclass,
+      unsigned long ip);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lock_set_subclass(struct lockdep_map *lock,
+  unsigned int subclass, unsigned long ip)
+{
+ lock_set_class(lock, lock->name, lock->key, subclass, ip);
+}
+
+extern void lock_downgrade(struct lockdep_map *lock, unsigned long ip);
+
+
+
+extern struct pin_cookie lock_pin_lock(struct lockdep_map *lock);
+extern void lock_repin_lock(struct lockdep_map *lock, struct pin_cookie);
+extern void lock_unpin_lock(struct lockdep_map *lock, struct pin_cookie);
+# 410 "./include/linux/lockdep.h"
+enum xhlock_context_t {
+ XHLOCK_HARD,
+ XHLOCK_SOFT,
+ XHLOCK_CTX_NR,
+};
+# 424 "./include/linux/lockdep.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_invariant_state(bool force) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lockdep_free_task(struct task_struct *task) {}
+# 484 "./include/linux/lockdep.h"
+extern void print_irqtrace_events(struct task_struct *curr);
+# 499 "./include/linux/lockdep.h"
+extern bool read_lock_is_recursive(void);
+# 575 "./include/linux/lockdep.h"
+extern __attribute__((section(".data" ""))) __typeof__(int) hardirqs_enabled;
+extern __attribute__((section(".data" ""))) __typeof__(int) hardirq_context;
+extern __attribute__((section(".data" ""))) __typeof__(unsigned int) lockdep_recursion;
+# 652 "./include/linux/lockdep.h"
+void lockdep_rcu_suspicious(const char *file, const int line, const char *s);
+# 18 "./include/linux/mutex.h" 2
+
+# 1 "./arch/x86/include/asm/processor.h" 1
+
+
+
+
+# 1 "./arch/x86/include/asm/processor-flags.h" 1
+
+
+
+
+# 1 "./arch/x86/include/uapi/asm/processor-flags.h" 1
+# 6 "./arch/x86/include/asm/processor-flags.h" 2
+# 1 "./include/linux/mem_encrypt.h" 1
+# 17 "./include/linux/mem_encrypt.h"
+# 1 "./arch/x86/include/asm/mem_encrypt.h" 1
+# 17 "./arch/x86/include/asm/mem_encrypt.h"
+# 1 "./arch/x86/include/uapi/asm/bootparam.h" 1
+# 43 "./arch/x86/include/uapi/asm/bootparam.h"
+# 1 "./include/linux/screen_info.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/screen_info.h" 1
+# 11 "./include/uapi/linux/screen_info.h"
+struct screen_info {
+ __u8 orig_x;
+ __u8 orig_y;
+ __u16 ext_mem_k;
+ __u16 orig_video_page;
+ __u8 orig_video_mode;
+ __u8 orig_video_cols;
+ __u8 flags;
+ __u8 unused2;
+ __u16 orig_video_ega_bx;
+ __u16 unused3;
+ __u8 orig_video_lines;
+ __u8 orig_video_isVGA;
+ __u16 orig_video_points;
+
+
+ __u16 lfb_width;
+ __u16 lfb_height;
+ __u16 lfb_depth;
+ __u32 lfb_base;
+ __u32 lfb_size;
+ __u16 cl_magic, cl_offset;
+ __u16 lfb_linelength;
+ __u8 red_size;
+ __u8 red_pos;
+ __u8 green_size;
+ __u8 green_pos;
+ __u8 blue_size;
+ __u8 blue_pos;
+ __u8 rsvd_size;
+ __u8 rsvd_pos;
+ __u16 vesapm_seg;
+ __u16 vesapm_off;
+ __u16 pages;
+ __u16 vesa_attributes;
+ __u32 capabilities;
+ __u32 ext_lfb_base;
+ __u8 _reserved[2];
+} __attribute__((packed));
+# 6 "./include/linux/screen_info.h" 2
+
+extern struct screen_info screen_info;
+# 44 "./arch/x86/include/uapi/asm/bootparam.h" 2
+# 1 "./include/linux/apm_bios.h" 1
+# 9 "./include/linux/apm_bios.h"
+# 1 "./include/uapi/linux/apm_bios.h" 1
+# 22 "./include/uapi/linux/apm_bios.h"
+typedef unsigned short apm_event_t;
+typedef unsigned short apm_eventinfo_t;
+
+struct apm_bios_info {
+ __u16 version;
+ __u16 cseg;
+ __u32 offset;
+ __u16 cseg_16;
+ __u16 dseg;
+ __u16 flags;
+ __u16 cseg_len;
+ __u16 cseg_16_len;
+ __u16 dseg_len;
+};
+# 133 "./include/uapi/linux/apm_bios.h"
+# 1 "./include/uapi/linux/ioctl.h" 1
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/ioctl.h" 1
+# 1 "./include/asm-generic/ioctl.h" 1
+
+
+
+
+# 1 "./include/uapi/asm-generic/ioctl.h" 1
+# 6 "./include/asm-generic/ioctl.h" 2
+
+
+
+
+
+extern unsigned int __invalid_size_argument_for_IOC;
+# 2 "./arch/x86/include/generated/uapi/asm/ioctl.h" 2
+# 6 "./include/uapi/linux/ioctl.h" 2
+# 134 "./include/uapi/linux/apm_bios.h" 2
+# 10 "./include/linux/apm_bios.h" 2
+# 26 "./include/linux/apm_bios.h"
+struct apm_info {
+ struct apm_bios_info bios;
+ unsigned short connection_version;
+ int get_power_status_broken;
+ int get_power_status_swabinminutes;
+ int allow_ints;
+ int forbid_idle;
+ int realmode_power_off;
+ int disabled;
+};
+# 85 "./include/linux/apm_bios.h"
+extern struct apm_info apm_info;
+# 45 "./arch/x86/include/uapi/asm/bootparam.h" 2
+# 1 "./include/linux/edd.h" 1
+# 24 "./include/linux/edd.h"
+# 1 "./include/uapi/linux/edd.h" 1
+# 72 "./include/uapi/linux/edd.h"
+struct edd_device_params {
+ __u16 length;
+ __u16 info_flags;
+ __u32 num_default_cylinders;
+ __u32 num_default_heads;
+ __u32 sectors_per_track;
+ __u64 number_of_sectors;
+ __u16 bytes_per_sector;
+ __u32 dpte_ptr;
+ __u16 key;
+ __u8 device_path_info_length;
+ __u8 reserved2;
+ __u16 reserved3;
+ __u8 host_bus_type[4];
+ __u8 interface_type[8];
+ union {
+  struct {
+   __u16 base_address;
+   __u16 reserved1;
+   __u32 reserved2;
+  } __attribute__ ((packed)) isa;
+  struct {
+   __u8 bus;
+   __u8 slot;
+   __u8 function;
+   __u8 channel;
+   __u32 reserved;
+  } __attribute__ ((packed)) pci;
+
+  struct {
+   __u64 reserved;
+  } __attribute__ ((packed)) ibnd;
+  struct {
+   __u64 reserved;
+  } __attribute__ ((packed)) xprs;
+  struct {
+   __u64 reserved;
+  } __attribute__ ((packed)) htpt;
+  struct {
+   __u64 reserved;
+  } __attribute__ ((packed)) unknown;
+ } interface_path;
+ union {
+  struct {
+   __u8 device;
+   __u8 reserved1;
+   __u16 reserved2;
+   __u32 reserved3;
+   __u64 reserved4;
+  } __attribute__ ((packed)) ata;
+  struct {
+   __u8 device;
+   __u8 lun;
+   __u8 reserved1;
+   __u8 reserved2;
+   __u32 reserved3;
+   __u64 reserved4;
+  } __attribute__ ((packed)) atapi;
+  struct {
+   __u16 id;
+   __u64 lun;
+   __u16 reserved1;
+   __u32 reserved2;
+  } __attribute__ ((packed)) scsi;
+  struct {
+   __u64 serial_number;
+   __u64 reserved;
+  } __attribute__ ((packed)) usb;
+  struct {
+   __u64 eui;
+   __u64 reserved;
+  } __attribute__ ((packed)) i1394;
+  struct {
+   __u64 wwid;
+   __u64 lun;
+  } __attribute__ ((packed)) fibre;
+  struct {
+   __u64 identity_tag;
+   __u64 reserved;
+  } __attribute__ ((packed)) i2o;
+  struct {
+   __u32 array_number;
+   __u32 reserved1;
+   __u64 reserved2;
+  } __attribute__ ((packed)) raid;
+  struct {
+   __u8 device;
+   __u8 reserved1;
+   __u16 reserved2;
+   __u32 reserved3;
+   __u64 reserved4;
+  } __attribute__ ((packed)) sata;
+  struct {
+   __u64 reserved1;
+   __u64 reserved2;
+  } __attribute__ ((packed)) unknown;
+ } device_path;
+ __u8 reserved4;
+ __u8 checksum;
+} __attribute__ ((packed));
+
+struct edd_info {
+ __u8 device;
+ __u8 version;
+ __u16 interface_support;
+ __u16 legacy_max_cylinder;
+ __u8 legacy_max_head;
+ __u8 legacy_sectors_per_track;
+ struct edd_device_params params;
+} __attribute__ ((packed));
+
+struct edd {
+ unsigned int mbr_signature[16];
+ struct edd_info edd_info[6];
+ unsigned char mbr_signature_nr;
+ unsigned char edd_info_nr;
+};
+# 25 "./include/linux/edd.h" 2
+
+
+extern struct edd edd;
+# 46 "./arch/x86/include/uapi/asm/bootparam.h" 2
+# 1 "./arch/x86/include/asm/ist.h" 1
+# 9 "./arch/x86/include/asm/ist.h"
+# 1 "./arch/x86/include/uapi/asm/ist.h" 1
+# 23 "./arch/x86/include/uapi/asm/ist.h"
+struct ist_info {
+ __u32 signature;
+ __u32 command;
+ __u32 event;
+ __u32 perf_level;
+};
+# 10 "./arch/x86/include/asm/ist.h" 2
+
+
+extern struct ist_info ist_info;
+# 47 "./arch/x86/include/uapi/asm/bootparam.h" 2
+# 1 "./include/video/edid.h" 1
+
+
+
+
+# 1 "./include/uapi/video/edid.h" 1
+
+
+
+
+struct edid_info {
+ unsigned char dummy[128];
+};
+# 6 "./include/video/edid.h" 2
+
+
+extern struct edid_info edid_info;
+# 48 "./arch/x86/include/uapi/asm/bootparam.h" 2
+
+
+struct setup_data {
+ __u64 next;
+ __u32 type;
+ __u32 len;
+ __u8 data[0];
+};
+
+
+struct setup_indirect {
+ __u32 type;
+ __u32 reserved;
+ __u64 len;
+ __u64 addr;
+};
+
+struct setup_header {
+ __u8 setup_sects;
+ __u16 root_flags;
+ __u32 syssize;
+ __u16 ram_size;
+ __u16 vid_mode;
+ __u16 root_dev;
+ __u16 boot_flag;
+ __u16 jump;
+ __u32 header;
+ __u16 version;
+ __u32 realmode_swtch;
+ __u16 start_sys_seg;
+ __u16 kernel_version;
+ __u8 type_of_loader;
+ __u8 loadflags;
+ __u16 setup_move_size;
+ __u32 code32_start;
+ __u32 ramdisk_image;
+ __u32 ramdisk_size;
+ __u32 bootsect_kludge;
+ __u16 heap_end_ptr;
+ __u8 ext_loader_ver;
+ __u8 ext_loader_type;
+ __u32 cmd_line_ptr;
+ __u32 initrd_addr_max;
+ __u32 kernel_alignment;
+ __u8 relocatable_kernel;
+ __u8 min_alignment;
+ __u16 xloadflags;
+ __u32 cmdline_size;
+ __u32 hardware_subarch;
+ __u64 hardware_subarch_data;
+ __u32 payload_offset;
+ __u32 payload_length;
+ __u64 setup_data;
+ __u64 pref_address;
+ __u32 init_size;
+ __u32 handover_offset;
+ __u32 kernel_info_offset;
+} __attribute__((packed));
+
+struct sys_desc_table {
+ __u16 length;
+ __u8 table[14];
+};
+
+
+struct olpc_ofw_header {
+ __u32 ofw_magic;
+ __u32 ofw_version;
+ __u32 cif_handler;
+ __u32 irq_desc_table;
+} __attribute__((packed));
+
+struct efi_info {
+ __u32 efi_loader_signature;
+ __u32 efi_systab;
+ __u32 efi_memdesc_size;
+ __u32 efi_memdesc_version;
+ __u32 efi_memmap;
+ __u32 efi_memmap_size;
+ __u32 efi_systab_hi;
+ __u32 efi_memmap_hi;
+};
+# 140 "./arch/x86/include/uapi/asm/bootparam.h"
+struct boot_e820_entry {
+ __u64 addr;
+ __u64 size;
+ __u32 type;
+} __attribute__((packed));
+# 155 "./arch/x86/include/uapi/asm/bootparam.h"
+struct jailhouse_setup_data {
+ struct {
+  __u16 version;
+  __u16 compatible_version;
+ } __attribute__((packed)) hdr;
+ struct {
+  __u16 pm_timer_address;
+  __u16 num_cpus;
+  __u64 pci_mmconfig_base;
+  __u32 tsc_khz;
+  __u32 apic_khz;
+  __u8 standard_ioapic;
+  __u8 cpu_ids[255];
+ } __attribute__((packed)) v1;
+ struct {
+  __u32 flags;
+ } __attribute__((packed)) v2;
+} __attribute__((packed));
+
+
+struct boot_params {
+ struct screen_info screen_info;
+ struct apm_bios_info apm_bios_info;
+ __u8 _pad2[4];
+ __u64 tboot_addr;
+ struct ist_info ist_info;
+ __u64 acpi_rsdp_addr;
+ __u8 _pad3[8];
+ __u8 hd0_info[16];
+ __u8 hd1_info[16];
+ struct sys_desc_table sys_desc_table;
+ struct olpc_ofw_header olpc_ofw_header;
+ __u32 ext_ramdisk_image;
+ __u32 ext_ramdisk_size;
+ __u32 ext_cmd_line_ptr;
+ __u8 _pad4[116];
+ struct edid_info edid_info;
+ struct efi_info efi_info;
+ __u32 alt_mem_k;
+ __u32 scratch;
+ __u8 e820_entries;
+ __u8 eddbuf_entries;
+ __u8 edd_mbr_sig_buf_entries;
+ __u8 kbd_status;
+ __u8 secure_boot;
+ __u8 _pad5[2];
+# 212 "./arch/x86/include/uapi/asm/bootparam.h"
+ __u8 sentinel;
+ __u8 _pad6[1];
+ struct setup_header hdr;
+ __u8 _pad7[0x290-0x1f1-sizeof(struct setup_header)];
+ __u32 edd_mbr_sig_buffer[16];
+ struct boot_e820_entry e820_table[128];
+ __u8 _pad8[48];
+ struct edd_info eddbuf[6];
+ __u8 _pad9[276];
+} __attribute__((packed));
+# 262 "./arch/x86/include/uapi/asm/bootparam.h"
+enum x86_hardware_subarch {
+ X86_SUBARCH_PC = 0,
+ X86_SUBARCH_LGUEST,
+ X86_SUBARCH_XEN,
+ X86_SUBARCH_INTEL_MID,
+ X86_SUBARCH_CE4100,
+ X86_NR_SUBARCHS,
+};
+# 18 "./arch/x86/include/asm/mem_encrypt.h" 2
+# 64 "./arch/x86/include/asm/mem_encrypt.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sme_early_encrypt(resource_size_t paddr,
+         unsigned long size) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sme_early_decrypt(resource_size_t paddr,
+         unsigned long size) { }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sme_map_bootdata(char *real_mode_data) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sme_unmap_bootdata(char *real_mode_data) { }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sme_early_init(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sev_setup_arch(void) { }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sme_encrypt_kernel(struct boot_params *bp) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sme_enable(struct boot_params *bp) { }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sev_es_init_vc_handling(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sme_active(void) { return false; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sev_active(void) { return false; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sev_es_active(void) { return false; }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__section__(".init.text"))) __attribute__((__cold__))
+early_set_memory_decrypted(unsigned long vaddr, unsigned long size) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__section__(".init.text"))) __attribute__((__cold__))
+early_set_memory_encrypted(unsigned long vaddr, unsigned long size) { return 0; }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_encrypt_free_decrypted_mem(void) { }
+# 103 "./arch/x86/include/asm/mem_encrypt.h"
+extern char __start_bss_decrypted[], __end_bss_decrypted[], __start_bss_decrypted_unused[];
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mem_encrypt_active(void)
+{
+ return 0ULL;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 sme_get_me_mask(void)
+{
+ return 0ULL;
+}
+# 18 "./include/linux/mem_encrypt.h" 2
+# 7 "./arch/x86/include/asm/processor-flags.h" 2
+# 6 "./arch/x86/include/asm/processor.h" 2
+
+
+struct task_struct;
+struct mm_struct;
+struct io_bitmap;
+struct vm86;
+
+# 1 "./arch/x86/include/asm/math_emu.h" 1
+
+
+
+
+# 1 "./arch/x86/include/asm/ptrace.h" 1
+
+
+
+
+# 1 "./arch/x86/include/asm/segment.h" 1
+# 245 "./arch/x86/include/asm/segment.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long vdso_encode_cpunode(int cpu, unsigned long node)
+{
+ return (node << 12) | cpu;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vdso_read_cpunode(unsigned *cpu, unsigned *node)
+{
+ unsigned int p;
+# 262 "./arch/x86/include/asm/segment.h"
+ asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" "lsl %[seg],%[p]" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "(16*32+22)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" ".byte 0xf3,0x0f,0xc7,0xf8" "\n" "665""1" ":\n" ".popsection\n" : [p] "=a" (p) : "i" (0), [seg] "r" ((15*8 + 3)))
+
+
+                                           ;
+
+ if (cpu)
+  *cpu = (p & 0xfff);
+ if (node)
+  *node = (p >> 12);
+}
+# 297 "./arch/x86/include/asm/segment.h"
+extern const char early_idt_handler_array[32][9];
+extern void early_ignore_irq(void);
+# 343 "./arch/x86/include/asm/segment.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __loadsegment_fs(unsigned short value)
+{
+ asm volatile("						\n"
+       "1:	movw %0, %%fs			\n"
+       "2:					\n"
+
+       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_clear_fs" ") - .\n" " .popsection\n"
+
+       : : "rm" (value) : "memory");
+}
+# 6 "./arch/x86/include/asm/ptrace.h" 2
+# 1 "./arch/x86/include/asm/page_types.h" 1
+# 46 "./arch/x86/include/asm/page_types.h"
+# 1 "./arch/x86/include/asm/page_64_types.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/asm/kaslr.h" 1
+
+
+
+
+unsigned long kaslr_get_random_long(const char *purpose);
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kernel_randomize_memory(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_trampoline_kaslr(void) {}
+# 7 "./arch/x86/include/asm/page_64_types.h" 2
+# 47 "./arch/x86/include/asm/page_types.h" 2
+# 62 "./arch/x86/include/asm/page_types.h"
+extern int devmem_is_allowed(unsigned long pagenr);
+
+extern unsigned long max_low_pfn_mapped;
+extern unsigned long max_pfn_mapped;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) phys_addr_t get_max_mapped(void)
+{
+ return (phys_addr_t)max_pfn_mapped << 12;
+}
+
+bool pfn_range_is_mapped(unsigned long start_pfn, unsigned long end_pfn);
+
+extern void initmem_init(void);
+# 7 "./arch/x86/include/asm/ptrace.h" 2
+# 1 "./arch/x86/include/uapi/asm/ptrace.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/uapi/asm/ptrace-abi.h" 1
+# 7 "./arch/x86/include/uapi/asm/ptrace.h" 2
+# 8 "./arch/x86/include/asm/ptrace.h" 2
+# 56 "./arch/x86/include/asm/ptrace.h"
+struct pt_regs {
+
+
+
+
+ unsigned long r15;
+ unsigned long r14;
+ unsigned long r13;
+ unsigned long r12;
+ unsigned long bp;
+ unsigned long bx;
+
+ unsigned long r11;
+ unsigned long r10;
+ unsigned long r9;
+ unsigned long r8;
+ unsigned long ax;
+ unsigned long cx;
+ unsigned long dx;
+ unsigned long si;
+ unsigned long di;
+
+
+
+
+ unsigned long orig_ax;
+
+ unsigned long ip;
+ unsigned long cs;
+ unsigned long flags;
+ unsigned long sp;
+ unsigned long ss;
+
+};
+
+
+
+
+
+
+
+# 1 "./arch/x86/include/asm/proto.h" 1
+
+
+
+
+# 1 "./arch/x86/include/uapi/asm/ldt.h" 1
+# 21 "./arch/x86/include/uapi/asm/ldt.h"
+struct user_desc {
+ unsigned int entry_number;
+ unsigned int base_addr;
+ unsigned int limit;
+ unsigned int seg_32bit:1;
+ unsigned int contents:2;
+ unsigned int read_exec_only:1;
+ unsigned int limit_in_pages:1;
+ unsigned int seg_not_present:1;
+ unsigned int useable:1;
+# 39 "./arch/x86/include/uapi/asm/ldt.h"
+ unsigned int lm:1;
+
+};
+# 6 "./arch/x86/include/asm/proto.h" 2
+
+
+
+void syscall_init(void);
+
+
+void entry_SYSCALL_64(void);
+void entry_SYSCALL_64_safe_stack(void);
+long do_arch_prctl_64(struct task_struct *task, int option, unsigned long arg2);
+# 35 "./arch/x86/include/asm/proto.h"
+void x86_configure_nx(void);
+void x86_report_nx(void);
+
+extern int reboot_force;
+
+long do_arch_prctl_common(struct task_struct *task, int option,
+     unsigned long cpuid_enabled);
+# 98 "./arch/x86/include/asm/ptrace.h" 2
+
+struct cpuinfo_x86;
+struct task_struct;
+
+extern unsigned long profile_pc(struct pt_regs *regs);
+
+extern unsigned long
+convert_ip_to_linear(struct task_struct *child, struct pt_regs *regs);
+extern void send_sigtrap(struct pt_regs *regs, int error_code, int si_code);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long regs_return_value(struct pt_regs *regs)
+{
+ return regs->ax;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void regs_set_return_value(struct pt_regs *regs, unsigned long rc)
+{
+ regs->ax = rc;
+}
+# 128 "./arch/x86/include/asm/ptrace.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int user_mode(struct pt_regs *regs)
+{
+
+
+
+ return !!(regs->cs & 3);
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int v8086_mode(struct pt_regs *regs)
+{
+
+
+
+ return 0;
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool user_64bit_mode(struct pt_regs *regs)
+{
+
+
+
+
+
+
+ return regs->cs == (6*8 + 3);
+
+
+
+
+
+
+
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool any_64bit_mode(struct pt_regs *regs)
+{
+
+ return !user_mode(regs) || user_64bit_mode(regs);
+
+
+
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ip_within_syscall_gap(struct pt_regs *regs)
+{
+ bool ret = (regs->ip >= (unsigned long)entry_SYSCALL_64 &&
+      regs->ip < (unsigned long)entry_SYSCALL_64_safe_stack);
+
+
+
+
+
+
+ return ret;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long kernel_stack_pointer(struct pt_regs *regs)
+{
+ return regs->sp;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long instruction_pointer(struct pt_regs *regs)
+{
+ return regs->ip;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void instruction_pointer_set(struct pt_regs *regs,
+  unsigned long val)
+{
+ regs->ip = val;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long frame_pointer(struct pt_regs *regs)
+{
+ return regs->bp;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long user_stack_pointer(struct pt_regs *regs)
+{
+ return regs->sp;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void user_stack_pointer_set(struct pt_regs *regs,
+  unsigned long val)
+{
+ regs->sp = val;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool regs_irqs_disabled(struct pt_regs *regs)
+{
+ return !(regs->flags & (((1UL)) << (9)));
+}
+
+
+extern int regs_query_register_offset(const char *name);
+extern const char *regs_query_register_name(unsigned int offset);
+# 246 "./arch/x86/include/asm/ptrace.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long regs_get_register(struct pt_regs *regs,
+           unsigned int offset)
+{
+ if (__builtin_expect(!!(offset > (__builtin_offsetof(struct pt_regs, ss))), 0))
+  return 0;
+# 263 "./arch/x86/include/asm/ptrace.h"
+ return *(unsigned long *)((unsigned long)regs + offset);
+}
+# 274 "./arch/x86/include/asm/ptrace.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int regs_within_kernel_stack(struct pt_regs *regs,
+        unsigned long addr)
+{
+ return ((addr & ~((((1UL) << 12) << (2 + 1)) - 1)) == (regs->sp & ~((((1UL) << 12) << (2 + 1)) - 1)));
+}
+# 289 "./arch/x86/include/asm/ptrace.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long *regs_get_kernel_stack_nth_addr(struct pt_regs *regs, unsigned int n)
+{
+ unsigned long *addr = (unsigned long *)regs->sp;
+
+ addr += n;
+ if (regs_within_kernel_stack(regs, (unsigned long)addr))
+  return addr;
+ else
+  return ((void *)0);
+}
+
+
+extern long copy_from_kernel_nofault(void *dst, const void *src, size_t size);
+# 312 "./arch/x86/include/asm/ptrace.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
+            unsigned int n)
+{
+ unsigned long *addr;
+ unsigned long val;
+ long ret;
+
+ addr = regs_get_kernel_stack_nth_addr(regs, n);
+ if (addr) {
+  ret = copy_from_kernel_nofault(&val, addr, sizeof(val));
+  if (!ret)
+   return val;
+ }
+ return 0;
+}
+# 339 "./arch/x86/include/asm/ptrace.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long regs_get_kernel_argument(struct pt_regs *regs,
+           unsigned int n)
+{
+ static const unsigned int argument_offs[] = {
+
+
+
+
+
+
+  __builtin_offsetof(struct pt_regs, di),
+  __builtin_offsetof(struct pt_regs, si),
+  __builtin_offsetof(struct pt_regs, dx),
+  __builtin_offsetof(struct pt_regs, cx),
+  __builtin_offsetof(struct pt_regs, r8),
+  __builtin_offsetof(struct pt_regs, r9),
+
+
+ };
+
+ if (n >= 6) {
+  n -= 6 - 1;
+  return regs_get_kernel_stack_nth(regs, n);
+ } else
+  return regs_get_register(regs, argument_offs[n]);
+}
+# 375 "./arch/x86/include/asm/ptrace.h"
+struct user_desc;
+extern int do_get_thread_area(struct task_struct *p, int idx,
+         struct user_desc *info);
+extern int do_set_thread_area(struct task_struct *p, int idx,
+         struct user_desc *info, int can_allocate);
+# 6 "./arch/x86/include/asm/math_emu.h" 2
+
+
+
+
+
+struct math_emu_info {
+ long ___orig_eip;
+ struct pt_regs *regs;
+};
+# 14 "./arch/x86/include/asm/processor.h" 2
+
+# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
+# 16 "./arch/x86/include/asm/processor.h" 2
+# 1 "./arch/x86/include/uapi/asm/sigcontext.h" 1
+# 40 "./arch/x86/include/uapi/asm/sigcontext.h"
+struct _fpx_sw_bytes {
+
+
+
+
+ __u32 magic1;
+# 54 "./arch/x86/include/uapi/asm/sigcontext.h"
+ __u32 extended_size;
+
+
+
+
+
+ __u64 xfeatures;
+
+
+
+
+
+ __u32 xstate_size;
+
+
+ __u32 padding[7];
+};
+# 85 "./arch/x86/include/uapi/asm/sigcontext.h"
+struct _fpreg {
+ __u16 significand[4];
+ __u16 exponent;
+};
+
+
+struct _fpxreg {
+ __u16 significand[4];
+ __u16 exponent;
+ __u16 padding[3];
+};
+
+
+struct _xmmreg {
+ __u32 element[4];
+};
+
+
+
+
+
+
+struct _fpstate_32 {
+
+ __u32 cw;
+ __u32 sw;
+ __u32 tag;
+ __u32 ipoff;
+ __u32 cssel;
+ __u32 dataoff;
+ __u32 datasel;
+ struct _fpreg _st[8];
+ __u16 status;
+ __u16 magic;
+
+
+
+ __u32 _fxsr_env[6];
+ __u32 mxcsr;
+ __u32 reserved;
+ struct _fpxreg _fxsr_st[8];
+ struct _xmmreg _xmm[8];
+ union {
+  __u32 padding1[44];
+  __u32 padding[44];
+ };
+
+ union {
+  __u32 padding2[12];
+  struct _fpx_sw_bytes sw_reserved;
+ };
+};
+# 149 "./arch/x86/include/uapi/asm/sigcontext.h"
+struct _fpstate_64 {
+ __u16 cwd;
+ __u16 swd;
+
+ __u16 twd;
+ __u16 fop;
+ __u64 rip;
+ __u64 rdp;
+ __u32 mxcsr;
+ __u32 mxcsr_mask;
+ __u32 st_space[32];
+ __u32 xmm_space[64];
+ __u32 reserved2[12];
+ union {
+  __u32 reserved3[12];
+  struct _fpx_sw_bytes sw_reserved;
+ };
+};
+
+
+
+
+
+
+
+struct _header {
+ __u64 xfeatures;
+ __u64 reserved1[2];
+ __u64 reserved2[5];
+};
+
+struct _ymmh_state {
+
+ __u32 ymmh_space[64];
+};
+# 192 "./arch/x86/include/uapi/asm/sigcontext.h"
+struct _xstate {
+ struct _fpstate_64 fpstate;
+ struct _header xstate_hdr;
+ struct _ymmh_state ymmh;
+
+};
+
+
+
+
+struct sigcontext_32 {
+ __u16 gs, __gsh;
+ __u16 fs, __fsh;
+ __u16 es, __esh;
+ __u16 ds, __dsh;
+ __u32 di;
+ __u32 si;
+ __u32 bp;
+ __u32 sp;
+ __u32 bx;
+ __u32 dx;
+ __u32 cx;
+ __u32 ax;
+ __u32 trapno;
+ __u32 err;
+ __u32 ip;
+ __u16 cs, __csh;
+ __u32 flags;
+ __u32 sp_at_signal;
+ __u16 ss, __ssh;
+# 230 "./arch/x86/include/uapi/asm/sigcontext.h"
+ __u32 fpstate;
+ __u32 oldmask;
+ __u32 cr2;
+};
+
+
+
+
+struct sigcontext_64 {
+ __u64 r8;
+ __u64 r9;
+ __u64 r10;
+ __u64 r11;
+ __u64 r12;
+ __u64 r13;
+ __u64 r14;
+ __u64 r15;
+ __u64 di;
+ __u64 si;
+ __u64 bp;
+ __u64 bx;
+ __u64 dx;
+ __u64 ax;
+ __u64 cx;
+ __u64 sp;
+ __u64 ip;
+ __u64 flags;
+ __u16 cs;
+ __u16 gs;
+ __u16 fs;
+ __u16 ss;
+ __u64 err;
+ __u64 trapno;
+ __u64 oldmask;
+ __u64 cr2;
+# 273 "./arch/x86/include/uapi/asm/sigcontext.h"
+ __u64 fpstate;
+ __u64 reserved1[8];
+};
+# 17 "./arch/x86/include/asm/processor.h" 2
+
+
+# 1 "./arch/x86/include/asm/page.h" 1
+# 12 "./arch/x86/include/asm/page.h"
+# 1 "./arch/x86/include/asm/page_64.h" 1
+# 11 "./arch/x86/include/asm/page_64.h"
+extern unsigned long max_pfn;
+extern unsigned long phys_base;
+
+extern unsigned long page_offset_base;
+extern unsigned long vmalloc_base;
+extern unsigned long vmemmap_base;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __phys_addr_nodebug(unsigned long x)
+{
+ unsigned long y = x - (0xffffffff80000000UL);
+
+
+ x = y + ((x > y) ? phys_base : ((0xffffffff80000000UL) - ((unsigned long)page_offset_base)));
+
+ return x;
+}
+# 43 "./arch/x86/include/asm/page_64.h"
+void clear_page_orig(void *page);
+void clear_page_rep(void *page);
+void clear_page_erms(void *page);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_page(void *page)
+{
+ asm __inline volatile ("# ALT: oldinstr2\n" "661:\n\t" "call %P[old]" "\n662:\n" "# ALT: padding2\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+16)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 9*32+ 9)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "call %P[new1]" "\n" "665""1" ":\n" "# ALT: replacement " "2" "\n" "664""2"":\n\t" "call %P[new2]" "\n" "665""2" ":\n" ".popsection\n" : "=D" (page), "+r" (current_stack_pointer) : [old] "i" (clear_page_orig), [new1] "i" (clear_page_rep), [new2] "i" (clear_page_erms), "0" (page) : "cc", "memory", "rax", "rcx")
+
+
+
+
+                                     ;
+}
+
+void copy_page(void *to, void *from);
+# 13 "./arch/x86/include/asm/page.h" 2
+
+
+
+
+
+
+struct page;
+
+# 1 "./include/linux/range.h" 1
+
+
+
+
+
+struct range {
+ u64 start;
+ u64 end;
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 range_len(const struct range *range)
+{
+ return range->end - range->start + 1;
+}
+
+int add_range(struct range *range, int az, int nr_range,
+  u64 start, u64 end);
+
+
+int add_range_with_merge(struct range *range, int az, int nr_range,
+    u64 start, u64 end);
+
+void subtract_range(struct range *range, int az, u64 start, u64 end);
+
+int clean_sort_range(struct range *range, int az);
+
+void sort_range(struct range *range, int nr_range);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) resource_size_t cap_resource(u64 val)
+{
+ if (val > ((resource_size_t)~0))
+  return ((resource_size_t)~0);
+
+ return val;
+}
+# 22 "./arch/x86/include/asm/page.h" 2
+extern struct range pfn_mapped[];
+extern int nr_pfn_mapped;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_user_page(void *page, unsigned long vaddr,
+       struct page *pg)
+{
+ clear_page(page);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void copy_user_page(void *to, void *from, unsigned long vaddr,
+      struct page *topage)
+{
+ copy_page(to, from);
+}
+# 71 "./arch/x86/include/asm/page.h"
+extern bool __virt_addr_valid(unsigned long kaddr);
+
+
+
+
+# 1 "./include/asm-generic/memory_model.h" 1
+
+
+
+
+# 1 "./include/linux/pfn.h" 1
+# 13 "./include/linux/pfn.h"
+typedef struct {
+ u64 val;
+} pfn_t;
+# 6 "./include/asm-generic/memory_model.h" 2
+# 77 "./arch/x86/include/asm/page.h" 2
+# 1 "./include/asm-generic/getorder.h" 1
+# 29 "./include/asm-generic/getorder.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__const__)) int get_order(unsigned long size)
+{
+ if (__builtin_constant_p(size)) {
+  if (!size)
+   return 64 - 12;
+
+  if (size < (1UL << 12))
+   return 0;
+
+  return ( __builtin_constant_p((size) - 1) ? (((size) - 1) < 2 ? 0 : 63 - __builtin_clzll((size) - 1)) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - 12 + 1;
+ }
+
+ size--;
+ size >>= 12;
+
+
+
+ return fls64(size);
+
+}
+# 78 "./arch/x86/include/asm/page.h" 2
+# 20 "./arch/x86/include/asm/processor.h" 2
+# 1 "./arch/x86/include/asm/pgtable_types.h" 1
+# 143 "./arch/x86/include/asm/pgtable_types.h"
+enum page_cache_mode {
+ _PAGE_CACHE_MODE_WB = 0,
+ _PAGE_CACHE_MODE_WC = 1,
+ _PAGE_CACHE_MODE_UC_MINUS = 2,
+ _PAGE_CACHE_MODE_UC = 3,
+ _PAGE_CACHE_MODE_WT = 4,
+ _PAGE_CACHE_MODE_WP = 5,
+
+ _PAGE_CACHE_MODE_NUM = 8
+};
+# 266 "./arch/x86/include/asm/pgtable_types.h"
+# 1 "./arch/x86/include/asm/pgtable_64_types.h" 1
+
+
+
+
+# 1 "./arch/x86/include/asm/sparsemem.h" 1
+# 6 "./arch/x86/include/asm/pgtable_64_types.h" 2
+# 14 "./arch/x86/include/asm/pgtable_64_types.h"
+typedef unsigned long pteval_t;
+typedef unsigned long pmdval_t;
+typedef unsigned long pudval_t;
+typedef unsigned long p4dval_t;
+typedef unsigned long pgdval_t;
+typedef unsigned long pgprotval_t;
+
+typedef struct { pteval_t pte; } pte_t;
+
+
+extern unsigned int __pgtable_l5_enabled;
+# 43 "./arch/x86/include/asm/pgtable_64_types.h"
+extern unsigned int pgdir_shift;
+extern unsigned int ptrs_per_p4d;
+# 267 "./arch/x86/include/asm/pgtable_types.h" 2
+# 282 "./arch/x86/include/asm/pgtable_types.h"
+typedef struct pgprot { pgprotval_t pgprot; } pgprot_t;
+
+typedef struct { pgdval_t pgd; } pgd_t;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprot_t pgprot_nx(pgprot_t prot)
+{
+ return ((pgprot_t) { (((prot).pgprot) | (((pteval_t)(1)) << 63)) } );
+}
+# 315 "./arch/x86/include/asm/pgtable_types.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgd_t native_make_pgd(pgdval_t val)
+{
+ return (pgd_t) { val & (~0ULL) };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgdval_t native_pgd_val(pgd_t pgd)
+{
+ return pgd.pgd & (~0ULL);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgdval_t pgd_flags(pgd_t pgd)
+{
+ return native_pgd_val(pgd) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))));
+}
+
+
+typedef struct { p4dval_t p4d; } p4d_t;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4d_t native_make_p4d(pudval_t val)
+{
+ return (p4d_t) { val };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4dval_t native_p4d_val(p4d_t p4d)
+{
+ return p4d.p4d;
+}
+# 357 "./arch/x86/include/asm/pgtable_types.h"
+typedef struct { pudval_t pud; } pud_t;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t native_make_pud(pmdval_t val)
+{
+ return (pud_t) { val };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pudval_t native_pud_val(pud_t pud)
+{
+ return pud.pud;
+}
+# 383 "./arch/x86/include/asm/pgtable_types.h"
+typedef struct { pmdval_t pmd; } pmd_t;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t native_make_pmd(pmdval_t val)
+{
+ return (pmd_t) { val };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmdval_t native_pmd_val(pmd_t pmd)
+{
+ return pmd.pmd;
+}
+# 408 "./arch/x86/include/asm/pgtable_types.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4dval_t p4d_pfn_mask(p4d_t p4d)
+{
+
+ return ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4dval_t p4d_flags_mask(p4d_t p4d)
+{
+ return ~p4d_pfn_mask(p4d);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4dval_t p4d_flags(p4d_t p4d)
+{
+ return native_p4d_val(p4d) & p4d_flags_mask(p4d);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pudval_t pud_pfn_mask(pud_t pud)
+{
+ if (native_pud_val(pud) & (((pteval_t)(1)) << 7))
+  return (((signed long)(~(((1UL) << 30)-1))) & ((phys_addr_t)((1ULL << 52) - 1)));
+ else
+  return ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pudval_t pud_flags_mask(pud_t pud)
+{
+ return ~pud_pfn_mask(pud);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pudval_t pud_flags(pud_t pud)
+{
+ return native_pud_val(pud) & pud_flags_mask(pud);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmdval_t pmd_pfn_mask(pmd_t pmd)
+{
+ if (native_pmd_val(pmd) & (((pteval_t)(1)) << 7))
+  return (((signed long)(~(((1UL) << 21)-1))) & ((phys_addr_t)((1ULL << 52) - 1)));
+ else
+  return ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmdval_t pmd_flags_mask(pmd_t pmd)
+{
+ return ~pmd_pfn_mask(pmd);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmdval_t pmd_flags(pmd_t pmd)
+{
+ return native_pmd_val(pmd) & pmd_flags_mask(pmd);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t native_make_pte(pteval_t val)
+{
+ return (pte_t) { .pte = val };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pteval_t native_pte_val(pte_t pte)
+{
+ return pte.pte;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pteval_t pte_flags(pte_t pte)
+{
+ return native_pte_val(pte) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))));
+}
+# 484 "./arch/x86/include/asm/pgtable_types.h"
+unsigned long cachemode2protval(enum page_cache_mode pcm);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprotval_t protval_4k_2_large(pgprotval_t val)
+{
+ return (val & ~((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 12))) |
+  ((val & (((pteval_t)(1)) << 7)) << (12 - 7));
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprot_t pgprot_4k_2_large(pgprot_t pgprot)
+{
+ return ((pgprot_t) { (protval_4k_2_large(((pgprot).pgprot))) } );
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprotval_t protval_large_2_4k(pgprotval_t val)
+{
+ return (val & ~((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 12))) |
+  ((val & (((pteval_t)(1)) << 12)) >>
+   (12 - 7));
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprot_t pgprot_large_2_4k(pgprot_t pgprot)
+{
+ return ((pgprot_t) { (protval_large_2_4k(((pgprot).pgprot))) } );
+}
+
+
+typedef struct page *pgtable_t;
+
+extern pteval_t __supported_pte_mask;
+extern pteval_t __default_kernel_pte_mask;
+extern void set_nx(void);
+extern int nx_enabled;
+
+
+extern pgprot_t pgprot_writecombine(pgprot_t prot);
+
+
+extern pgprot_t pgprot_writethrough(pgprot_t prot);
+
+
+
+
+
+struct file;
+pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
+                              unsigned long size, pgprot_t vma_prot);
+
+
+void set_pte_vaddr(unsigned long vaddr, pte_t pte);
+
+
+
+
+
+
+
+struct seq_file;
+extern void arch_report_meminfo(struct seq_file *m);
+
+enum pg_level {
+ PG_LEVEL_NONE,
+ PG_LEVEL_4K,
+ PG_LEVEL_2M,
+ PG_LEVEL_1G,
+ PG_LEVEL_512G,
+ PG_LEVEL_NUM
+};
+
+
+extern void update_page_count(int level, unsigned long pages);
+# 561 "./arch/x86/include/asm/pgtable_types.h"
+extern pte_t *lookup_address(unsigned long address, unsigned int *level);
+extern pte_t *lookup_address_in_pgd(pgd_t *pgd, unsigned long address,
+        unsigned int *level);
+
+struct mm_struct;
+extern pte_t *lookup_address_in_mm(struct mm_struct *mm, unsigned long address,
+       unsigned int *level);
+extern pmd_t *lookup_pmd_address(unsigned long address);
+extern phys_addr_t slow_virt_to_phys(void *__address);
+extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn,
+       unsigned long address,
+       unsigned numpages,
+       unsigned long page_flags);
+extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) kernel_unmap_pages_in_pgd(pgd_t *pgd, unsigned long address,
+         unsigned long numpages);
+# 21 "./arch/x86/include/asm/processor.h" 2
+
+# 1 "./arch/x86/include/asm/msr.h" 1
+
+
+
+
+# 1 "./arch/x86/include/asm/msr-index.h" 1
+# 6 "./arch/x86/include/asm/msr.h" 2
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/errno.h" 1
+# 11 "./arch/x86/include/asm/msr.h" 2
+# 1 "./arch/x86/include/asm/cpumask.h" 1
+
+
+
+
+
+
+extern cpumask_var_t cpu_callin_mask;
+extern cpumask_var_t cpu_callout_mask;
+extern cpumask_var_t cpu_initialized_mask;
+extern cpumask_var_t cpu_sibling_setup_mask;
+
+extern void setup_cpu_local_masks(void);
+# 24 "./arch/x86/include/asm/cpumask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool arch_cpu_online(int cpu)
+{
+ return cpu == 0;
+}
+# 12 "./arch/x86/include/asm/msr.h" 2
+# 1 "./arch/x86/include/uapi/asm/msr.h" 1
+# 13 "./arch/x86/include/asm/msr.h" 2
+
+struct msr {
+ union {
+  struct {
+   u32 l;
+   u32 h;
+  };
+  u64 q;
+ };
+};
+
+struct msr_info {
+ u32 msr_no;
+ struct msr reg;
+ struct msr *msrs;
+ int err;
+};
+
+struct msr_regs_info {
+ u32 *regs;
+ int err;
+};
+
+struct saved_msr {
+ bool valid;
+ struct msr_info info;
+};
+
+struct saved_msrs {
+ unsigned int num;
+ struct saved_msr *array;
+};
+# 67 "./arch/x86/include/asm/msr.h"
+# 1 "./include/linux/tracepoint-defs.h" 1
+# 12 "./include/linux/tracepoint-defs.h"
+# 1 "./include/linux/static_key.h" 1
+# 13 "./include/linux/tracepoint-defs.h" 2
+
+struct static_call_key;
+
+struct trace_print_flags {
+ unsigned long mask;
+ const char *name;
+};
+
+struct trace_print_flags_u64 {
+ unsigned long long mask;
+ const char *name;
+};
+
+struct tracepoint_func {
+ void *func;
+ void *data;
+ int prio;
+};
+
+struct tracepoint {
+ const char *name;
+ struct static_key key;
+ struct static_call_key *static_call_key;
+ void *static_call_tramp;
+ void *iterator;
+ int (*regfunc)(void);
+ void (*unregfunc)(void);
+ struct tracepoint_func *funcs;
+};
+
+
+typedef const int tracepoint_ptr_t;
+
+
+
+
+struct bpf_raw_event_map {
+ struct tracepoint *tp;
+ void *bpf_func;
+ u32 num_args;
+ u32 writable_size;
+} __attribute__((__aligned__(32)));
+# 68 "./arch/x86/include/asm/msr.h" 2
+
+
+extern struct tracepoint __tracepoint_read_msr;
+extern struct tracepoint __tracepoint_write_msr;
+extern struct tracepoint __tracepoint_rdpmc;
+extern void do_trace_write_msr(unsigned int msr, u64 val, int failed);
+extern void do_trace_read_msr(unsigned int msr, u64 val, int failed);
+extern void do_trace_rdpmc(unsigned int msr, u64 val, int failed);
+# 89 "./arch/x86/include/asm/msr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long long __rdmsr(unsigned int msr)
+{
+ unsigned long low, high;
+
+ asm volatile("1: rdmsr\n"
+       "2:\n"
+       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_rdmsr_unsafe" ") - .\n" " .popsection\n"
+       : "=a" (low), "=d" (high) : "c" (msr));
+
+ return ((low) | (high) << 32);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __wrmsr(unsigned int msr, u32 low, u32 high)
+{
+ asm volatile("1: wrmsr\n"
+       "2:\n"
+       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_wrmsr_unsafe" ") - .\n" " .popsection\n"
+       : : "c" (msr), "a"(low), "d" (high) : "memory");
+}
+# 123 "./arch/x86/include/asm/msr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long long native_read_msr(unsigned int msr)
+{
+ unsigned long long val;
+
+ val = __rdmsr(msr);
+
+ if (static_key_false(&(__tracepoint_read_msr).key))
+  do_trace_read_msr(msr, val, 0);
+
+ return val;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long long native_read_msr_safe(unsigned int msr,
+            int *err)
+{
+ unsigned long low, high;
+
+ asm volatile("2: rdmsr ; xor %[err],%[err]\n"
+       "1:\n\t"
+       ".section .fixup,\"ax\"\n\t"
+       "3: mov %[fault],%[err]\n\t"
+       "xorl %%eax, %%eax\n\t"
+       "xorl %%edx, %%edx\n\t"
+       "jmp 1b\n\t"
+       ".previous\n\t"
+       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "2b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n"
+       : [err] "=r" (*err), "=a" (low), "=d" (high)
+       : "c" (msr), [fault] "i" (-5));
+ if (static_key_false(&(__tracepoint_read_msr).key))
+  do_trace_read_msr(msr, ((low) | (high) << 32), *err);
+ return ((low) | (high) << 32);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __attribute__((no_instrument_function))
+native_write_msr(unsigned int msr, u32 low, u32 high)
+{
+ __wrmsr(msr, low, high);
+
+ if (static_key_false(&(__tracepoint_write_msr).key))
+  do_trace_write_msr(msr, ((u64)high << 32 | low), 0);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((no_instrument_function))
+native_write_msr_safe(unsigned int msr, u32 low, u32 high)
+{
+ int err;
+
+ asm volatile("2: wrmsr ; xor %[err],%[err]\n"
+       "1:\n\t"
+       ".section .fixup,\"ax\"\n\t"
+       "3:  mov %[fault],%[err] ; jmp 1b\n\t"
+       ".previous\n\t"
+       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "2b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n"
+       : [err] "=a" (err)
+       : "c" (msr), "0" (low), "d" (high),
+         [fault] "i" (-5)
+       : "memory");
+ if (static_key_false(&(__tracepoint_write_msr).key))
+  do_trace_write_msr(msr, ((u64)high << 32 | low), err);
+ return err;
+}
+
+extern int rdmsr_safe_regs(u32 regs[8]);
+extern int wrmsr_safe_regs(u32 regs[8]);
+# 199 "./arch/x86/include/asm/msr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long long rdtsc(void)
+{
+ unsigned long low, high;
+
+ asm volatile("rdtsc" : "=a" (low), "=d" (high));
+
+ return ((low) | (high) << 32);
+}
+# 216 "./arch/x86/include/asm/msr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long long rdtsc_ordered(void)
+{
+ unsigned long low, high;
+# 234 "./arch/x86/include/asm/msr.h"
+ asm volatile("# ALT: oldinstr2\n" "661:\n\t" "rdtsc" "\n662:\n" "# ALT: padding2\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 1*32+27)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "lfence; rdtsc" "\n" "665""1" ":\n" "# ALT: replacement " "2" "\n" "664""2"":\n\t" "rdtscp" "\n" "665""2" ":\n" ".popsection\n"
+
+
+   : "=a" (low), "=d" (high)
+
+   :: "ecx");
+
+ return ((low) | (high) << 32);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long long native_read_pmc(int counter)
+{
+ unsigned long low, high;
+
+ asm volatile("rdpmc" : "=a" (low), "=d" (high) : "c" (counter));
+ if (static_key_false(&(__tracepoint_rdpmc).key))
+  do_trace_rdpmc(counter, ((low) | (high) << 32), 0);
+ return ((low) | (high) << 32);
+}
+# 271 "./arch/x86/include/asm/msr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wrmsr(unsigned int msr, u32 low, u32 high)
+{
+ native_write_msr(msr, low, high);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wrmsrl(unsigned int msr, u64 val)
+{
+ native_write_msr(msr, (u32)(val & 0xffffffffULL), (u32)(val >> 32));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsr_safe(unsigned int msr, u32 low, u32 high)
+{
+ return native_write_msr_safe(msr, low, high);
+}
+# 300 "./arch/x86/include/asm/msr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsrl_safe(unsigned int msr, unsigned long long *p)
+{
+ int err;
+
+ *p = native_read_msr_safe(msr, &err);
+ return err;
+}
+# 322 "./arch/x86/include/asm/msr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsrl_safe(u32 msr, u64 val)
+{
+ return wrmsr_safe(msr, (u32)val, (u32)(val >> 32));
+}
+
+
+
+
+
+struct msr *msrs_alloc(void);
+void msrs_free(struct msr *msrs);
+int msr_set_bit(u32 msr, u8 bit);
+int msr_clear_bit(u32 msr, u8 bit);
+# 350 "./arch/x86/include/asm/msr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 *l, u32 *h)
+{
+ do { u64 __val = native_read_msr((msr_no)); (void)((*l) = (u32)__val); (void)((*h) = (u32)(__val >> 32)); } while (0);
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h)
+{
+ wrmsr(msr_no, l, h);
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsrl_on_cpu(unsigned int cpu, u32 msr_no, u64 *q)
+{
+ ((*q) = native_read_msr((msr_no)));
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsrl_on_cpu(unsigned int cpu, u32 msr_no, u64 q)
+{
+ wrmsrl(msr_no, q);
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rdmsr_on_cpus(const struct cpumask *m, u32 msr_no,
+    struct msr *msrs)
+{
+ rdmsr_on_cpu(0, msr_no, &(msrs[0].l), &(msrs[0].h));
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wrmsr_on_cpus(const struct cpumask *m, u32 msr_no,
+    struct msr *msrs)
+{
+ wrmsr_on_cpu(0, msr_no, msrs[0].l, msrs[0].h);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsr_safe_on_cpu(unsigned int cpu, u32 msr_no,
+        u32 *l, u32 *h)
+{
+ return ({ int __err; u64 __val = native_read_msr_safe((msr_no), &__err); (*l) = (u32)__val; (*h) = (u32)(__val >> 32); __err; });
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsr_safe_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h)
+{
+ return wrmsr_safe(msr_no, l, h);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsrl_safe_on_cpu(unsigned int cpu, u32 msr_no, u64 *q)
+{
+ return rdmsrl_safe(msr_no, q);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsrl_safe_on_cpu(unsigned int cpu, u32 msr_no, u64 q)
+{
+ return wrmsrl_safe(msr_no, q);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rdmsr_safe_regs_on_cpu(unsigned int cpu, u32 regs[8])
+{
+ return rdmsr_safe_regs(regs);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int wrmsr_safe_regs_on_cpu(unsigned int cpu, u32 regs[8])
+{
+ return wrmsr_safe_regs(regs);
+}
+# 23 "./arch/x86/include/asm/processor.h" 2
+# 1 "./arch/x86/include/asm/desc_defs.h" 1
+# 16 "./arch/x86/include/asm/desc_defs.h"
+struct desc_struct {
+ u16 limit0;
+ u16 base0;
+ u16 base1: 8, type: 4, s: 1, dpl: 2, p: 1;
+ u16 limit1: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8;
+} __attribute__((packed));
+# 40 "./arch/x86/include/asm/desc_defs.h"
+enum {
+ GATE_INTERRUPT = 0xE,
+ GATE_TRAP = 0xF,
+ GATE_CALL = 0xC,
+ GATE_TASK = 0x5,
+};
+
+enum {
+ DESC_TSS = 0x9,
+ DESC_LDT = 0x2,
+ DESCTYPE_S = 0x10,
+};
+
+
+struct ldttss_desc {
+ u16 limit0;
+ u16 base0;
+
+ u16 base1 : 8, type : 5, dpl : 2, p : 1;
+ u16 limit1 : 4, zero0 : 3, g : 1, base2 : 8;
+
+ u32 base3;
+ u32 zero1;
+
+} __attribute__((packed));
+
+typedef struct ldttss_desc ldt_desc;
+typedef struct ldttss_desc tss_desc;
+
+struct idt_bits {
+ u16 ist : 3,
+   zero : 5,
+   type : 5,
+   dpl : 2,
+   p : 1;
+} __attribute__((packed));
+
+struct idt_data {
+ unsigned int vector;
+ unsigned int segment;
+ struct idt_bits bits;
+ const void *addr;
+};
+
+struct gate_struct {
+ u16 offset_low;
+ u16 segment;
+ struct idt_bits bits;
+ u16 offset_middle;
+
+ u32 offset_high;
+ u32 reserved;
+
+} __attribute__((packed));
+
+typedef struct gate_struct gate_desc;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long gate_offset(const gate_desc *g)
+{
+
+ return g->offset_low | ((unsigned long)g->offset_middle << 16) |
+  ((unsigned long) g->offset_high << 32);
+
+
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long gate_segment(const gate_desc *g)
+{
+ return g->segment;
+}
+
+struct desc_ptr {
+ unsigned short size;
+ unsigned long address;
+} __attribute__((packed)) ;
+# 24 "./arch/x86/include/asm/processor.h" 2
+
+# 1 "./arch/x86/include/asm/special_insns.h" 1
+# 10 "./arch/x86/include/asm/special_insns.h"
+# 1 "./include/linux/irqflags.h" 1
+# 16 "./include/linux/irqflags.h"
+# 1 "./arch/x86/include/asm/irqflags.h" 1
+# 9 "./arch/x86/include/asm/irqflags.h"
+# 1 "./arch/x86/include/asm/nospec-branch.h" 1
+
+
+
+
+
+# 1 "./include/linux/static_key.h" 1
+# 7 "./arch/x86/include/asm/nospec-branch.h" 2
+# 1 "./include/linux/objtool.h" 1
+# 13 "./include/linux/objtool.h"
+struct unwind_hint {
+ u32 ip;
+ s16 sp_offset;
+ u8 sp_reg;
+ u8 type;
+ u8 end;
+};
+# 8 "./arch/x86/include/asm/nospec-branch.h" 2
+
+
+# 1 "./arch/x86/include/asm/alternative-asm.h" 1
+# 11 "./arch/x86/include/asm/nospec-branch.h" 2
+
+# 1 "./arch/x86/include/asm/msr-index.h" 1
+# 13 "./arch/x86/include/asm/nospec-branch.h" 2
+# 1 "./arch/x86/include/asm/unwind_hints.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/asm/orc_types.h" 1
+# 53 "./arch/x86/include/asm/orc_types.h"
+struct orc_entry {
+ s16 sp_offset;
+ s16 bp_offset;
+
+ unsigned sp_reg:4;
+ unsigned bp_reg:4;
+ unsigned type:2;
+ unsigned end:1;
+
+
+
+
+
+
+
+} __attribute__((__packed__));
+# 7 "./arch/x86/include/asm/unwind_hints.h" 2
+# 14 "./arch/x86/include/asm/nospec-branch.h" 2
+# 177 "./arch/x86/include/asm/nospec-branch.h"
+enum spectre_v2_mitigation {
+ SPECTRE_V2_NONE,
+ SPECTRE_V2_RETPOLINE_GENERIC,
+ SPECTRE_V2_RETPOLINE_AMD,
+ SPECTRE_V2_IBRS_ENHANCED,
+};
+
+
+enum spectre_v2_user_mitigation {
+ SPECTRE_V2_USER_NONE,
+ SPECTRE_V2_USER_STRICT,
+ SPECTRE_V2_USER_STRICT_PREFERRED,
+ SPECTRE_V2_USER_PRCTL,
+ SPECTRE_V2_USER_SECCOMP,
+};
+
+
+enum ssb_mitigation {
+ SPEC_STORE_BYPASS_NONE,
+ SPEC_STORE_BYPASS_DISABLE,
+ SPEC_STORE_BYPASS_PRCTL,
+ SPEC_STORE_BYPASS_SECCOMP,
+};
+
+extern char __indirect_thunk_start[];
+extern char __indirect_thunk_end[];
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
+void alternative_msr_write(unsigned int msr, u64 val, unsigned int feature)
+{
+ asm volatile("# ALT: oldnstr\n" "661:\n\t" "" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "%c[feature]" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "wrmsr" "\n" "665""1" ":\n" ".popsection\n"
+  : : "c" (msr),
+      "a" ((u32)val),
+      "d" ((u32)(val >> 32)),
+      [feature] "i" (feature)
+  : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void indirect_branch_prediction_barrier(void)
+{
+ u64 val = ((((1UL))) << (0));
+
+ alternative_msr_write(0x00000049, val, ( 7*32+21));
+}
+
+
+extern u64 x86_spec_ctrl_base;
+# 249 "./arch/x86/include/asm/nospec-branch.h"
+extern struct static_key_false switch_to_cond_stibp;
+extern struct static_key_false switch_mm_cond_ibpb;
+extern struct static_key_false switch_mm_always_ibpb;
+
+extern struct static_key_false mds_user_clear;
+extern struct static_key_false mds_idle_clear;
+# 265 "./arch/x86/include/asm/nospec-branch.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void mds_clear_cpu_buffers(void)
+{
+ static const u16 ds = (3*8);
+# 278 "./arch/x86/include/asm/nospec-branch.h"
+ asm volatile("verw %[ds]" : : [ds] "m" (ds) : "cc");
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void mds_user_clear_cpu_buffers(void)
+{
+ if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&mds_user_clear)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&mds_user_clear)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&mds_user_clear)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&mds_user_clear)->key) > 0; })), 1))
+  mds_clear_cpu_buffers();
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mds_idle_clear_cpu_buffers(void)
+{
+ if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&mds_idle_clear)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&mds_idle_clear)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&mds_idle_clear)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&mds_idle_clear)->key) > 0; })), 1))
+  mds_clear_cpu_buffers();
+}
+# 10 "./arch/x86/include/asm/irqflags.h" 2
+# 19 "./arch/x86/include/asm/irqflags.h"
+extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long native_save_fl(void);
+extern inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long native_save_fl(void)
+{
+ unsigned long flags;
+
+
+
+
+
+
+ asm volatile("# __raw_save_flags\n\t"
+       "pushf ; pop %0"
+       : "=rm" (flags)
+       :
+       : "memory");
+
+ return flags;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void native_irq_disable(void)
+{
+ asm volatile("cli": : :"memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void native_irq_enable(void)
+{
+ asm volatile("sti": : :"memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__section__(".cpuidle.text"))) void native_safe_halt(void)
+{
+ mds_idle_clear_cpu_buffers();
+ asm volatile("sti; hlt": : :"memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__section__(".cpuidle.text"))) void native_halt(void)
+{
+ mds_idle_clear_cpu_buffers();
+ asm volatile("hlt": : :"memory");
+}
+# 68 "./arch/x86/include/asm/irqflags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long arch_local_save_flags(void)
+{
+ return native_save_fl();
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_local_irq_disable(void)
+{
+ native_irq_disable();
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_local_irq_enable(void)
+{
+ native_irq_enable();
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__section__(".cpuidle.text"))) void arch_safe_halt(void)
+{
+ native_safe_halt();
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__section__(".cpuidle.text"))) void halt(void)
+{
+ native_halt();
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long arch_local_irq_save(void)
+{
+ unsigned long flags = arch_local_save_flags();
+ arch_local_irq_disable();
+ return flags;
+}
+# 130 "./arch/x86/include/asm/irqflags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_irqs_disabled_flags(unsigned long flags)
+{
+ return !(flags & (((1UL)) << (9)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int arch_irqs_disabled(void)
+{
+ unsigned long flags = arch_local_save_flags();
+
+ return arch_irqs_disabled_flags(flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void arch_local_irq_restore(unsigned long flags)
+{
+ if (!arch_irqs_disabled_flags(flags))
+  arch_local_irq_enable();
+}
+# 17 "./include/linux/irqflags.h" 2
+
+
+
+
+  extern void lockdep_softirqs_on(unsigned long ip);
+  extern void lockdep_softirqs_off(unsigned long ip);
+  extern void lockdep_hardirqs_on_prepare(unsigned long ip);
+  extern void lockdep_hardirqs_on(unsigned long ip);
+  extern void lockdep_hardirqs_off(unsigned long ip);
+# 37 "./include/linux/irqflags.h"
+struct irqtrace_events {
+ unsigned int irq_events;
+ unsigned long hardirq_enable_ip;
+ unsigned long hardirq_disable_ip;
+ unsigned int hardirq_enable_event;
+ unsigned int hardirq_disable_event;
+ unsigned long softirq_disable_ip;
+ unsigned long softirq_enable_ip;
+ unsigned int softirq_disable_event;
+ unsigned int softirq_enable_event;
+};
+
+extern __attribute__((section(".data" ""))) __typeof__(int) hardirqs_enabled;
+extern __attribute__((section(".data" ""))) __typeof__(int) hardirq_context;
+
+extern void trace_hardirqs_on_prepare(void);
+extern void trace_hardirqs_off_finish(void);
+extern void trace_hardirqs_on(void);
+extern void trace_hardirqs_off(void);
+# 153 "./include/linux/irqflags.h"
+extern void warn_bogus_irq_restore(void);
+# 11 "./arch/x86/include/asm/special_insns.h" 2
+# 24 "./arch/x86/include/asm/special_insns.h"
+void native_write_cr0(unsigned long val);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long native_read_cr0(void)
+{
+ unsigned long val;
+ asm volatile("mov %%cr0,%0\n\t" : "=r" (val) : "m"(*(unsigned int *)0x1000UL));
+ return val;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long native_read_cr2(void)
+{
+ unsigned long val;
+ asm volatile("mov %%cr2,%0\n\t" : "=r" (val) : "m"(*(unsigned int *)0x1000UL));
+ return val;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void native_write_cr2(unsigned long val)
+{
+ asm volatile("mov %0,%%cr2": : "r" (val) : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __native_read_cr3(void)
+{
+ unsigned long val;
+ asm volatile("mov %%cr3,%0\n\t" : "=r" (val) : "m"(*(unsigned int *)0x1000UL));
+ return val;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_write_cr3(unsigned long val)
+{
+ asm volatile("mov %0,%%cr3": : "r" (val) : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long native_read_cr4(void)
+{
+ unsigned long val;
+# 72 "./arch/x86/include/asm/special_insns.h"
+ asm volatile("mov %%cr4,%0\n\t" : "=r" (val) : "m"(*(unsigned int *)0x1000UL));
+
+ return val;
+}
+
+void native_write_cr4(unsigned long val);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 rdpkru(void)
+{
+ u32 ecx = 0;
+ u32 edx, pkru;
+
+
+
+
+
+ asm volatile(".byte 0x0f,0x01,0xee\n\t"
+       : "=a" (pkru), "=d" (edx)
+       : "c" (ecx));
+ return pkru;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wrpkru(u32 pkru)
+{
+ u32 ecx = 0, edx = 0;
+
+
+
+
+
+ asm volatile(".byte 0x0f,0x01,0xef\n\t"
+       : : "a" (pkru), "c"(ecx), "d"(edx));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __write_pkru(u32 pkru)
+{
+
+
+
+
+ if (pkru == rdpkru())
+  return;
+
+ wrpkru(pkru);
+}
+# 130 "./arch/x86/include/asm/special_insns.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_wbinvd(void)
+{
+ asm volatile("wbinvd": : :"memory");
+}
+
+extern void asm_load_gs_index(unsigned int selector);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_load_gs_index(unsigned int selector)
+{
+ unsigned long flags;
+
+ do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); if (!({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) trace_hardirqs_off(); } while (0);
+ asm_load_gs_index(selector);
+ do { if (!({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) trace_hardirqs_on(); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __read_cr4(void)
+{
+ return native_read_cr4();
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long read_cr0(void)
+{
+ return native_read_cr0();
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_cr0(unsigned long x)
+{
+ native_write_cr0(x);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long read_cr2(void)
+{
+ return native_read_cr2();
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void write_cr2(unsigned long x)
+{
+ native_write_cr2(x);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __read_cr3(void)
+{
+ return __native_read_cr3();
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_cr3(unsigned long x)
+{
+ native_write_cr3(x);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __write_cr4(unsigned long x)
+{
+ native_write_cr4(x);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wbinvd(void)
+{
+ native_wbinvd();
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void load_gs_index(unsigned int selector)
+{
+ native_load_gs_index(selector);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clflush(volatile void *__p)
+{
+ asm volatile("clflush %0" : "+m" (*(volatile char *)__p));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clflushopt(volatile void *__p)
+{
+ asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" ".byte " "0x3e" "; clflush %P0" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" ".byte 0x66; clflush %P0" "\n" "665""1" ":\n" ".popsection\n" : "+m" (*(volatile char *)__p) : "i" (0))
+
+
+                                              ;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clwb(volatile void *__p)
+{
+ volatile struct { char x[64]; } *p = __p;
+
+ asm volatile("# ALT: oldinstr2\n" "661:\n\t" ".byte " "0x3e" "; clflush (%[pax])" "\n662:\n" "# ALT: padding2\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 9*32+24)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" ".byte 0x66; clflush (%[pax])" "\n" "665""1" ":\n" "# ALT: replacement " "2" "\n" "664""2"":\n\t" ".byte 0x66, 0x0f, 0xae, 0x30" "\n" "665""2" ":\n" ".popsection\n"
+
+
+
+
+
+  : [p] "+m" (*p)
+  : [pax] "a" (p));
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void serialize(void)
+{
+
+ asm volatile(".byte 0xf, 0x1, 0xe8" ::: "memory");
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void movdir64b(void *dst, const void *src)
+{
+ const struct { char _[64]; } *__src = src;
+ struct { char _[64]; } *__dst = dst;
+# 262 "./arch/x86/include/asm/special_insns.h"
+ asm volatile(".byte 0x66, 0x0f, 0x38, 0xf8, 0x02"
+       : "+m" (*__dst)
+       : "m" (*__src), "a" (__dst), "d" (__src));
+}
+# 286 "./arch/x86/include/asm/special_insns.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int enqcmds(void *dst, const void *src)
+{
+ const struct { char _[64]; } *__src = src;
+ struct { char _[64]; } *__dst = dst;
+ int zf;
+
+
+
+
+
+
+ asm volatile(".byte 0xf3, 0x0f, 0x38, 0xf8, 0x02, 0x66, 0x90"
+       "\n\t/* output condition code " "z" "*/\n"
+       : "=@cc" "z" (zf), "+m" (*__dst)
+       : "m" (*__src), "a" (__dst), "d" (__src));
+
+
+ if (zf)
+  return -11;
+
+ return 0;
+}
+# 26 "./arch/x86/include/asm/processor.h" 2
+# 1 "./arch/x86/include/asm/fpu/types.h" 1
+# 12 "./arch/x86/include/asm/fpu/types.h"
+struct fregs_state {
+ u32 cwd;
+ u32 swd;
+ u32 twd;
+ u32 fip;
+ u32 fcs;
+ u32 foo;
+ u32 fos;
+
+
+ u32 st_space[20];
+
+
+ u32 status;
+};
+
+
+
+
+
+
+
+struct fxregs_state {
+ u16 cwd;
+ u16 swd;
+ u16 twd;
+ u16 fop;
+ union {
+  struct {
+   u64 rip;
+   u64 rdp;
+  };
+  struct {
+   u32 fip;
+   u32 fcs;
+   u32 foo;
+   u32 fos;
+  };
+ };
+ u32 mxcsr;
+ u32 mxcsr_mask;
+
+
+ u32 st_space[32];
+
+
+ u32 xmm_space[64];
+
+ u32 padding[12];
+
+ union {
+  u32 padding1[12];
+  u32 sw_reserved[12];
+ };
+
+} __attribute__((aligned(16)));
+# 79 "./arch/x86/include/asm/fpu/types.h"
+struct swregs_state {
+ u32 cwd;
+ u32 swd;
+ u32 twd;
+ u32 fip;
+ u32 fcs;
+ u32 foo;
+ u32 fos;
+
+ u32 st_space[20];
+ u8 ftop;
+ u8 changed;
+ u8 lookahead;
+ u8 no_update;
+ u8 rm;
+ u8 alimit;
+ struct math_emu_info *info;
+ u32 entry_eip;
+};
+
+
+
+
+enum xfeature {
+ XFEATURE_FP,
+ XFEATURE_SSE,
+
+
+
+
+ XFEATURE_YMM,
+ XFEATURE_BNDREGS,
+ XFEATURE_BNDCSR,
+ XFEATURE_OPMASK,
+ XFEATURE_ZMM_Hi256,
+ XFEATURE_Hi16_ZMM,
+ XFEATURE_PT_UNIMPLEMENTED_SO_FAR,
+ XFEATURE_PKRU,
+ XFEATURE_PASID,
+ XFEATURE_RSRVD_COMP_11,
+ XFEATURE_RSRVD_COMP_12,
+ XFEATURE_RSRVD_COMP_13,
+ XFEATURE_RSRVD_COMP_14,
+ XFEATURE_LBR,
+
+ XFEATURE_MAX,
+};
+# 147 "./arch/x86/include/asm/fpu/types.h"
+struct reg_128_bit {
+ u8 regbytes[128/8];
+};
+struct reg_256_bit {
+ u8 regbytes[256/8];
+};
+struct reg_512_bit {
+ u8 regbytes[512/8];
+};
+# 167 "./arch/x86/include/asm/fpu/types.h"
+struct ymmh_struct {
+ struct reg_128_bit hi_ymm[16];
+} __attribute__((__packed__));
+
+
+
+struct mpx_bndreg {
+ u64 lower_bound;
+ u64 upper_bound;
+} __attribute__((__packed__));
+
+
+
+struct mpx_bndreg_state {
+ struct mpx_bndreg bndreg[4];
+} __attribute__((__packed__));
+
+
+
+
+
+
+struct mpx_bndcsr {
+ u64 bndcfgu;
+ u64 bndstatus;
+} __attribute__((__packed__));
+
+
+
+
+struct mpx_bndcsr_state {
+ union {
+  struct mpx_bndcsr bndcsr;
+  u8 pad_to_64_bytes[64];
+ };
+} __attribute__((__packed__));
+
+
+
+
+
+
+
+struct avx_512_opmask_state {
+ u64 opmask_reg[8];
+} __attribute__((__packed__));
+
+
+
+
+
+
+struct avx_512_zmm_uppers_state {
+ struct reg_256_bit zmm_upper[16];
+} __attribute__((__packed__));
+
+
+
+
+
+struct avx_512_hi16_state {
+ struct reg_512_bit hi16_zmm[16];
+} __attribute__((__packed__));
+
+
+
+
+
+struct pkru_state {
+ u32 pkru;
+ u32 pad;
+} __attribute__((__packed__));
+
+
+
+
+
+
+struct lbr_entry {
+ u64 from;
+ u64 to;
+ u64 info;
+};
+
+struct arch_lbr_state {
+ u64 lbr_ctl;
+ u64 lbr_depth;
+ u64 ler_from;
+ u64 ler_to;
+ u64 ler_info;
+ struct lbr_entry entries[];
+} __attribute__((__packed__));
+
+
+
+
+
+struct ia32_pasid_state {
+ u64 pasid;
+} __attribute__((__packed__));
+
+struct xstate_header {
+ u64 xfeatures;
+ u64 xcomp_bv;
+ u64 reserved[6];
+} __attribute__((packed));
+# 289 "./arch/x86/include/asm/fpu/types.h"
+struct xregs_state {
+ struct fxregs_state i387;
+ struct xstate_header header;
+ u8 extended_state_area[0];
+} __attribute__ ((packed, aligned (64)));
+# 304 "./arch/x86/include/asm/fpu/types.h"
+union fpregs_state {
+ struct fregs_state fsave;
+ struct fxregs_state fxsave;
+ struct swregs_state soft;
+ struct xregs_state xsave;
+ u8 __padding[((1UL) << 12)];
+};
+
+
+
+
+
+
+struct fpu {
+# 330 "./arch/x86/include/asm/fpu/types.h"
+ unsigned int last_cpu;
+
+
+
+
+
+
+ unsigned long avx512_timestamp;
+# 348 "./arch/x86/include/asm/fpu/types.h"
+ union fpregs_state state;
+
+
+
+
+};
+# 27 "./arch/x86/include/asm/processor.h" 2
+
+# 1 "./arch/x86/include/asm/vmxfeatures.h" 1
+# 29 "./arch/x86/include/asm/processor.h" 2
+# 1 "./arch/x86/include/asm/vdso/processor.h" 1
+# 11 "./arch/x86/include/asm/vdso/processor.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void rep_nop(void)
+{
+ asm volatile("rep; nop" ::: "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void cpu_relax(void)
+{
+ rep_nop();
+}
+# 30 "./arch/x86/include/asm/processor.h" 2
+
+# 1 "./include/linux/personality.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/personality.h" 1
+# 11 "./include/uapi/linux/personality.h"
+enum {
+ UNAME26 = 0x0020000,
+ ADDR_NO_RANDOMIZE = 0x0040000,
+ FDPIC_FUNCPTRS = 0x0080000,
+
+
+ MMAP_PAGE_ZERO = 0x0100000,
+ ADDR_COMPAT_LAYOUT = 0x0200000,
+ READ_IMPLIES_EXEC = 0x0400000,
+ ADDR_LIMIT_32BIT = 0x0800000,
+ SHORT_INODE = 0x1000000,
+ WHOLE_SECONDS = 0x2000000,
+ STICKY_TIMEOUTS = 0x4000000,
+ ADDR_LIMIT_3GB = 0x8000000,
+};
+# 42 "./include/uapi/linux/personality.h"
+enum {
+ PER_LINUX = 0x0000,
+ PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
+ PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
+ PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
+ PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
+ PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS |
+      WHOLE_SECONDS | SHORT_INODE,
+ PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
+ PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
+ PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
+ PER_BSD = 0x0006,
+ PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
+ PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
+ PER_LINUX32 = 0x0008,
+ PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
+ PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
+ PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
+ PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
+ PER_RISCOS = 0x000c,
+ PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
+ PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
+ PER_OSF4 = 0x000f,
+ PER_HPUX = 0x0010,
+ PER_MASK = 0x00ff,
+};
+# 6 "./include/linux/personality.h" 2
+# 32 "./arch/x86/include/asm/processor.h" 2
+
+
+# 1 "./include/linux/math64.h" 1
+
+
+
+
+
+# 1 "./include/vdso/math64.h" 1
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32
+__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
+{
+ u32 ret = 0;
+
+ while (dividend >= divisor) {
+
+
+  asm("" : "+rm"(dividend));
+
+  dividend -= divisor;
+  ret++;
+ }
+
+ *remainder = dividend;
+
+ return ret;
+}
+# 7 "./include/linux/math64.h" 2
+# 25 "./include/linux/math64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
+{
+ *remainder = dividend % divisor;
+ return dividend / divisor;
+}
+# 39 "./include/linux/math64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
+{
+ *remainder = dividend % divisor;
+ return dividend / divisor;
+}
+# 53 "./include/linux/math64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
+{
+ *remainder = dividend % divisor;
+ return dividend / divisor;
+}
+# 66 "./include/linux/math64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 div64_u64(u64 dividend, u64 divisor)
+{
+ return dividend / divisor;
+}
+# 78 "./include/linux/math64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 div64_s64(s64 dividend, s64 divisor)
+{
+ return dividend / divisor;
+}
+# 124 "./include/linux/math64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 div_u64(u64 dividend, u32 divisor)
+{
+ u32 remainder;
+ return div_u64_rem(dividend, divisor, &remainder);
+}
+# 137 "./include/linux/math64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 div_s64(s64 dividend, s32 divisor)
+{
+ s32 remainder;
+ return div_s64_rem(dividend, divisor, &remainder);
+}
+
+
+u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 mul_u32_u32(u32 a, u32 b)
+{
+ return (u64)a * b;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
+{
+ return (u64)(((unsigned __int128)a * mul) >> shift);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 mul_u64_u64_shr(u64 a, u64 mul, unsigned int shift)
+{
+ return (u64)(((unsigned __int128)a * mul) >> shift);
+}
+# 266 "./include/linux/math64.h"
+u64 mul_u64_u64_div_u64(u64 a, u64 mul, u64 div);
+# 35 "./arch/x86/include/asm/processor.h" 2
+# 62 "./arch/x86/include/asm/processor.h"
+enum tlb_infos {
+ ENTRIES,
+ NR_INFO
+};
+
+extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_4k[NR_INFO];
+extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_2m[NR_INFO];
+extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_4m[NR_INFO];
+extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_4k[NR_INFO];
+extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_2m[NR_INFO];
+extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_4m[NR_INFO];
+extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_1g[NR_INFO];
+
+
+
+
+
+
+
+struct cpuinfo_x86 {
+ __u8 x86;
+ __u8 x86_vendor;
+ __u8 x86_model;
+ __u8 x86_stepping;
+
+
+ int x86_tlbsize;
+
+
+ __u32 vmx_capability[3];
+
+ __u8 x86_virt_bits;
+ __u8 x86_phys_bits;
+
+ __u8 x86_coreid_bits;
+ __u8 cu_id;
+
+ __u32 extended_cpuid_level;
+
+ int cpuid_level;
+
+
+
+
+
+ union {
+  __u32 x86_capability[20 + 1];
+  unsigned long x86_capability_alignment;
+ };
+ char x86_vendor_id[16];
+ char x86_model_id[64];
+
+ unsigned int x86_cache_size;
+ int x86_cache_alignment;
+
+ int x86_cache_max_rmid;
+ int x86_cache_occ_scale;
+ int x86_cache_mbm_width_offset;
+ int x86_power;
+ unsigned long loops_per_jiffy;
+
+ u16 x86_max_cores;
+ u16 apicid;
+ u16 initial_apicid;
+ u16 x86_clflush_size;
+
+ u16 booted_cores;
+
+ u16 phys_proc_id;
+
+ u16 logical_proc_id;
+
+ u16 cpu_core_id;
+ u16 cpu_die_id;
+ u16 logical_die_id;
+
+ u16 cpu_index;
+ u32 microcode;
+
+ u8 x86_cache_bits;
+ unsigned initialized : 1;
+} __attribute__((__designated_init__));
+
+struct cpuid_regs {
+ u32 eax, ebx, ecx, edx;
+};
+
+enum cpuid_regs_idx {
+ CPUID_EAX = 0,
+ CPUID_EBX,
+ CPUID_ECX,
+ CPUID_EDX,
+};
+# 172 "./arch/x86/include/asm/processor.h"
+extern struct cpuinfo_x86 boot_cpu_data;
+extern struct cpuinfo_x86 new_cpu_data;
+
+extern __u32 cpu_caps_cleared[20 + 1];
+extern __u32 cpu_caps_set[20 + 1];
+# 186 "./arch/x86/include/asm/processor.h"
+extern const struct seq_operations cpuinfo_op;
+
+
+
+extern void cpu_detect(struct cpuinfo_x86 *c);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long long l1tf_pfn_limit(void)
+{
+ return ((((1ULL))) << (boot_cpu_data.x86_cache_bits - 1 - 12));
+}
+
+extern void early_cpu_init(void);
+extern void identify_boot_cpu(void);
+extern void identify_secondary_cpu(struct cpuinfo_x86 *);
+extern void print_cpu_info(struct cpuinfo_x86 *);
+void print_cpu_msr(struct cpuinfo_x86 *);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int have_cpuid_p(void)
+{
+ return 1;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_cpuid(unsigned int *eax, unsigned int *ebx,
+    unsigned int *ecx, unsigned int *edx)
+{
+
+ asm volatile("cpuid"
+     : "=a" (*eax),
+       "=b" (*ebx),
+       "=c" (*ecx),
+       "=d" (*edx)
+     : "0" (*eax), "2" (*ecx)
+     : "memory");
+}
+# 237 "./arch/x86/include/asm/processor.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int native_cpuid_eax(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return eax; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int native_cpuid_ebx(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return ebx; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int native_cpuid_ecx(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return ecx; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int native_cpuid_edx(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return edx; }
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long read_cr3_pa(void)
+{
+ return __read_cr3() & (0x7FFFFFFFFFFFF000ull);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long native_read_cr3_pa(void)
+{
+ return __native_read_cr3() & (0x7FFFFFFFFFFFF000ull);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void load_cr3(pgd_t *pgdir)
+{
+ write_cr3((__phys_addr_nodebug((unsigned long)(pgdir)) | 0ULL));
+}
+# 314 "./arch/x86/include/asm/processor.h"
+struct x86_hw_tss {
+ u32 reserved1;
+ u64 sp0;
+
+
+
+
+
+ u64 sp1;
+
+
+
+
+
+
+ u64 sp2;
+
+ u64 reserved2;
+ u64 ist[7];
+ u32 reserved3;
+ u32 reserved4;
+ u16 reserved5;
+ u16 io_bitmap_base;
+
+} __attribute__((packed));
+# 372 "./arch/x86/include/asm/processor.h"
+struct entry_stack {
+ char stack[((1UL) << 12)];
+};
+
+struct entry_stack_page {
+ struct entry_stack stack;
+} __attribute__((__aligned__(((1UL) << 12))));
+
+
+
+
+struct x86_io_bitmap {
+
+ u64 prev_sequence;
+# 394 "./arch/x86/include/asm/processor.h"
+ unsigned int prev_max;
+
+
+
+
+
+
+
+ unsigned long bitmap[((65536 / 8) / sizeof(long)) + 1];
+
+
+
+
+
+ unsigned long mapall[((65536 / 8) / sizeof(long)) + 1];
+};
+
+struct tss_struct {
+
+
+
+
+
+ struct x86_hw_tss x86_tss;
+
+ struct x86_io_bitmap io_bitmap;
+} __attribute__((__aligned__(((1UL) << 12))));
+
+extern __attribute__((section(".data" "..page_aligned"))) __typeof__(struct tss_struct) cpu_tss_rw __attribute__((__aligned__(((1UL) << 12))));
+
+
+struct irq_stack {
+ char stack[(((1UL) << 12) << (2 + 1))];
+} __attribute__((__aligned__((((1UL) << 12) << (2 + 1)))));
+# 437 "./arch/x86/include/asm/processor.h"
+struct fixed_percpu_data {
+
+
+
+
+
+ char gs_base[40];
+ unsigned long stack_canary;
+};
+
+extern __attribute__((section(".data" ""))) __typeof__(struct fixed_percpu_data) fixed_percpu_data __attribute__((__externally_visible__));
+extern typeof(fixed_percpu_data) fixed_percpu_data;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long cpu_kernelmode_gs_base(int cpu)
+{
+ return (unsigned long)(*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(fixed_percpu_data.gs_base)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(fixed_percpu_data.gs_base))) *)(&(fixed_percpu_data.gs_base)); }); }));
+}
+
+extern __attribute__((section(".data" ""))) __typeof__(void *) hardirq_stack_ptr;
+extern __attribute__((section(".data" ""))) __typeof__(bool) hardirq_stack_inuse;
+extern void ignore_sysret(void);
+
+
+void current_save_fsgs(void);
+# 479 "./arch/x86/include/asm/processor.h"
+extern unsigned int fpu_kernel_xstate_size;
+extern unsigned int fpu_user_xstate_size;
+
+struct perf_event;
+
+struct thread_struct {
+
+ struct desc_struct tls_array[3];
+
+
+
+ unsigned long sp;
+
+
+
+ unsigned short es;
+ unsigned short ds;
+ unsigned short fsindex;
+ unsigned short gsindex;
+
+
+
+ unsigned long fsbase;
+ unsigned long gsbase;
+# 513 "./arch/x86/include/asm/processor.h"
+ struct perf_event *ptrace_bps[4];
+
+ unsigned long virtual_dr6;
+
+ unsigned long ptrace_dr7;
+
+ unsigned long cr2;
+ unsigned long trap_nr;
+ unsigned long error_code;
+
+
+
+
+
+ struct io_bitmap *io_bitmap;
+
+
+
+
+
+
+ unsigned long iopl_emul;
+
+ unsigned int sig_on_uaccess_err:1;
+
+
+ struct fpu fpu;
+
+
+
+
+};
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_thread_struct_whitelist(unsigned long *offset,
+      unsigned long *size)
+{
+ *offset = __builtin_offsetof(struct thread_struct, fpu.state);
+ *size = fpu_kernel_xstate_size;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+native_load_sp0(unsigned long sp0)
+{
+ do { do { const void *__vpp_verify = (typeof((&(cpu_tss_rw.x86_tss.sp0)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_tss_rw.x86_tss.sp0)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) sp0) & 0xff)); if (0) { typeof((cpu_tss_rw.x86_tss.sp0)) pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } asm volatile("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((cpu_tss_rw.x86_tss.sp0)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) sp0) & 0xffff)); if (0) { typeof((cpu_tss_rw.x86_tss.sp0)) pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } asm volatile("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((cpu_tss_rw.x86_tss.sp0)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) sp0) & 0xffffffff)); if (0) { typeof((cpu_tss_rw.x86_tss.sp0)) pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } asm volatile("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((cpu_tss_rw.x86_tss.sp0)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(sp0)); if (0) { typeof((cpu_tss_rw.x86_tss.sp0)) pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } asm volatile("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((cpu_tss_rw.x86_tss.sp0)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void native_swapgs(void)
+{
+
+ asm volatile("swapgs" ::: "memory");
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long current_top_of_stack(void)
+{
+
+
+
+
+
+ return ({ typeof(cpu_tss_rw.x86_tss.sp1) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_tss_rw.x86_tss.sp1)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_tss_rw.x86_tss.sp1)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm("mov" "b " "" "%" "P[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "p" (&(cpu_tss_rw.x86_tss.sp1))); (typeof(cpu_tss_rw.x86_tss.sp1))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm("mov" "w " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(cpu_tss_rw.x86_tss.sp1))); (typeof(cpu_tss_rw.x86_tss.sp1))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm("mov" "l " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(cpu_tss_rw.x86_tss.sp1))); (typeof(cpu_tss_rw.x86_tss.sp1))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm("mov" "q " "" "%" "P[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "p" (&(cpu_tss_rw.x86_tss.sp1))); (typeof(cpu_tss_rw.x86_tss.sp1))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool on_thread_stack(void)
+{
+ return (unsigned long)(current_top_of_stack() -
+          current_stack_pointer) < (((1UL) << 12) << (2 + 1));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void load_sp0(unsigned long sp0)
+{
+ native_load_sp0(sp0);
+}
+
+
+
+
+extern void release_thread(struct task_struct *);
+
+unsigned long get_wchan(struct task_struct *p);
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpuid(unsigned int op,
+    unsigned int *eax, unsigned int *ebx,
+    unsigned int *ecx, unsigned int *edx)
+{
+ *eax = op;
+ *ecx = 0;
+ native_cpuid(eax, ebx, ecx, edx);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cpuid_count(unsigned int op, int count,
+          unsigned int *eax, unsigned int *ebx,
+          unsigned int *ecx, unsigned int *edx)
+{
+ *eax = op;
+ *ecx = count;
+ native_cpuid(eax, ebx, ecx, edx);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpuid_eax(unsigned int op)
+{
+ unsigned int eax, ebx, ecx, edx;
+
+ cpuid(op, &eax, &ebx, &ecx, &edx);
+
+ return eax;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpuid_ebx(unsigned int op)
+{
+ unsigned int eax, ebx, ecx, edx;
+
+ cpuid(op, &eax, &ebx, &ecx, &edx);
+
+ return ebx;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpuid_ecx(unsigned int op)
+{
+ unsigned int eax, ebx, ecx, edx;
+
+ cpuid(op, &eax, &ebx, &ecx, &edx);
+
+ return ecx;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int cpuid_edx(unsigned int op)
+{
+ unsigned int eax, ebx, ecx, edx;
+
+ cpuid(op, &eax, &ebx, &ecx, &edx);
+
+ return edx;
+}
+
+extern void select_idle_routine(const struct cpuinfo_x86 *c);
+extern void amd_e400_c1e_apic_setup(void);
+
+extern unsigned long boot_option_idle_override;
+
+enum idle_boot_override {IDLE_NO_OVERRIDE=0, IDLE_HALT, IDLE_NOMWAIT,
+    IDLE_POLL};
+
+extern void enable_sep_cpu(void);
+extern int sysenter_setup(void);
+
+
+
+extern struct desc_ptr early_gdt_descr;
+
+extern void switch_to_new_gdt(int);
+extern void load_direct_gdt(int);
+extern void load_fixmap_gdt(int);
+extern void load_percpu_segment(int);
+extern void cpu_init(void);
+extern void cpu_init_exception_handling(void);
+extern void cr4_init(void);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_debugctlmsr(void)
+{
+ unsigned long debugctlmsr = 0;
+
+
+
+
+
+ ((debugctlmsr) = native_read_msr((0x000001d9)));
+
+ return debugctlmsr;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_debugctlmsr(unsigned long debugctlmsr)
+{
+
+
+
+
+ wrmsrl(0x000001d9, debugctlmsr);
+}
+
+extern void set_task_blockstep(struct task_struct *task, bool on);
+
+
+extern int bootloader_type;
+extern int bootloader_version;
+
+extern char ignore_fpu_irq;
+# 733 "./arch/x86/include/asm/processor.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void prefetch(const void *x)
+{
+ asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" "prefetcht0 %P1" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 0*32+25)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "prefetchnta %P1" "\n" "665""1" ":\n" ".popsection\n" : : "i" (0), "m" (*(const char *)x))
+
+                            ;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void prefetchw(const void *x)
+{
+ asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" "prefetcht0 %P1" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 6*32+ 8)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "prefetchw %P1" "\n" "665""1" ":\n" ".popsection\n" : : "i" (0), "m" (*(const char *)x))
+
+                            ;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void spin_lock_prefetch(const void *x)
+{
+ prefetchw(x);
+}
+# 780 "./arch/x86/include/asm/processor.h"
+extern unsigned long KSTK_ESP(struct task_struct *task);
+
+
+
+extern void start_thread(struct pt_regs *regs, unsigned long new_ip,
+            unsigned long new_sp);
+# 800 "./arch/x86/include/asm/processor.h"
+extern int get_tsc_mode(unsigned long adr);
+extern int set_tsc_mode(unsigned int val);
+
+extern __attribute__((section(".data" ""))) __typeof__(u64) msr_misc_features_shadow;
+
+
+extern u32 amd_get_nodes_per_socket(void);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) uint32_t hypervisor_cpuid_base(const char *sig, uint32_t leaves)
+{
+ uint32_t base, eax, signature[3];
+
+ for (base = 0x40000000; base < 0x40010000; base += 0x100) {
+  cpuid(base, &eax, &signature[0], &signature[1], &signature[2]);
+
+  if (!memcmp(sig, signature, 12) &&
+      (leaves == 0 || ((eax - base) >= leaves)))
+   return base;
+ }
+
+ return 0;
+}
+
+extern unsigned long arch_align_stack(unsigned long sp);
+void free_init_pages(const char *what, unsigned long begin, unsigned long end);
+extern void free_kernel_image_pages(const char *what, void *begin, void *end);
+
+void default_idle(void);
+
+
+
+
+
+
+void stop_this_cpu(void *dummy);
+void microcode_check(void);
+
+enum l1tf_mitigations {
+ L1TF_MITIGATION_OFF,
+ L1TF_MITIGATION_FLUSH_NOWARN,
+ L1TF_MITIGATION_FLUSH,
+ L1TF_MITIGATION_FLUSH_NOSMT,
+ L1TF_MITIGATION_FULL,
+ L1TF_MITIGATION_FULL_FORCE
+};
+
+extern enum l1tf_mitigations l1tf_mitigation;
+
+enum mds_mitigations {
+ MDS_MITIGATION_OFF,
+ MDS_MITIGATION_FULL,
+ MDS_MITIGATION_VMWERV,
+};
+# 20 "./include/linux/mutex.h" 2
+# 1 "./include/linux/osq_lock.h" 1
+# 9 "./include/linux/osq_lock.h"
+struct optimistic_spin_node {
+ struct optimistic_spin_node *next, *prev;
+ int locked;
+ int cpu;
+};
+
+struct optimistic_spin_queue {
+
+
+
+
+ atomic_t tail;
+};
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void osq_lock_init(struct optimistic_spin_queue *lock)
+{
+ atomic_set(&lock->tail, (0));
+}
+
+extern bool osq_lock(struct optimistic_spin_queue *lock);
+extern void osq_unlock(struct optimistic_spin_queue *lock);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool osq_is_locked(struct optimistic_spin_queue *lock)
+{
+ return atomic_read(&lock->tail) != (0);
+}
+# 21 "./include/linux/mutex.h" 2
+
+
+struct ww_acquire_ctx;
+# 53 "./include/linux/mutex.h"
+struct mutex {
+ atomic_long_t owner;
+ spinlock_t wait_lock;
+
+
+
+ struct list_head wait_list;
+
+ void *magic;
+
+
+ struct lockdep_map dep_map;
+
+};
+
+struct ww_class;
+struct ww_acquire_ctx;
+
+struct ww_mutex {
+ struct mutex base;
+ struct ww_acquire_ctx *ctx;
+
+ struct ww_class *ww_class;
+
+};
+
+
+
+
+
+struct mutex_waiter {
+ struct list_head list;
+ struct task_struct *task;
+ struct ww_acquire_ctx *ww_ctx;
+
+ void *magic;
+
+};
+
+
+
+
+
+
+extern void mutex_destroy(struct mutex *lock);
+# 142 "./include/linux/mutex.h"
+extern void __mutex_init(struct mutex *lock, const char *name,
+    struct lock_class_key *key);
+
+
+
+
+
+
+
+extern bool mutex_is_locked(struct mutex *lock);
+
+
+
+
+
+
+extern void mutex_lock_nested(struct mutex *lock, unsigned int subclass);
+extern void _mutex_lock_nest_lock(struct mutex *lock, struct lockdep_map *nest_lock);
+
+extern int __attribute__((__warn_unused_result__)) mutex_lock_interruptible_nested(struct mutex *lock,
+     unsigned int subclass);
+extern int __attribute__((__warn_unused_result__)) mutex_lock_killable_nested(struct mutex *lock,
+     unsigned int subclass);
+extern void mutex_lock_io_nested(struct mutex *lock, unsigned int subclass);
+# 197 "./include/linux/mutex.h"
+extern int mutex_trylock(struct mutex *lock);
+extern void mutex_unlock(struct mutex *lock);
+
+extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);
+# 13 "./include/linux/kernfs.h" 2
+# 1 "./include/linux/idr.h" 1
+# 15 "./include/linux/idr.h"
+# 1 "./include/linux/radix-tree.h" 1
+# 14 "./include/linux/radix-tree.h"
+# 1 "./include/linux/percpu.h" 1
+
+
+
+
+# 1 "./include/linux/mmdebug.h" 1
+
+
+
+
+
+
+
+struct page;
+struct vm_area_struct;
+struct mm_struct;
+
+extern void dump_page(struct page *page, const char *reason);
+extern void __dump_page(struct page *page, const char *reason);
+void dump_vma(const struct vm_area_struct *vma);
+void dump_mm(const struct mm_struct *mm);
+# 6 "./include/linux/percpu.h" 2
+# 1 "./include/linux/preempt.h" 1
+# 78 "./include/linux/preempt.h"
+# 1 "./arch/x86/include/asm/preempt.h" 1
+
+
+
+
+
+
+# 1 "./include/linux/thread_info.h" 1
+# 13 "./include/linux/thread_info.h"
+# 1 "./include/linux/restart_block.h" 1
+# 10 "./include/linux/restart_block.h"
+# 1 "./include/linux/time64.h" 1
+
+
+
+
+
+# 1 "./include/vdso/time64.h" 1
+# 7 "./include/linux/time64.h" 2
+
+typedef __s64 time64_t;
+typedef __u64 timeu64_t;
+
+# 1 "./include/uapi/linux/time.h" 1
+
+
+
+
+
+# 1 "./include/uapi/linux/time_types.h" 1
+
+
+
+
+
+
+struct __kernel_timespec {
+ __kernel_time64_t tv_sec;
+ long long tv_nsec;
+};
+
+struct __kernel_itimerspec {
+ struct __kernel_timespec it_interval;
+ struct __kernel_timespec it_value;
+};
+# 25 "./include/uapi/linux/time_types.h"
+struct __kernel_old_timeval {
+ __kernel_long_t tv_sec;
+ __kernel_long_t tv_usec;
+};
+
+
+struct __kernel_old_timespec {
+ __kernel_old_time_t tv_sec;
+ long tv_nsec;
+};
+
+struct __kernel_old_itimerval {
+ struct __kernel_old_timeval it_interval;
+ struct __kernel_old_timeval it_value;
+};
+
+struct __kernel_sock_timeval {
+ __s64 tv_sec;
+ __s64 tv_usec;
+};
+# 7 "./include/uapi/linux/time.h" 2
+# 33 "./include/uapi/linux/time.h"
+struct timezone {
+ int tz_minuteswest;
+ int tz_dsttime;
+};
+# 12 "./include/linux/time64.h" 2
+
+struct timespec64 {
+ time64_t tv_sec;
+ long tv_nsec;
+};
+
+struct itimerspec64 {
+ struct timespec64 it_interval;
+ struct timespec64 it_value;
+};
+# 41 "./include/linux/time64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int timespec64_equal(const struct timespec64 *a,
+       const struct timespec64 *b)
+{
+ return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int timespec64_compare(const struct timespec64 *lhs, const struct timespec64 *rhs)
+{
+ if (lhs->tv_sec < rhs->tv_sec)
+  return -1;
+ if (lhs->tv_sec > rhs->tv_sec)
+  return 1;
+ return lhs->tv_nsec - rhs->tv_nsec;
+}
+
+extern void set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct timespec64 timespec64_add(struct timespec64 lhs,
+      struct timespec64 rhs)
+{
+ struct timespec64 ts_delta;
+ set_normalized_timespec64(&ts_delta, lhs.tv_sec + rhs.tv_sec,
+    lhs.tv_nsec + rhs.tv_nsec);
+ return ts_delta;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct timespec64 timespec64_sub(struct timespec64 lhs,
+      struct timespec64 rhs)
+{
+ struct timespec64 ts_delta;
+ set_normalized_timespec64(&ts_delta, lhs.tv_sec - rhs.tv_sec,
+    lhs.tv_nsec - rhs.tv_nsec);
+ return ts_delta;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool timespec64_valid(const struct timespec64 *ts)
+{
+
+ if (ts->tv_sec < 0)
+  return false;
+
+ if ((unsigned long)ts->tv_nsec >= 1000000000L)
+  return false;
+ return true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool timespec64_valid_strict(const struct timespec64 *ts)
+{
+ if (!timespec64_valid(ts))
+  return false;
+
+ if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
+  return false;
+ return true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool timespec64_valid_settod(const struct timespec64 *ts)
+{
+ if (!timespec64_valid(ts))
+  return false;
+
+ if ((unsigned long long)ts->tv_sec >= ((((s64)~((u64)1 << 63)) / 1000000000L) - (30LL * 365 * 24 *3600)))
+  return false;
+ return true;
+}
+# 125 "./include/linux/time64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 timespec64_to_ns(const struct timespec64 *ts)
+{
+
+ if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
+  return ((s64)~((u64)1 << 63));
+
+ return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
+}
+
+
+
+
+
+
+
+extern struct timespec64 ns_to_timespec64(const s64 nsec);
+# 150 "./include/linux/time64.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void timespec64_add_ns(struct timespec64 *a, u64 ns)
+{
+ a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
+ a->tv_nsec = ns;
+}
+
+
+
+
+
+extern struct timespec64 timespec64_add_safe(const struct timespec64 lhs,
+      const struct timespec64 rhs);
+# 11 "./include/linux/restart_block.h" 2
+
+struct timespec;
+struct old_timespec32;
+struct pollfd;
+
+enum timespec_type {
+ TT_NONE = 0,
+ TT_NATIVE = 1,
+ TT_COMPAT = 2,
+};
+
+
+
+
+struct restart_block {
+ unsigned long arch_data;
+ long (*fn)(struct restart_block *);
+ union {
+
+  struct {
+   u32 *uaddr;
+   u32 val;
+   u32 flags;
+   u32 bitset;
+   u64 time;
+   u32 *uaddr2;
+  } futex;
+
+  struct {
+   clockid_t clockid;
+   enum timespec_type type;
+   union {
+    struct __kernel_timespec *rmtp;
+    struct old_timespec32 *compat_rmtp;
+   };
+   u64 expires;
+  } nanosleep;
+
+  struct {
+   struct pollfd *ufds;
+   int nfds;
+   int has_timeout;
+   unsigned long tv_sec;
+   unsigned long tv_nsec;
+  } poll;
+ };
+};
+
+extern long do_no_restart_syscall(struct restart_block *parm);
+# 14 "./include/linux/thread_info.h" 2
+# 32 "./include/linux/thread_info.h"
+enum {
+ BAD_STACK = -1,
+ NOT_STACK = 0,
+ GOOD_FRAME,
+ GOOD_STACK,
+};
+
+
+enum syscall_work_bit {
+ SYSCALL_WORK_BIT_SECCOMP,
+ SYSCALL_WORK_BIT_SYSCALL_TRACEPOINT,
+ SYSCALL_WORK_BIT_SYSCALL_TRACE,
+ SYSCALL_WORK_BIT_SYSCALL_EMU,
+ SYSCALL_WORK_BIT_SYSCALL_AUDIT,
+ SYSCALL_WORK_BIT_SYSCALL_USER_DISPATCH,
+ SYSCALL_WORK_BIT_SYSCALL_EXIT_TRAP,
+};
+# 59 "./include/linux/thread_info.h"
+# 1 "./arch/x86/include/asm/thread_info.h" 1
+# 14 "./arch/x86/include/asm/thread_info.h"
+# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
+# 15 "./arch/x86/include/asm/thread_info.h" 2
+# 52 "./arch/x86/include/asm/thread_info.h"
+struct task_struct;
+# 1 "./arch/x86/include/asm/cpufeature.h" 1
+# 12 "./arch/x86/include/asm/cpufeature.h"
+enum cpuid_leafs
+{
+ CPUID_1_EDX = 0,
+ CPUID_8000_0001_EDX,
+ CPUID_8086_0001_EDX,
+ CPUID_LNX_1,
+ CPUID_1_ECX,
+ CPUID_C000_0001_EDX,
+ CPUID_8000_0001_ECX,
+ CPUID_LNX_2,
+ CPUID_LNX_3,
+ CPUID_7_0_EBX,
+ CPUID_D_1_EAX,
+ CPUID_LNX_4,
+ CPUID_7_1_EAX,
+ CPUID_8000_0008_EBX,
+ CPUID_6_EAX,
+ CPUID_8000_000A_EDX,
+ CPUID_7_ECX,
+ CPUID_8000_0007_EBX,
+ CPUID_7_EDX,
+ CPUID_8000_001F_EAX,
+};
+
+
+extern const char * const x86_cap_flags[20*32];
+extern const char * const x86_power_flags[32];
+# 50 "./arch/x86/include/asm/cpufeature.h"
+extern const char * const x86_bug_flags[1*32];
+# 144 "./arch/x86/include/asm/cpufeature.h"
+extern void setup_clear_cpu_cap(unsigned int bit);
+extern void clear_cpu_cap(struct cpuinfo_x86 *c, unsigned int bit);
+# 176 "./arch/x86/include/asm/cpufeature.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool _static_cpu_has(u16 bit)
+{
+ do { asm goto("1: jmp 6f\n" "2:\n" ".skip -(((5f-4f) - (2b-1b)) > 0) * " "((5f-4f) - (2b-1b)),0x90\n" "3:\n" ".section .altinstructions,\"a\"\n" " .long 1b - .\n" " .long 4f - .\n" " .word %P[always]\n" " .byte 3b - 1b\n" " .byte 5f - 4f\n" " .byte 3b - 2b\n" ".previous\n" ".section .altinstr_replacement,\"ax\"\n" "4: jmp %l[t_no]\n" "5:\n" ".previous\n" ".section .altinstructions,\"a\"\n" " .long 1b - .\n" " .long 0\n" " .word %P[feature]\n" " .byte 3b - 1b\n" " .byte 0\n" " .byte 0\n" ".previous\n" ".section .altinstr_aux,\"ax\"\n" "6:\n" " testb %[bitnum],%[cap_byte]\n" " jnz %l[t_yes]\n" " jmp %l[t_no]\n" ".previous\n" : : [feature] "i" (bit), [always] "i" (( 3*32+21)), [bitnum] "i" (1 << (bit & 7)), [cap_byte] "m" (((const char *)boot_cpu_data.x86_capability)[bit >> 3]) : : t_yes, t_no); asm (""); } while (0)
+# 213 "./arch/x86/include/asm/cpufeature.h"
+                   ;
+t_yes:
+ return true;
+t_no:
+ return false;
+}
+# 54 "./arch/x86/include/asm/thread_info.h" 2
+
+
+struct thread_info {
+ unsigned long flags;
+ unsigned long syscall_work;
+ u32 status;
+};
+# 164 "./arch/x86/include/asm/thread_info.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_within_stack_frames(const void * const stack,
+        const void * const stackend,
+        const void *obj, unsigned long len)
+{
+
+ const void *frame = ((void *)0);
+ const void *oldframe;
+
+ oldframe = __builtin_frame_address(1);
+ if (oldframe)
+  frame = __builtin_frame_address(2);
+
+
+
+
+
+
+ while (stack <= frame && frame < stackend) {
+
+
+
+
+
+
+  if (obj + len <= frame)
+   return obj >= oldframe + 2 * sizeof(void *) ?
+    GOOD_FRAME : BAD_STACK;
+  oldframe = frame;
+  frame = *(const void * const *)frame;
+ }
+ return BAD_STACK;
+
+
+
+}
+# 233 "./arch/x86/include/asm/thread_info.h"
+extern void arch_task_cache_init(void);
+extern int arch_dup_task_struct(struct task_struct *dst, struct task_struct *src);
+extern void arch_release_task_struct(struct task_struct *tsk);
+extern void arch_setup_new_exec(void);
+# 60 "./include/linux/thread_info.h" 2
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long set_restart_fn(struct restart_block *restart,
+     long (*fn)(struct restart_block *))
+{
+ restart->fn = fn;
+ do { } while (0);
+ return -516;
+}
+# 86 "./include/linux/thread_info.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_ti_thread_flag(struct thread_info *ti, int flag)
+{
+ set_bit(flag, (unsigned long *)&ti->flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_ti_thread_flag(struct thread_info *ti, int flag)
+{
+ clear_bit(flag, (unsigned long *)&ti->flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_ti_thread_flag(struct thread_info *ti, int flag,
+      bool value)
+{
+ if (value)
+  set_ti_thread_flag(ti, flag);
+ else
+  clear_ti_thread_flag(ti, flag);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
+{
+ return test_and_set_bit(flag, (unsigned long *)&ti->flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
+{
+ return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_ti_thread_flag(struct thread_info *ti, int flag)
+{
+ return test_bit(flag, (unsigned long *)&ti->flags);
+}
+# 187 "./include/linux/thread_info.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void check_object_size(const void *ptr, unsigned long n,
+         bool to_user)
+{ }
+
+
+extern void __attribute__((__error__("copy source size is too small")))
+__bad_copy_from(void);
+extern void __attribute__((__error__("copy destination size is too small")))
+__bad_copy_to(void);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void copy_overflow(int size, unsigned long count)
+{
+ ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("Buffer overflow detected (%d < %lu)!\n", size, count); do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/thread_info.h"), "i" (199), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (39)); }); do { } while(0); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) bool
+check_copy_size(const void *addr, size_t bytes, bool is_source)
+{
+ int sz = __builtin_object_size(addr, 0);
+ if (__builtin_expect(!!(sz >= 0 && sz < bytes), 0)) {
+  if (!__builtin_constant_p(bytes))
+   copy_overflow(sz, bytes);
+  else if (is_source)
+   __bad_copy_from();
+  else
+   __bad_copy_to();
+  return false;
+ }
+ if (({ int __ret_warn_on = !!(bytes > ((int)(~0U >> 1))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/thread_info.h"), "i" (215), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (40)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
+  return false;
+ check_object_size(addr, bytes, is_source);
+ return true;
+}
+# 8 "./arch/x86/include/asm/preempt.h" 2
+
+
+extern __attribute__((section(".data" ""))) __typeof__(int) __preempt_count;
+# 25 "./arch/x86/include/asm/preempt.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int preempt_count(void)
+{
+ return ({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__preempt_count)); (typeof(__preempt_count))(unsigned long) pfo_val__; }) & ~0x80000000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void preempt_count_set(int pc)
+{
+ int old, new;
+
+ do {
+  old = ({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__preempt_count)); (typeof(__preempt_count))(unsigned long) pfo_val__; });
+  new = (old & 0x80000000) |
+   (pc & ~0x80000000);
+ } while (({ u32 pco_old__ = ((u32)(((unsigned long) old) & 0xffffffff)); u32 pco_new__ = ((u32)(((unsigned long) new) & 0xffffffff)); asm ("cmpxchg" "l " "%[nval]" ", " "" "%" "[var]" : [oval] "+a" (pco_old__), [var] "+m" (__preempt_count) : [nval] "r" (pco_new__) : "memory"); (typeof(__preempt_count))(unsigned long) pco_old__; }) != old);
+}
+# 59 "./arch/x86/include/asm/preempt.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void set_preempt_need_resched(void)
+{
+ do { u32 pto_val__ = ((u32)(((unsigned long) ~0x80000000) & 0xffffffff)); if (0) { typeof((__preempt_count)) pto_tmp__; pto_tmp__ = (~0x80000000); (void)pto_tmp__; } asm ("and" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__preempt_count)) : [val] "ri" (pto_val__)); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void clear_preempt_need_resched(void)
+{
+ do { u32 pto_val__ = ((u32)(((unsigned long) 0x80000000) & 0xffffffff)); if (0) { typeof((__preempt_count)) pto_tmp__; pto_tmp__ = (0x80000000); (void)pto_tmp__; } asm ("or" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__preempt_count)) : [val] "ri" (pto_val__)); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool test_preempt_need_resched(void)
+{
+ return !(({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__preempt_count)); (typeof(__preempt_count))(unsigned long) pfo_val__; }) & 0x80000000);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __preempt_count_add(int val)
+{
+ do { const int pao_ID__ = (__builtin_constant_p(val) && ((val) == 1 || (val) == -1)) ? (int)(val) : 0; if (0) { typeof((__preempt_count)) pao_tmp__; pao_tmp__ = (val); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "l " "" "%" "[var]" : [var] "+m" ((__preempt_count))); }); else if (pao_ID__ == -1) ({ asm ("dec" "l " "" "%" "[var]" : [var] "+m" ((__preempt_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) val) & 0xffffffff)); if (0) { typeof((__preempt_count)) pto_tmp__; pto_tmp__ = (val); (void)pto_tmp__; } asm ("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__preempt_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __preempt_count_sub(int val)
+{
+ do { const int pao_ID__ = (__builtin_constant_p(-val) && ((-val) == 1 || (-val) == -1)) ? (int)(-val) : 0; if (0) { typeof((__preempt_count)) pao_tmp__; pao_tmp__ = (-val); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm ("inc" "l " "" "%" "[var]" : [var] "+m" ((__preempt_count))); }); else if (pao_ID__ == -1) ({ asm ("dec" "l " "" "%" "[var]" : [var] "+m" ((__preempt_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) -val) & 0xffffffff)); if (0) { typeof((__preempt_count)) pto_tmp__; pto_tmp__ = (-val); (void)pto_tmp__; } asm ("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((__preempt_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __preempt_count_dec_and_test(void)
+{
+ return ({ bool c; asm volatile ("decl" " " "" "%" "[var]" "\n\t/* output condition code " "e" "*/\n" : [var] "+m" (__preempt_count), "=@cc" "e" (c) : : "memory"); c; });
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool should_resched(int preempt_offset)
+{
+ return __builtin_expect(!!(({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (__preempt_count)); (typeof(__preempt_count))(unsigned long) pfo_val__; }) == preempt_offset), 0);
+}
+# 79 "./include/linux/preempt.h" 2
+# 389 "./include/linux/preempt.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void migrate_disable(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void migrate_enable(void) { }
+# 7 "./include/linux/percpu.h" 2
+# 65 "./include/linux/percpu.h"
+extern void *pcpu_base_addr;
+extern const unsigned long *pcpu_unit_offsets;
+
+struct pcpu_group_info {
+ int nr_units;
+ unsigned long base_offset;
+ unsigned int *cpu_map;
+
+};
+
+struct pcpu_alloc_info {
+ size_t static_size;
+ size_t reserved_size;
+ size_t dyn_size;
+ size_t unit_size;
+ size_t atom_size;
+ size_t alloc_size;
+ size_t __ai_size;
+ int nr_groups;
+ struct pcpu_group_info groups[];
+};
+
+enum pcpu_fc {
+ PCPU_FC_AUTO,
+ PCPU_FC_EMBED,
+ PCPU_FC_PAGE,
+
+ PCPU_FC_NR,
+};
+extern const char * const pcpu_fc_names[PCPU_FC_NR];
+
+extern enum pcpu_fc pcpu_chosen_fc;
+
+typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
+         size_t align);
+typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
+typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
+typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);
+
+extern struct pcpu_alloc_info * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_alloc_alloc_info(int nr_groups,
+            int nr_units);
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);
+
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,
+      void *base_addr);
+
+
+extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,
+    size_t atom_size,
+    pcpu_fc_cpu_distance_fn_t cpu_distance_fn,
+    pcpu_fc_alloc_fn_t alloc_fn,
+    pcpu_fc_free_fn_t free_fn);
+
+
+
+extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_page_first_chunk(size_t reserved_size,
+    pcpu_fc_alloc_fn_t alloc_fn,
+    pcpu_fc_free_fn_t free_fn,
+    pcpu_fc_populate_pte_fn_t populate_pte_fn);
+
+
+extern void *__alloc_reserved_percpu(size_t size, size_t align);
+extern bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr);
+extern bool is_kernel_percpu_address(unsigned long addr);
+
+
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_per_cpu_areas(void);
+
+
+extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp);
+extern void *__alloc_percpu(size_t size, size_t align);
+extern void free_percpu(void *__pdata);
+extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
+# 146 "./include/linux/percpu.h"
+extern unsigned long pcpu_nr_pages(void);
+# 15 "./include/linux/radix-tree.h" 2
+
+# 1 "./include/linux/rcupdate.h" 1
+# 28 "./include/linux/rcupdate.h"
+# 1 "./include/linux/bottom_half.h" 1
+
+
+
+
+
+
+
+extern void __local_bh_disable_ip(unsigned long ip, unsigned int cnt);
+# 17 "./include/linux/bottom_half.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_bh_disable(void)
+{
+ __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
+}
+
+extern void _local_bh_enable(void);
+extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_bh_enable_ip(unsigned long ip)
+{
+ __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_bh_enable(void)
+{
+ __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
+}
+# 29 "./include/linux/rcupdate.h" 2
+# 40 "./include/linux/rcupdate.h"
+void call_rcu(struct callback_head *head, rcu_callback_t func);
+void rcu_barrier_tasks(void);
+void rcu_barrier_tasks_rude(void);
+void synchronize_rcu(void);
+# 66 "./include/linux/rcupdate.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __rcu_read_lock(void)
+{
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __rcu_read_unlock(void)
+{
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+ do { } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rcu_preempt_depth(void)
+{
+ return 0;
+}
+
+
+
+
+void rcu_init(void);
+extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
+void rcu_sched_clock_irq(int user);
+void rcu_report_dead(unsigned int cpu);
+void rcutree_migrate_callbacks(int cpu);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_init_tasks_generic(void) { }
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_sysrq_start(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_sysrq_end(void) { }
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_user_enter(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_user_exit(void) { }
+# 119 "./include/linux/rcupdate.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_init_nohz(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rcu_nocb_cpu_offload(int cpu) { return -22; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rcu_nocb_cpu_deoffload(int cpu) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_nocb_flush_deferred_wakeup(void) { }
+# 202 "./include/linux/rcupdate.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exit_tasks_rcu_start(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exit_tasks_rcu_finish(void) { }
+# 227 "./include/linux/rcupdate.h"
+# 1 "./include/linux/rcutiny.h" 1
+# 15 "./include/linux/rcutiny.h"
+# 1 "./arch/x86/include/generated/uapi/asm/param.h" 1
+# 16 "./include/linux/rcutiny.h" 2
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool rcu_eqs_special_set(int cpu) { return false; }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_state_synchronize_rcu(void)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cond_synchronize_rcu(unsigned long oldstate)
+{
+ do { do { } while (0); } while (0);
+}
+
+extern void rcu_barrier(void);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void synchronize_rcu_expedited(void)
+{
+ synchronize_rcu();
+}
+
+
+
+
+
+
+
+extern void kvfree(const void *addr);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvfree_call_rcu(struct callback_head *head, rcu_callback_t func)
+{
+ if (head) {
+  call_rcu(head, func);
+  return;
+ }
+
+
+ do { do { } while (0); } while (0);
+ synchronize_rcu();
+ kvfree((void *) func);
+}
+
+void rcu_qs(void);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_softirq_qs(void)
+{
+ rcu_qs();
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rcu_needs_cpu(u64 basemono, u64 *nextevt)
+{
+ *nextevt = ((s64)~((u64)1 << 63));
+ return 0;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_virt_note_context_switch(int cpu) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_cpu_stall_reset(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rcu_jiffies_till_stall_check(void) { return 21 * 250; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_idle_enter(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_idle_exit(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_irq_enter(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_irq_exit_irqson(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_irq_enter_irqson(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_irq_exit(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_irq_exit_preempt(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_irq_exit_check_preempt(void) { }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exit_rcu(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool rcu_preempt_need_deferred_qs(struct task_struct *t)
+{
+ return false;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_preempt_deferred_qs(struct task_struct *t) { }
+
+void rcu_scheduler_starting(void);
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_end_inkernel_boot(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool rcu_inkernel_boot_has_ended(void) { return true; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool rcu_is_watching(void) { return true; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_momentary_dyntick_idle(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kfree_rcu_scheduler_running(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool rcu_gp_might_be_stalled(void) { return false; }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_all_qs(void) { __asm__ __volatile__("": : :"memory"); }
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_cpu_starting(unsigned int cpu) { }
+# 228 "./include/linux/rcupdate.h" 2
+# 241 "./include/linux/rcupdate.h"
+void init_rcu_head(struct callback_head *head);
+void destroy_rcu_head(struct callback_head *head);
+void init_rcu_head_on_stack(struct callback_head *head);
+void destroy_rcu_head_on_stack(struct callback_head *head);
+# 255 "./include/linux/rcupdate.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool rcu_lockdep_current_cpu_online(void) { return true; }
+
+
+extern struct lockdep_map rcu_lock_map;
+extern struct lockdep_map rcu_bh_lock_map;
+extern struct lockdep_map rcu_sched_lock_map;
+extern struct lockdep_map rcu_callback_map;
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_lock_acquire(struct lockdep_map *map)
+{
+ lock_acquire(map, 0, 0, 2, 0, ((void *)0), ({ __label__ __here; __here: (unsigned long)&&__here; }));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_lock_release(struct lockdep_map *map)
+{
+ lock_release(map, ({ __label__ __here; __here: (unsigned long)&&__here; }));
+}
+
+int debug_lockdep_rcu_enabled(void);
+int rcu_read_lock_held(void);
+int rcu_read_lock_bh_held(void);
+int rcu_read_lock_sched_held(void);
+int rcu_read_lock_any_held(void);
+# 325 "./include/linux/rcupdate.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_preempt_sleep_check(void)
+{
+ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (lock_is_held(&rcu_lock_map))) { __warned = true; lockdep_rcu_suspicious("include/linux/rcupdate.h", 327, "Illegal context switch in RCU read-side critical section"); } } while (0)
+                                                               ;
+}
+# 652 "./include/linux/rcupdate.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void rcu_read_lock(void)
+{
+ __rcu_read_lock();
+ (void)0;
+ rcu_lock_acquire(&rcu_lock_map);
+ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("include/linux/rcupdate.h", 657, "rcu_read_lock() used illegally while idle"); } } while (0)
+                                                ;
+}
+# 704 "./include/linux/rcupdate.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_read_unlock(void)
+{
+ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("include/linux/rcupdate.h", 706, "rcu_read_unlock() used illegally while idle"); } } while (0)
+                                                  ;
+ (void)0;
+ __rcu_read_unlock();
+ rcu_lock_release(&rcu_lock_map);
+}
+# 725 "./include/linux/rcupdate.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_read_lock_bh(void)
+{
+ local_bh_disable();
+ (void)0;
+ rcu_lock_acquire(&rcu_bh_lock_map);
+ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("include/linux/rcupdate.h", 730, "rcu_read_lock_bh() used illegally while idle"); } } while (0)
+                                                   ;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_read_unlock_bh(void)
+{
+ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("include/linux/rcupdate.h", 741, "rcu_read_unlock_bh() used illegally while idle"); } } while (0)
+                                                     ;
+ rcu_lock_release(&rcu_bh_lock_map);
+ (void)0;
+ local_bh_enable();
+}
+# 760 "./include/linux/rcupdate.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_read_lock_sched(void)
+{
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ (void)0;
+ rcu_lock_acquire(&rcu_sched_lock_map);
+ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("include/linux/rcupdate.h", 765, "rcu_read_lock_sched() used illegally while idle"); } } while (0)
+                                                      ;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void rcu_read_lock_sched_notrace(void)
+{
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ (void)0;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_read_unlock_sched(void)
+{
+ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_is_watching())) { __warned = true; lockdep_rcu_suspicious("include/linux/rcupdate.h", 783, "rcu_read_unlock_sched() used illegally while idle"); } } while (0)
+                                                        ;
+ rcu_lock_release(&rcu_sched_lock_map);
+ (void)0;
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void rcu_read_unlock_sched_notrace(void)
+{
+ (void)0;
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+# 960 "./include/linux/rcupdate.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_head_init(struct callback_head *rhp)
+{
+ rhp->func = (rcu_callback_t)~0L;
+}
+# 978 "./include/linux/rcupdate.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
+rcu_head_after_call_rcu(struct callback_head *rhp, rcu_callback_t f)
+{
+ rcu_callback_t func = ({ do { extern void __compiletime_assert_41(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(rhp->func) == sizeof(char) || sizeof(rhp->func) == sizeof(short) || sizeof(rhp->func) == sizeof(int) || sizeof(rhp->func) == sizeof(long)) || sizeof(rhp->func) == sizeof(long long))) __compiletime_assert_41(); } while (0); (*(const volatile typeof( _Generic((rhp->func), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rhp->func))) *)&(rhp->func)); });
+
+ if (func == f)
+  return true;
+ ({ int __ret_warn_on = !!(func != (rcu_callback_t)~0L); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/rcupdate.h"), "i" (985), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (42)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ return false;
+}
+
+
+extern int rcu_expedited;
+extern int rcu_normal;
+# 17 "./include/linux/radix-tree.h" 2
+# 1 "./include/linux/spinlock.h" 1
+# 61 "./include/linux/spinlock.h"
+# 1 "./arch/x86/include/generated/asm/mmiowb.h" 1
+# 1 "./include/asm-generic/mmiowb.h" 1
+# 2 "./arch/x86/include/generated/asm/mmiowb.h" 2
+# 62 "./include/linux/spinlock.h" 2
+# 92 "./include/linux/spinlock.h"
+# 1 "./include/linux/spinlock_up.h" 1
+# 29 "./include/linux/spinlock_up.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_spin_lock(arch_spinlock_t *lock)
+{
+ lock->slock = 0;
+ __asm__ __volatile__("": : :"memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_spin_trylock(arch_spinlock_t *lock)
+{
+ char oldval = lock->slock;
+
+ lock->slock = 0;
+ __asm__ __volatile__("": : :"memory");
+
+ return oldval > 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_spin_unlock(arch_spinlock_t *lock)
+{
+ __asm__ __volatile__("": : :"memory");
+ lock->slock = 1;
+}
+# 93 "./include/linux/spinlock.h" 2
+
+
+
+  extern void __raw_spin_lock_init(raw_spinlock_t *lock, const char *name,
+       struct lock_class_key *key, short inner);
+# 175 "./include/linux/spinlock.h"
+ extern void do_raw_spin_lock(raw_spinlock_t *lock) ;
+
+ extern int do_raw_spin_trylock(raw_spinlock_t *lock);
+ extern void do_raw_spin_unlock(raw_spinlock_t *lock) ;
+# 312 "./include/linux/spinlock.h"
+# 1 "./include/linux/rwlock.h" 1
+# 18 "./include/linux/rwlock.h"
+  extern void __rwlock_init(rwlock_t *lock, const char *name,
+       struct lock_class_key *key);
+# 32 "./include/linux/rwlock.h"
+ extern void do_raw_read_lock(rwlock_t *lock) ;
+
+ extern int do_raw_read_trylock(rwlock_t *lock);
+ extern void do_raw_read_unlock(rwlock_t *lock) ;
+ extern void do_raw_write_lock(rwlock_t *lock) ;
+
+ extern int do_raw_write_trylock(rwlock_t *lock);
+ extern void do_raw_write_unlock(rwlock_t *lock) ;
+# 313 "./include/linux/spinlock.h" 2
+
+
+
+
+
+# 1 "./include/linux/spinlock_api_smp.h" 1
+# 18 "./include/linux/spinlock_api_smp.h"
+int in_lock_functions(unsigned long addr);
+
+
+
+void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
+        ;
+void __attribute__((__section__(".spinlock.text")))
+_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
+        ;
+void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
+        ;
+
+unsigned long __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
+        ;
+unsigned long __attribute__((__section__(".spinlock.text")))
+_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
+        ;
+int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
+int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
+void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text")))
+_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
+        ;
+# 86 "./include/linux/spinlock_api_smp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __raw_spin_trylock(raw_spinlock_t *lock)
+{
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ if (do_raw_spin_trylock(lock)) {
+  lock_acquire(&lock->dep_map, 0, 1, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+  return 1;
+ }
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+ return 0;
+}
+# 104 "./include/linux/spinlock_api_smp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
+{
+ unsigned long flags;
+
+ do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); if (!({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) trace_hardirqs_off(); } while (0);
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+
+
+
+
+
+
+ do_raw_spin_lock(lock);
+
+
+
+ return flags;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_lock_irq(raw_spinlock_t *lock)
+{
+ do { bool was_disabled = (arch_irqs_disabled()); arch_local_irq_disable(); if (!was_disabled) trace_hardirqs_off(); } while (0);
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+ do_raw_spin_lock(lock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_lock_bh(raw_spinlock_t *lock)
+{
+ __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
+ lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+ do_raw_spin_lock(lock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_lock(raw_spinlock_t *lock)
+{
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+ do_raw_spin_lock(lock);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_unlock(raw_spinlock_t *lock)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_spin_unlock(lock);
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
+         unsigned long flags)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_spin_unlock(lock);
+ do { if (!({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) trace_hardirqs_on(); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_unlock_irq(raw_spinlock_t *lock)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_spin_unlock(lock);
+ do { trace_hardirqs_on(); arch_local_irq_enable(); } while (0);
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_spin_unlock_bh(raw_spinlock_t *lock)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_spin_unlock(lock);
+ __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __raw_spin_trylock_bh(raw_spinlock_t *lock)
+{
+ __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
+ if (do_raw_spin_trylock(lock)) {
+  lock_acquire(&lock->dep_map, 0, 1, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+  return 1;
+ }
+ __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
+ return 0;
+}
+
+# 1 "./include/linux/rwlock_api_smp.h" 1
+# 18 "./include/linux/rwlock_api_smp.h"
+void __attribute__((__section__(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
+unsigned long __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
+       ;
+unsigned long __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
+       ;
+int __attribute__((__section__(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
+int __attribute__((__section__(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
+void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
+void __attribute__((__section__(".spinlock.text")))
+_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
+       ;
+void __attribute__((__section__(".spinlock.text")))
+_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
+       ;
+# 117 "./include/linux/rwlock_api_smp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __raw_read_trylock(rwlock_t *lock)
+{
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ if (do_raw_read_trylock(lock)) {
+  do { if (read_lock_is_recursive()) lock_acquire(&lock->dep_map, 0, 1, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); else lock_acquire(&lock->dep_map, 0, 1, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); } while (0);
+  return 1;
+ }
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __raw_write_trylock(rwlock_t *lock)
+{
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ if (do_raw_write_trylock(lock)) {
+  lock_acquire(&lock->dep_map, 0, 1, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+  return 1;
+ }
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+ return 0;
+}
+# 146 "./include/linux/rwlock_api_smp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_lock(rwlock_t *lock)
+{
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ do { if (read_lock_is_recursive()) lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); else lock_acquire(&lock->dep_map, 0, 0, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); } while (0);
+ do_raw_read_lock(lock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
+{
+ unsigned long flags;
+
+ do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); if (!({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) trace_hardirqs_off(); } while (0);
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ do { if (read_lock_is_recursive()) lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); else lock_acquire(&lock->dep_map, 0, 0, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); } while (0);
+ (do_raw_read_lock)((lock))
+                                       ;
+ return flags;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_lock_irq(rwlock_t *lock)
+{
+ do { bool was_disabled = (arch_irqs_disabled()); arch_local_irq_disable(); if (!was_disabled) trace_hardirqs_off(); } while (0);
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ do { if (read_lock_is_recursive()) lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); else lock_acquire(&lock->dep_map, 0, 0, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); } while (0);
+ do_raw_read_lock(lock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_lock_bh(rwlock_t *lock)
+{
+ __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
+ do { if (read_lock_is_recursive()) lock_acquire(&lock->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); else lock_acquire(&lock->dep_map, 0, 0, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0)); } while (0);
+ do_raw_read_lock(lock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
+{
+ unsigned long flags;
+
+ do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); if (!({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) trace_hardirqs_off(); } while (0);
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+ (do_raw_write_lock)((lock))
+                                        ;
+ return flags;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_lock_irq(rwlock_t *lock)
+{
+ do { bool was_disabled = (arch_irqs_disabled()); arch_local_irq_disable(); if (!was_disabled) trace_hardirqs_off(); } while (0);
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+ do_raw_write_lock(lock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_lock_bh(rwlock_t *lock)
+{
+ __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
+ lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+ do_raw_write_lock(lock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_lock(rwlock_t *lock)
+{
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ lock_acquire(&lock->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+ do_raw_write_lock(lock);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_unlock(rwlock_t *lock)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_write_unlock(lock);
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_unlock(rwlock_t *lock)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_read_unlock(lock);
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_read_unlock(lock);
+ do { if (!({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) trace_hardirqs_on(); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_unlock_irq(rwlock_t *lock)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_read_unlock(lock);
+ do { trace_hardirqs_on(); arch_local_irq_enable(); } while (0);
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_read_unlock_bh(rwlock_t *lock)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_read_unlock(lock);
+ __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_unlock_irqrestore(rwlock_t *lock,
+          unsigned long flags)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_write_unlock(lock);
+ do { if (!({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) trace_hardirqs_on(); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_unlock_irq(rwlock_t *lock)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_write_unlock(lock);
+ do { trace_hardirqs_on(); arch_local_irq_enable(); } while (0);
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __raw_write_unlock_bh(rwlock_t *lock)
+{
+ lock_release(&lock->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_write_unlock(lock);
+ __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
+}
+# 191 "./include/linux/spinlock_api_smp.h" 2
+# 319 "./include/linux/spinlock.h" 2
+# 327 "./include/linux/spinlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) raw_spinlock_t *spinlock_check(spinlock_t *lock)
+{
+ return &lock->rlock;
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __spin_lock_init(spinlock_t *lock, const char *name,
+        struct lock_class_key *key)
+{
+ __raw_spin_lock_init(spinlock_check(lock), name, key, LD_WAIT_CONFIG);
+}
+# 357 "./include/linux/spinlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_lock(spinlock_t *lock)
+{
+ _raw_spin_lock(&lock->rlock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_lock_bh(spinlock_t *lock)
+{
+ _raw_spin_lock_bh(&lock->rlock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int spin_trylock(spinlock_t *lock)
+{
+ return (_raw_spin_trylock(&lock->rlock));
+}
+# 382 "./include/linux/spinlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_lock_irq(spinlock_t *lock)
+{
+ _raw_spin_lock_irq(&lock->rlock);
+}
+# 397 "./include/linux/spinlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_unlock(spinlock_t *lock)
+{
+ _raw_spin_unlock(&lock->rlock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_unlock_bh(spinlock_t *lock)
+{
+ _raw_spin_unlock_bh(&lock->rlock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_unlock_irq(spinlock_t *lock)
+{
+ _raw_spin_unlock_irq(&lock->rlock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
+{
+ do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&lock->rlock, flags); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int spin_trylock_bh(spinlock_t *lock)
+{
+ return (_raw_spin_trylock_bh(&lock->rlock));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int spin_trylock_irq(spinlock_t *lock)
+{
+ return ({ do { bool was_disabled = (arch_irqs_disabled()); arch_local_irq_disable(); if (!was_disabled) trace_hardirqs_off(); } while (0); (_raw_spin_trylock(&lock->rlock)) ? 1 : ({ do { trace_hardirqs_on(); arch_local_irq_enable(); } while (0); 0; }); });
+}
+# 450 "./include/linux/spinlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int spin_is_locked(spinlock_t *lock)
+{
+ return ((&(&lock->rlock)->raw_lock)->slock == 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int spin_is_contended(spinlock_t *lock)
+{
+ return (((void)(&(&lock->rlock)->raw_lock), 0));
+}
+# 475 "./include/linux/spinlock.h"
+extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);
+
+
+
+extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock,
+     unsigned long *flags);
+
+
+
+int __alloc_bucket_spinlocks(spinlock_t **locks, unsigned int *lock_mask,
+        size_t max_size, unsigned int cpu_mult,
+        gfp_t gfp, const char *name,
+        struct lock_class_key *key);
+# 499 "./include/linux/spinlock.h"
+void free_bucket_spinlocks(spinlock_t *locks);
+# 18 "./include/linux/radix-tree.h" 2
+
+# 1 "./include/linux/xarray.h" 1
+# 14 "./include/linux/xarray.h"
+# 1 "./include/linux/gfp.h" 1
+
+
+
+
+
+# 1 "./include/linux/mmzone.h" 1
+# 10 "./include/linux/mmzone.h"
+# 1 "./include/linux/wait.h" 1
+# 12 "./include/linux/wait.h"
+# 1 "./include/uapi/linux/wait.h" 1
+# 13 "./include/linux/wait.h" 2
+
+typedef struct wait_queue_entry wait_queue_entry_t;
+
+typedef int (*wait_queue_func_t)(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
+int default_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
+# 30 "./include/linux/wait.h"
+struct wait_queue_entry {
+ unsigned int flags;
+ void *private;
+ wait_queue_func_t func;
+ struct list_head entry;
+};
+
+struct wait_queue_head {
+ spinlock_t lock;
+ struct list_head head;
+};
+typedef struct wait_queue_head wait_queue_head_t;
+
+struct task_struct;
+# 64 "./include/linux/wait.h"
+extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *name, struct lock_class_key *);
+# 82 "./include/linux/wait.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
+{
+ wq_entry->flags = 0;
+ wq_entry->private = p;
+ wq_entry->func = default_wake_function;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+init_waitqueue_func_entry(struct wait_queue_entry *wq_entry, wait_queue_func_t func)
+{
+ wq_entry->flags = 0;
+ wq_entry->private = ((void *)0);
+ wq_entry->func = func;
+}
+# 127 "./include/linux/wait.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int waitqueue_active(struct wait_queue_head *wq_head)
+{
+ return !list_empty(&wq_head->head);
+}
+# 140 "./include/linux/wait.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool wq_has_single_sleeper(struct wait_queue_head *wq_head)
+{
+ return list_is_singular(&wq_head->head);
+}
+# 153 "./include/linux/wait.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool wq_has_sleeper(struct wait_queue_head *wq_head)
+{
+
+
+
+
+
+
+
+ __asm__ __volatile__("": : :"memory");
+ return waitqueue_active(wq_head);
+}
+
+extern void add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
+extern void add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
+extern void add_wait_queue_priority(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
+extern void remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
+{
+ struct list_head *head = &wq_head->head;
+ struct wait_queue_entry *wq;
+
+ for (wq = ({ void *__mptr = (void *)((&wq_head->head)->next); do { extern void __compiletime_assert_43(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((&wq_head->head)->next)), typeof(((typeof(*wq) *)0)->entry)) && !__builtin_types_compatible_p(typeof(*((&wq_head->head)->next)), typeof(void))))) __compiletime_assert_43(); } while (0); ((typeof(*wq) *)(__mptr - __builtin_offsetof(typeof(*wq), entry))); }); !(&wq->entry == (&wq_head->head)); wq = ({ void *__mptr = (void *)((wq)->entry.next); do { extern void __compiletime_assert_44(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*((wq)->entry.next)), typeof(((typeof(*(wq)) *)0)->entry)) && !__builtin_types_compatible_p(typeof(*((wq)->entry.next)), typeof(void))))) __compiletime_assert_44(); } while (0); ((typeof(*(wq)) *)(__mptr - __builtin_offsetof(typeof(*(wq)), entry))); })) {
+  if (!(wq->flags & 0x20))
+   break;
+  head = &wq->entry;
+ }
+ list_add(&wq_entry->entry, head);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+__add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
+{
+ wq_entry->flags |= 0x01;
+ __add_wait_queue(wq_head, wq_entry);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __add_wait_queue_entry_tail(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
+{
+ list_add_tail(&wq_entry->entry, &wq_head->head);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+__add_wait_queue_entry_tail_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
+{
+ wq_entry->flags |= 0x01;
+ __add_wait_queue_entry_tail(wq_head, wq_entry);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+__remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
+{
+ list_del(&wq_entry->entry);
+}
+
+void __wake_up(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
+void __wake_up_locked_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
+void __wake_up_locked_key_bookmark(struct wait_queue_head *wq_head,
+  unsigned int mode, void *key, wait_queue_entry_t *bookmark);
+void __wake_up_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
+void __wake_up_locked_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
+void __wake_up_locked(struct wait_queue_head *wq_head, unsigned int mode, int nr);
+void __wake_up_sync(struct wait_queue_head *wq_head, unsigned int mode);
+# 260 "./include/linux/wait.h"
+extern void init_wait_entry(struct wait_queue_entry *wq_entry, int flags);
+# 744 "./include/linux/wait.h"
+extern int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
+extern int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
+# 1138 "./include/linux/wait.h"
+void prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
+void prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
+long prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
+void finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
+long wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout);
+int woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
+int autoremove_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
+# 1163 "./include/linux/wait.h"
+bool try_invoke_on_locked_down_task(struct task_struct *p, bool (*func)(struct task_struct *t, void *arg), void *arg);
+# 11 "./include/linux/mmzone.h" 2
+
+
+
+# 1 "./include/linux/numa.h" 1
+# 47 "./include/linux/numa.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int numa_map_to_online_node(int node)
+{
+ return (-1);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int memory_add_physaddr_to_nid(u64 start)
+{
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int phys_to_target_node(u64 start)
+{
+ return 0;
+}
+# 15 "./include/linux/mmzone.h" 2
+
+# 1 "./include/linux/seqlock.h" 1
+# 20 "./include/linux/seqlock.h"
+# 1 "./include/linux/ww_mutex.h" 1
+# 22 "./include/linux/ww_mutex.h"
+struct ww_class {
+ atomic_long_t stamp;
+ struct lock_class_key acquire_key;
+ struct lock_class_key mutex_key;
+ const char *acquire_name;
+ const char *mutex_name;
+ unsigned int is_wait_die;
+};
+
+struct ww_acquire_ctx {
+ struct task_struct *task;
+ unsigned long stamp;
+ unsigned int acquired;
+ unsigned short wounded;
+ unsigned short is_wait_die;
+
+ unsigned int done_acquire;
+ struct ww_class *ww_class;
+ struct ww_mutex *contending_lock;
+
+
+ struct lockdep_map dep_map;
+
+
+ unsigned int deadlock_inject_interval;
+ unsigned int deadlock_inject_countdown;
+
+};
+# 87 "./include/linux/ww_mutex.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ww_mutex_init(struct ww_mutex *lock,
+     struct ww_class *ww_class)
+{
+ __mutex_init(&lock->base, ww_class->mutex_name, &ww_class->mutex_key);
+ lock->ctx = ((void *)0);
+
+ lock->ww_class = ww_class;
+
+}
+# 121 "./include/linux/ww_mutex.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ww_acquire_init(struct ww_acquire_ctx *ctx,
+       struct ww_class *ww_class)
+{
+ ctx->task = get_current();
+ ctx->stamp = atomic_long_inc_return_relaxed(&ww_class->stamp);
+ ctx->acquired = 0;
+ ctx->wounded = false;
+ ctx->is_wait_die = ww_class->is_wait_die;
+
+ ctx->ww_class = ww_class;
+ ctx->done_acquire = 0;
+ ctx->contending_lock = ((void *)0);
+
+
+ debug_check_no_locks_freed((void *)ctx, sizeof(*ctx));
+ lockdep_init_map(&ctx->dep_map, ww_class->acquire_name,
+    &ww_class->acquire_key, 0);
+ lock_acquire(&ctx->dep_map, 0, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+
+
+ ctx->deadlock_inject_interval = 1;
+ ctx->deadlock_inject_countdown = ctx->stamp & 0xf;
+
+}
+# 157 "./include/linux/ww_mutex.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ww_acquire_done(struct ww_acquire_ctx *ctx)
+{
+
+ do { ({ int __ret_warn_on = !!(debug_locks && !lock_is_held(&(ctx)->dep_map)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/ww_mutex.h"), "i" (160), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (45)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);
+
+ ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(ctx->done_acquire), 0)) { if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("DEBUG_LOCKS_WARN_ON(%s)", "ctx->done_acquire"); do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/ww_mutex.h"), "i" (162), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (46)); }); do { } while(0); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); __ret = 1; } __ret; });
+ ctx->done_acquire = 1;
+
+}
+# 174 "./include/linux/ww_mutex.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ww_acquire_fini(struct ww_acquire_ctx *ctx)
+{
+
+ lock_release(&ctx->dep_map, ({ __label__ __here; __here: (unsigned long)&&__here; }));
+
+
+ ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(ctx->acquired), 0)) { if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("DEBUG_LOCKS_WARN_ON(%s)", "ctx->acquired"); do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/ww_mutex.h"), "i" (180), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (47)); }); do { } while(0); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); __ret = 1; } __ret; });
+ if (!1)
+
+
+
+
+  ctx->done_acquire = 1;
+
+ if (!1)
+
+  ctx->acquired = ~0U;
+
+}
+# 223 "./include/linux/ww_mutex.h"
+extern int ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx);
+# 255 "./include/linux/ww_mutex.h"
+extern int __attribute__((__warn_unused_result__)) ww_mutex_lock_interruptible(struct ww_mutex *lock,
+          struct ww_acquire_ctx *ctx);
+# 281 "./include/linux/ww_mutex.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+ww_mutex_lock_slow(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
+{
+ int ret;
+
+ ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(!ctx->contending_lock), 0)) { if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("DEBUG_LOCKS_WARN_ON(%s)", "!ctx->contending_lock"); do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/ww_mutex.h"), "i" (286), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (48)); }); do { } while(0); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); __ret = 1; } __ret; });
+
+ ret = ww_mutex_lock(lock, ctx);
+ (void)ret;
+}
+# 317 "./include/linux/ww_mutex.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__))
+ww_mutex_lock_slow_interruptible(struct ww_mutex *lock,
+     struct ww_acquire_ctx *ctx)
+{
+
+ ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(!ctx->contending_lock), 0)) { if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("DEBUG_LOCKS_WARN_ON(%s)", "!ctx->contending_lock"); do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/ww_mutex.h"), "i" (322), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (49)); }); do { } while(0); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); __ret = 1; } __ret; });
+
+ return ww_mutex_lock_interruptible(lock, ctx);
+}
+
+extern void ww_mutex_unlock(struct ww_mutex *lock);
+# 336 "./include/linux/ww_mutex.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) ww_mutex_trylock(struct ww_mutex *lock)
+{
+ return mutex_trylock(&lock->base);
+}
+# 349 "./include/linux/ww_mutex.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ww_mutex_destroy(struct ww_mutex *lock)
+{
+ mutex_destroy(&lock->base);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ww_mutex_is_locked(struct ww_mutex *lock)
+{
+ return mutex_is_locked(&lock->base);
+}
+# 21 "./include/linux/seqlock.h" 2
+# 65 "./include/linux/seqlock.h"
+typedef struct seqcount {
+ unsigned sequence;
+
+ struct lockdep_map dep_map;
+
+} seqcount_t;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __seqcount_init(seqcount_t *s, const char *name,
+       struct lock_class_key *key)
+{
+
+
+
+ lockdep_init_map(&s->dep_map, name, key, 0);
+ s->sequence = 0;
+}
+# 97 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void seqcount_lockdep_reader_access(const seqcount_t *s)
+{
+ seqcount_t *l = (seqcount_t *)s;
+ unsigned long flags;
+
+ do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); if (!({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) trace_hardirqs_off(); } while (0);
+ lock_acquire(&l->dep_map, 0, 0, 2, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+ lock_release(&l->dep_map, (unsigned long)__builtin_return_address(0));
+ do { if (!({ ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(flags); })) trace_hardirqs_on(); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
+}
+# 254 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) seqcount_t *__seqprop_ptr(seqcount_t *s)
+{
+ return s;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned __seqprop_sequence(const seqcount_t *s)
+{
+ return ({ do { extern void __compiletime_assert_50(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_50(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __seqprop_preemptible(const seqcount_t *s)
+{
+ return false;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __seqprop_assert(const seqcount_t *s)
+{
+ do { ({ int __ret_warn_on = !!(1 && (debug_locks && !({ typeof(lockdep_recursion) pscr_ret__; do { const void *__vpp_verify = (typeof((&(lockdep_recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(lockdep_recursion)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm volatile ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (lockdep_recursion)); (typeof(lockdep_recursion))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm volatile ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (lockdep_recursion)); (typeof(lockdep_recursion))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm volatile ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (lockdep_recursion)); (typeof(lockdep_recursion))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm volatile ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (lockdep_recursion)); (typeof(lockdep_recursion))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; })) && (preempt_count() == 0 && ({ typeof(hardirqs_enabled) pscr_ret__; do { const void *__vpp_verify = (typeof((&(hardirqs_enabled)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(hardirqs_enabled)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm volatile ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (hardirqs_enabled)); (typeof(hardirqs_enabled))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm volatile ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (hardirqs_enabled)); (typeof(hardirqs_enabled))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm volatile ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (hardirqs_enabled)); (typeof(hardirqs_enabled))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm volatile ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (hardirqs_enabled)); (typeof(hardirqs_enabled))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/seqlock.h"), "i" (271), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (51)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);
+}
+
+
+
+typedef struct seqcount_raw_spinlock { seqcount_t seqcount; raw_spinlock_t *lock; } seqcount_raw_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) seqcount_t * __seqprop_raw_spinlock_ptr(seqcount_raw_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned __seqprop_raw_spinlock_sequence(const seqcount_raw_spinlock_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_52(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_52(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (false && __builtin_expect(!!(seq & 1), 0)) { _raw_spin_lock(s->lock); _raw_spin_unlock(s->lock); seq = ({ do { extern void __compiletime_assert_53(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_53(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __seqprop_raw_spinlock_preemptible(const seqcount_raw_spinlock_t *s) { if (!0) return false; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __seqprop_raw_spinlock_assert(const seqcount_raw_spinlock_t *s) { do { ({ int __ret_warn_on = !!(debug_locks && !lock_is_held(&(s->lock)->dep_map)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/seqlock.h"), "i" (276), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (54)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0); }
+typedef struct seqcount_spinlock { seqcount_t seqcount; spinlock_t *lock; } seqcount_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) seqcount_t * __seqprop_spinlock_ptr(seqcount_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned __seqprop_spinlock_sequence(const seqcount_spinlock_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_55(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_55(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { spin_lock(s->lock); spin_unlock(s->lock); seq = ({ do { extern void __compiletime_assert_56(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_56(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __seqprop_spinlock_preemptible(const seqcount_spinlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __seqprop_spinlock_assert(const seqcount_spinlock_t *s) { do { ({ int __ret_warn_on = !!(debug_locks && !lock_is_held(&(s->lock)->dep_map)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/seqlock.h"), "i" (277), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (57)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0); }
+typedef struct seqcount_rwlock { seqcount_t seqcount; rwlock_t *lock; } seqcount_rwlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) seqcount_t * __seqprop_rwlock_ptr(seqcount_rwlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned __seqprop_rwlock_sequence(const seqcount_rwlock_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_58(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_58(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { _raw_read_lock(s->lock); _raw_read_unlock(s->lock); seq = ({ do { extern void __compiletime_assert_59(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_59(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __seqprop_rwlock_preemptible(const seqcount_rwlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __seqprop_rwlock_assert(const seqcount_rwlock_t *s) { do { ({ int __ret_warn_on = !!(debug_locks && !lock_is_held(&(s->lock)->dep_map)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/seqlock.h"), "i" (278), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (60)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0); }
+typedef struct seqcount_mutex { seqcount_t seqcount; struct mutex *lock; } seqcount_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) seqcount_t * __seqprop_mutex_ptr(seqcount_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned __seqprop_mutex_sequence(const seqcount_mutex_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_61(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_61(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { mutex_lock_nested(s->lock, 0); mutex_unlock(s->lock); seq = ({ do { extern void __compiletime_assert_62(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_62(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __seqprop_mutex_preemptible(const seqcount_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __seqprop_mutex_assert(const seqcount_mutex_t *s) { do { ({ int __ret_warn_on = !!(debug_locks && !lock_is_held(&(s->lock)->dep_map)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/seqlock.h"), "i" (279), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (63)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0); }
+typedef struct seqcount_ww_mutex { seqcount_t seqcount; struct ww_mutex *lock; } seqcount_ww_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) seqcount_t * __seqprop_ww_mutex_ptr(seqcount_ww_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned __seqprop_ww_mutex_sequence(const seqcount_ww_mutex_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_64(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_64(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { ww_mutex_lock(s->lock, ((void *)0)); ww_mutex_unlock(s->lock); seq = ({ do { extern void __compiletime_assert_65(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_65(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool __seqprop_ww_mutex_preemptible(const seqcount_ww_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __seqprop_ww_mutex_assert(const seqcount_ww_mutex_t *s) { do { ({ int __ret_warn_on = !!(debug_locks && !lock_is_held(&(&s->lock->base)->dep_map)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/seqlock.h"), "i" (280), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (66)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0); }
+# 430 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int do___read_seqcount_retry(const seqcount_t *s, unsigned start)
+{
+ kcsan_atomic_next(0);
+ return __builtin_expect(!!(({ do { extern void __compiletime_assert_67(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_67(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); }) != start), 0);
+}
+# 450 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int do_read_seqcount_retry(const seqcount_t *s, unsigned start)
+{
+ __asm__ __volatile__("": : :"memory");
+ return do___read_seqcount_retry(s, start);
+}
+# 470 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_raw_write_seqcount_begin(seqcount_t *s)
+{
+ kcsan_nestable_atomic_begin();
+ s->sequence++;
+ __asm__ __volatile__("": : :"memory");
+}
+# 491 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_raw_write_seqcount_end(seqcount_t *s)
+{
+ __asm__ __volatile__("": : :"memory");
+ s->sequence++;
+ kcsan_nestable_atomic_end();
+}
+# 517 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_write_seqcount_begin_nested(seqcount_t *s, int subclass)
+{
+ do_raw_write_seqcount_begin(s);
+ lock_acquire(&s->dep_map, subclass, 0, 0, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+}
+# 543 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_write_seqcount_begin(seqcount_t *s)
+{
+ do_write_seqcount_begin_nested(s, 0);
+}
+# 563 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_write_seqcount_end(seqcount_t *s)
+{
+ lock_release(&s->dep_map, (unsigned long)__builtin_return_address(0));
+ do_raw_write_seqcount_end(s);
+}
+# 613 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_raw_write_seqcount_barrier(seqcount_t *s)
+{
+ kcsan_nestable_atomic_begin();
+ s->sequence++;
+ __asm__ __volatile__("": : :"memory");
+ s->sequence++;
+ kcsan_nestable_atomic_end();
+}
+# 633 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_write_seqcount_invalidate(seqcount_t *s)
+{
+ __asm__ __volatile__("": : :"memory");
+ kcsan_nestable_atomic_begin();
+ s->sequence+=2;
+ kcsan_nestable_atomic_end();
+}
+# 651 "./include/linux/seqlock.h"
+typedef struct {
+ seqcount_t seqcount;
+} seqcount_latch_t;
+# 680 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned raw_read_seqcount_latch(const seqcount_latch_t *s)
+{
+
+
+
+
+ return ({ do { extern void __compiletime_assert_68(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_68(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); });
+}
+# 696 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+read_seqcount_latch_retry(const seqcount_latch_t *s, unsigned start)
+{
+ return do_read_seqcount_retry(_Generic(*(&s->seqcount), seqcount_t: __seqprop_ptr((void *)(&s->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&s->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&s->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&s->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&s->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&s->seqcount)))), start);
+}
+# 783 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void raw_write_seqcount_latch(seqcount_latch_t *s)
+{
+ __asm__ __volatile__("": : :"memory");
+ s->seqcount.sequence++;
+ __asm__ __volatile__("": : :"memory");
+}
+# 800 "./include/linux/seqlock.h"
+typedef struct {
+
+
+
+
+ seqcount_spinlock_t seqcount;
+ spinlock_t lock;
+} seqlock_t;
+# 838 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned read_seqbegin(const seqlock_t *sl)
+{
+ unsigned ret = ({ seqcount_lockdep_reader_access(_Generic(*(&sl->seqcount), seqcount_t: __seqprop_ptr((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&sl->seqcount))))); ({ unsigned _seq = ({ unsigned __seq; while ((__seq = _Generic(*(&sl->seqcount), seqcount_t: __seqprop_sequence((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_sequence((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_sequence((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_sequence((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_sequence((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_sequence((void *)((&sl->seqcount))))) & 1) cpu_relax(); kcsan_atomic_next(1000); __seq; }); __asm__ __volatile__("": : :"memory"); _seq; }); });
+
+ kcsan_atomic_next(0);
+ kcsan_flat_atomic_begin();
+ return ret;
+}
+# 858 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned read_seqretry(const seqlock_t *sl, unsigned start)
+{
+
+
+
+
+ kcsan_flat_atomic_end();
+
+ return do_read_seqcount_retry(_Generic(*(&sl->seqcount), seqcount_t: __seqprop_ptr((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&sl->seqcount)))), start);
+}
+# 888 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_seqlock(seqlock_t *sl)
+{
+ spin_lock(&sl->lock);
+ do_write_seqcount_begin(&sl->seqcount.seqcount);
+}
+# 901 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_sequnlock(seqlock_t *sl)
+{
+ do_write_seqcount_end(&sl->seqcount.seqcount);
+ spin_unlock(&sl->lock);
+}
+# 914 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_seqlock_bh(seqlock_t *sl)
+{
+ spin_lock_bh(&sl->lock);
+ do_write_seqcount_begin(&sl->seqcount.seqcount);
+}
+# 928 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_sequnlock_bh(seqlock_t *sl)
+{
+ do_write_seqcount_end(&sl->seqcount.seqcount);
+ spin_unlock_bh(&sl->lock);
+}
+# 941 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_seqlock_irq(seqlock_t *sl)
+{
+ spin_lock_irq(&sl->lock);
+ do_write_seqcount_begin(&sl->seqcount.seqcount);
+}
+# 954 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_sequnlock_irq(seqlock_t *sl)
+{
+ do_write_seqcount_end(&sl->seqcount.seqcount);
+ spin_unlock_irq(&sl->lock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __write_seqlock_irqsave(seqlock_t *sl)
+{
+ unsigned long flags;
+
+ do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
+ do_write_seqcount_begin(&sl->seqcount.seqcount);
+ return flags;
+}
+# 991 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
+{
+ do_write_seqcount_end(&sl->seqcount.seqcount);
+ spin_unlock_irqrestore(&sl->lock, flags);
+}
+# 1014 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_seqlock_excl(seqlock_t *sl)
+{
+ spin_lock(&sl->lock);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_sequnlock_excl(seqlock_t *sl)
+{
+ spin_unlock(&sl->lock);
+}
+# 1037 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_seqlock_excl_bh(seqlock_t *sl)
+{
+ spin_lock_bh(&sl->lock);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_sequnlock_excl_bh(seqlock_t *sl)
+{
+ spin_unlock_bh(&sl->lock);
+}
+# 1061 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_seqlock_excl_irq(seqlock_t *sl)
+{
+ spin_lock_irq(&sl->lock);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_sequnlock_excl_irq(seqlock_t *sl)
+{
+ spin_unlock_irq(&sl->lock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
+{
+ unsigned long flags;
+
+ do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
+ return flags;
+}
+# 1104 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
+{
+ spin_unlock_irqrestore(&sl->lock, flags);
+}
+# 1141 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
+{
+ if (!(*seq & 1))
+  *seq = read_seqbegin(lock);
+ else
+  read_seqlock_excl(lock);
+}
+# 1156 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int need_seqretry(seqlock_t *lock, int seq)
+{
+ return !(seq & 1) && read_seqretry(lock, seq);
+}
+# 1169 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void done_seqretry(seqlock_t *lock, int seq)
+{
+ if (seq & 1)
+  read_sequnlock_excl(lock);
+}
+# 1195 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
+read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
+{
+ unsigned long flags = 0;
+
+ if (!(*seq & 1))
+  *seq = read_seqbegin(lock);
+ else
+  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);
+
+ return flags;
+}
+# 1220 "./include/linux/seqlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
+{
+ if (seq & 1)
+  read_sequnlock_excl_irqrestore(lock, flags);
+}
+# 17 "./include/linux/mmzone.h" 2
+# 1 "./include/linux/nodemask.h" 1
+# 98 "./include/linux/nodemask.h"
+typedef struct { unsigned long bits[((((1 << 0)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } nodemask_t;
+extern nodemask_t _unused_nodemask_arg_;
+# 109 "./include/linux/nodemask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int __nodemask_pr_numnodes(const nodemask_t *m)
+{
+ return m ? (1 << 0) : 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const unsigned long *__nodemask_pr_bits(const nodemask_t *m)
+{
+ return m ? m->bits : ((void *)0);
+}
+# 128 "./include/linux/nodemask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __node_set(int node, volatile nodemask_t *dstp)
+{
+ set_bit(node, dstp->bits);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __node_clear(int node, volatile nodemask_t *dstp)
+{
+ clear_bit(node, dstp->bits);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
+{
+ bitmap_fill(dstp->bits, nbits);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
+{
+ bitmap_zero(dstp->bits, nbits);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __node_test_and_set(int node, nodemask_t *addr)
+{
+ return test_and_set_bit(node, addr->bits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
+     const nodemask_t *src2p, unsigned int nbits)
+{
+ bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
+     const nodemask_t *src2p, unsigned int nbits)
+{
+ bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
+     const nodemask_t *src2p, unsigned int nbits)
+{
+ bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
+     const nodemask_t *src2p, unsigned int nbits)
+{
+ bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_complement(nodemask_t *dstp,
+     const nodemask_t *srcp, unsigned int nbits)
+{
+ bitmap_complement(dstp->bits, srcp->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_equal(const nodemask_t *src1p,
+     const nodemask_t *src2p, unsigned int nbits)
+{
+ return bitmap_equal(src1p->bits, src2p->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_intersects(const nodemask_t *src1p,
+     const nodemask_t *src2p, unsigned int nbits)
+{
+ return bitmap_intersects(src1p->bits, src2p->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_subset(const nodemask_t *src1p,
+     const nodemask_t *src2p, unsigned int nbits)
+{
+ return bitmap_subset(src1p->bits, src2p->bits, nbits);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
+{
+ return bitmap_empty(srcp->bits, nbits);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
+{
+ return bitmap_full(srcp->bits, nbits);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
+{
+ return bitmap_weight(srcp->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_shift_right(nodemask_t *dstp,
+     const nodemask_t *srcp, int n, int nbits)
+{
+ bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_shift_left(nodemask_t *dstp,
+     const nodemask_t *srcp, int n, int nbits)
+{
+ bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __first_node(const nodemask_t *srcp)
+{
+ return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(find_first_bit(srcp->bits, (1 << 0)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_first_bit(srcp->bits, (1 << 0)))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(find_first_bit(srcp->bits, (1 << 0)))) ? ((int)((1 << 0))) : ((int)(find_first_bit(srcp->bits, (1 << 0))))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x69 = ((int)((1 << 0))); typeof((int)(find_first_bit(srcp->bits, (1 << 0)))) __UNIQUE_ID___y70 = ((int)(find_first_bit(srcp->bits, (1 << 0)))); ((__UNIQUE_ID___x69) < (__UNIQUE_ID___y70) ? (__UNIQUE_ID___x69) : (__UNIQUE_ID___y70)); }));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __next_node(int n, const nodemask_t *srcp)
+{
+ return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) ? ((int)((1 << 0))) : ((int)(find_next_bit(srcp->bits, (1 << 0), n+1)))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x71 = ((int)((1 << 0))); typeof((int)(find_next_bit(srcp->bits, (1 << 0), n+1))) __UNIQUE_ID___y72 = ((int)(find_next_bit(srcp->bits, (1 << 0), n+1))); ((__UNIQUE_ID___x71) < (__UNIQUE_ID___y72) ? (__UNIQUE_ID___x71) : (__UNIQUE_ID___y72)); }));
+}
+
+
+
+
+
+
+int __next_node_in(int node, const nodemask_t *srcp);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_nodemask_of_node(nodemask_t *mask, int node)
+{
+ __nodes_clear(&(*mask), (1 << 0));
+ __node_set((node), &(*mask));
+}
+# 299 "./include/linux/nodemask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __first_unset_node(const nodemask_t *maskp)
+{
+ return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 0))) *)1 == (typeof((int)(find_first_zero_bit(maskp->bits, (1 << 0)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 0))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_first_zero_bit(maskp->bits, (1 << 0)))) * 0l)) : (int *)8))))), (((int)((1 << 0))) < ((int)(find_first_zero_bit(maskp->bits, (1 << 0)))) ? ((int)((1 << 0))) : ((int)(find_first_zero_bit(maskp->bits, (1 << 0))))), ({ typeof((int)((1 << 0))) __UNIQUE_ID___x73 = ((int)((1 << 0))); typeof((int)(find_first_zero_bit(maskp->bits, (1 << 0)))) __UNIQUE_ID___y74 = ((int)(find_first_zero_bit(maskp->bits, (1 << 0)))); ((__UNIQUE_ID___x73) < (__UNIQUE_ID___y74) ? (__UNIQUE_ID___x73) : (__UNIQUE_ID___y74)); }))
+                                                  ;
+}
+# 333 "./include/linux/nodemask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodemask_parse_user(const char *buf, int len,
+     nodemask_t *dstp, int nbits)
+{
+ return bitmap_parse_user(buf, len, dstp->bits, nbits);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
+{
+ return bitmap_parselist(buf, dstp->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __node_remap(int oldbit,
+  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
+{
+ return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
+  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
+{
+ bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
+  const nodemask_t *relmapp, int nbits)
+{
+ bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
+  int sz, int nbits)
+{
+ bitmap_fold(dstp->bits, origp->bits, sz, nbits);
+}
+# 391 "./include/linux/nodemask.h"
+enum node_states {
+ N_POSSIBLE,
+ N_ONLINE,
+ N_NORMAL_MEMORY,
+
+
+
+ N_HIGH_MEMORY = N_NORMAL_MEMORY,
+
+ N_MEMORY,
+ N_CPU,
+ N_GENERIC_INITIATOR,
+ NR_NODE_STATES
+};
+
+
+
+
+
+
+extern nodemask_t node_states[NR_NODE_STATES];
+# 465 "./include/linux/nodemask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int node_state(int node, enum node_states state)
+{
+ return node == 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void node_set_state(int node, enum node_states state)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void node_clear_state(int node, enum node_states state)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int num_node_state(enum node_states state)
+{
+ return 1;
+}
+# 500 "./include/linux/nodemask.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int node_random(const nodemask_t *mask)
+{
+ return 0;
+}
+# 532 "./include/linux/nodemask.h"
+struct nodemask_scratch {
+ nodemask_t mask1;
+ nodemask_t mask2;
+};
+# 18 "./include/linux/mmzone.h" 2
+# 1 "./include/linux/pageblock-flags.h" 1
+# 18 "./include/linux/pageblock-flags.h"
+enum pageblock_bits {
+ PB_migrate,
+ PB_migrate_end = PB_migrate + 3 - 1,
+
+ PB_migrate_skip,
+
+
+
+
+
+ NR_PAGEBLOCK_BITS
+};
+# 55 "./include/linux/pageblock-flags.h"
+struct page;
+
+unsigned long get_pfnblock_flags_mask(struct page *page,
+    unsigned long pfn,
+    unsigned long mask);
+
+void set_pfnblock_flags_mask(struct page *page,
+    unsigned long flags,
+    unsigned long pfn,
+    unsigned long mask);
+# 79 "./include/linux/pageblock-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool get_pageblock_skip(struct page *page)
+{
+ return false;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_pageblock_skip(struct page *page)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_pageblock_skip(struct page *page)
+{
+}
+# 19 "./include/linux/mmzone.h" 2
+# 1 "./include/linux/page-flags-layout.h" 1
+
+
+
+
+
+# 1 "./include/generated/bounds.h" 1
+# 7 "./include/linux/page-flags-layout.h" 2
+# 20 "./include/linux/mmzone.h" 2
+
+# 1 "./include/linux/mm_types.h" 1
+
+
+
+
+# 1 "./include/linux/mm_types_task.h" 1
+# 19 "./include/linux/mm_types_task.h"
+# 1 "./arch/x86/include/asm/tlbbatch.h" 1
+
+
+
+
+
+
+struct arch_tlbflush_unmap_batch {
+
+
+
+
+ struct cpumask cpumask;
+};
+# 20 "./include/linux/mm_types_task.h" 2
+# 34 "./include/linux/mm_types_task.h"
+struct vmacache {
+ u64 seqnum;
+ struct vm_area_struct *vmas[(1U << 2)];
+};
+
+
+
+
+
+enum {
+ MM_FILEPAGES,
+ MM_ANONPAGES,
+ MM_SWAPENTS,
+ MM_SHMEMPAGES,
+ NR_MM_COUNTERS
+};
+# 60 "./include/linux/mm_types_task.h"
+struct mm_rss_stat {
+ atomic_long_t count[NR_MM_COUNTERS];
+};
+
+struct page_frag {
+ struct page *page;
+
+ __u32 offset;
+ __u32 size;
+
+
+
+
+};
+
+
+struct tlbflush_unmap_batch {
+# 85 "./include/linux/mm_types_task.h"
+ struct arch_tlbflush_unmap_batch arch;
+
+
+ bool flush_required;
+
+
+
+
+
+
+ bool writable;
+
+};
+# 6 "./include/linux/mm_types.h" 2
+
+# 1 "./include/linux/auxvec.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/auxvec.h" 1
+
+
+
+
+# 1 "./arch/x86/include/uapi/asm/auxvec.h" 1
+# 6 "./include/uapi/linux/auxvec.h" 2
+# 6 "./include/linux/auxvec.h" 2
+# 8 "./include/linux/mm_types.h" 2
+
+
+# 1 "./include/linux/rbtree.h" 1
+# 24 "./include/linux/rbtree.h"
+struct rb_node {
+ unsigned long __rb_parent_color;
+ struct rb_node *rb_right;
+ struct rb_node *rb_left;
+} __attribute__((aligned(sizeof(long))));
+
+
+struct rb_root {
+ struct rb_node *rb_node;
+};
+# 49 "./include/linux/rbtree.h"
+extern void rb_insert_color(struct rb_node *, struct rb_root *);
+extern void rb_erase(struct rb_node *, struct rb_root *);
+
+
+
+extern struct rb_node *rb_next(const struct rb_node *);
+extern struct rb_node *rb_prev(const struct rb_node *);
+extern struct rb_node *rb_first(const struct rb_root *);
+extern struct rb_node *rb_last(const struct rb_root *);
+
+
+extern struct rb_node *rb_first_postorder(const struct rb_root *);
+extern struct rb_node *rb_next_postorder(const struct rb_node *);
+
+
+extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
+       struct rb_root *root);
+extern void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new,
+    struct rb_root *root);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rb_link_node(struct rb_node *node, struct rb_node *parent,
+    struct rb_node **rb_link)
+{
+ node->__rb_parent_color = (unsigned long)parent;
+ node->rb_left = node->rb_right = ((void *)0);
+
+ *rb_link = node;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
+        struct rb_node **rb_link)
+{
+ node->__rb_parent_color = (unsigned long)parent;
+ node->rb_left = node->rb_right = ((void *)0);
+
+ do { uintptr_t _r_a_p__v = (uintptr_t)(node); ; if (__builtin_constant_p(node) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_75(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*rb_link)) == sizeof(char) || sizeof((*rb_link)) == sizeof(short) || sizeof((*rb_link)) == sizeof(int) || sizeof((*rb_link)) == sizeof(long)) || sizeof((*rb_link)) == sizeof(long long))) __compiletime_assert_75(); } while (0); do { *(volatile typeof((*rb_link)) *)&((*rb_link)) = ((typeof(*rb_link))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_76(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)))) __compiletime_assert_76(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_77(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)) || sizeof(*&*rb_link) == sizeof(long long))) __compiletime_assert_77(); } while (0); do { *(volatile typeof(*&*rb_link) *)&(*&*rb_link) = ((typeof(*((typeof(*rb_link))_r_a_p__v)) *)((typeof(*rb_link))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+}
+# 125 "./include/linux/rbtree.h"
+struct rb_root_cached {
+ struct rb_root rb_root;
+ struct rb_node *rb_leftmost;
+};
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rb_insert_color_cached(struct rb_node *node,
+       struct rb_root_cached *root,
+       bool leftmost)
+{
+ if (leftmost)
+  root->rb_leftmost = node;
+ rb_insert_color(node, &root->rb_root);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct rb_node *
+rb_erase_cached(struct rb_node *node, struct rb_root_cached *root)
+{
+ struct rb_node *leftmost = ((void *)0);
+
+ if (root->rb_leftmost == node)
+  leftmost = root->rb_leftmost = rb_next(node);
+
+ rb_erase(node, &root->rb_root);
+
+ return leftmost;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rb_replace_node_cached(struct rb_node *victim,
+       struct rb_node *new,
+       struct rb_root_cached *root)
+{
+ if (root->rb_leftmost == victim)
+  root->rb_leftmost = new;
+ rb_replace_node(victim, new, &root->rb_root);
+}
+# 191 "./include/linux/rbtree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct rb_node *
+rb_add_cached(struct rb_node *node, struct rb_root_cached *tree,
+       bool (*less)(struct rb_node *, const struct rb_node *))
+{
+ struct rb_node **link = &tree->rb_root.rb_node;
+ struct rb_node *parent = ((void *)0);
+ bool leftmost = true;
+
+ while (*link) {
+  parent = *link;
+  if (less(node, parent)) {
+   link = &parent->rb_left;
+  } else {
+   link = &parent->rb_right;
+   leftmost = false;
+  }
+ }
+
+ rb_link_node(node, parent, link);
+ rb_insert_color_cached(node, tree, leftmost);
+
+ return leftmost ? node : ((void *)0);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+rb_add(struct rb_node *node, struct rb_root *tree,
+       bool (*less)(struct rb_node *, const struct rb_node *))
+{
+ struct rb_node **link = &tree->rb_node;
+ struct rb_node *parent = ((void *)0);
+
+ while (*link) {
+  parent = *link;
+  if (less(node, parent))
+   link = &parent->rb_left;
+  else
+   link = &parent->rb_right;
+ }
+
+ rb_link_node(node, parent, link);
+ rb_insert_color(node, tree);
+}
+# 249 "./include/linux/rbtree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct rb_node *
+rb_find_add(struct rb_node *node, struct rb_root *tree,
+     int (*cmp)(struct rb_node *, const struct rb_node *))
+{
+ struct rb_node **link = &tree->rb_node;
+ struct rb_node *parent = ((void *)0);
+ int c;
+
+ while (*link) {
+  parent = *link;
+  c = cmp(node, parent);
+
+  if (c < 0)
+   link = &parent->rb_left;
+  else if (c > 0)
+   link = &parent->rb_right;
+  else
+   return parent;
+ }
+
+ rb_link_node(node, parent, link);
+ rb_insert_color(node, tree);
+ return ((void *)0);
+}
+# 282 "./include/linux/rbtree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct rb_node *
+rb_find(const void *key, const struct rb_root *tree,
+ int (*cmp)(const void *key, const struct rb_node *))
+{
+ struct rb_node *node = tree->rb_node;
+
+ while (node) {
+  int c = cmp(key, node);
+
+  if (c < 0)
+   node = node->rb_left;
+  else if (c > 0)
+   node = node->rb_right;
+  else
+   return node;
+ }
+
+ return ((void *)0);
+}
+# 310 "./include/linux/rbtree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct rb_node *
+rb_find_first(const void *key, const struct rb_root *tree,
+       int (*cmp)(const void *key, const struct rb_node *))
+{
+ struct rb_node *node = tree->rb_node;
+ struct rb_node *match = ((void *)0);
+
+ while (node) {
+  int c = cmp(key, node);
+
+  if (c <= 0) {
+   if (!c)
+    match = node;
+   node = node->rb_left;
+  } else if (c > 0) {
+   node = node->rb_right;
+  }
+ }
+
+ return match;
+}
+# 340 "./include/linux/rbtree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct rb_node *
+rb_next_match(const void *key, struct rb_node *node,
+       int (*cmp)(const void *key, const struct rb_node *))
+{
+ node = rb_next(node);
+ if (node && cmp(key, node))
+  node = ((void *)0);
+ return node;
+}
+# 11 "./include/linux/mm_types.h" 2
+# 1 "./include/linux/rwsem.h" 1
+# 35 "./include/linux/rwsem.h"
+struct rw_semaphore {
+ atomic_long_t count;
+
+
+
+
+
+ atomic_long_t owner;
+
+
+
+ raw_spinlock_t wait_lock;
+ struct list_head wait_list;
+
+ void *magic;
+
+
+ struct lockdep_map dep_map;
+
+};
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rwsem_is_locked(struct rw_semaphore *sem)
+{
+ return atomic_long_read(&sem->count) != 0;
+}
+# 101 "./include/linux/rwsem.h"
+extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
+    struct lock_class_key *key);
+# 117 "./include/linux/rwsem.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rwsem_is_contended(struct rw_semaphore *sem)
+{
+ return !list_empty(&sem->wait_list);
+}
+
+
+
+
+extern void down_read(struct rw_semaphore *sem);
+extern int __attribute__((__warn_unused_result__)) down_read_interruptible(struct rw_semaphore *sem);
+extern int __attribute__((__warn_unused_result__)) down_read_killable(struct rw_semaphore *sem);
+
+
+
+
+extern int down_read_trylock(struct rw_semaphore *sem);
+
+
+
+
+extern void down_write(struct rw_semaphore *sem);
+extern int __attribute__((__warn_unused_result__)) down_write_killable(struct rw_semaphore *sem);
+
+
+
+
+extern int down_write_trylock(struct rw_semaphore *sem);
+
+
+
+
+extern void up_read(struct rw_semaphore *sem);
+
+
+
+
+extern void up_write(struct rw_semaphore *sem);
+
+
+
+
+extern void downgrade_write(struct rw_semaphore *sem);
+# 174 "./include/linux/rwsem.h"
+extern void down_read_nested(struct rw_semaphore *sem, int subclass);
+extern int __attribute__((__warn_unused_result__)) down_read_killable_nested(struct rw_semaphore *sem, int subclass);
+extern void down_write_nested(struct rw_semaphore *sem, int subclass);
+extern int down_write_killable_nested(struct rw_semaphore *sem, int subclass);
+extern void _down_write_nest_lock(struct rw_semaphore *sem, struct lockdep_map *nest_lock);
+# 192 "./include/linux/rwsem.h"
+extern void down_read_non_owner(struct rw_semaphore *sem);
+extern void up_read_non_owner(struct rw_semaphore *sem);
+# 12 "./include/linux/mm_types.h" 2
+# 1 "./include/linux/completion.h" 1
+# 12 "./include/linux/completion.h"
+# 1 "./include/linux/swait.h" 1
+# 41 "./include/linux/swait.h"
+struct task_struct;
+
+struct swait_queue_head {
+ raw_spinlock_t lock;
+ struct list_head task_list;
+};
+
+struct swait_queue {
+ struct task_struct *task;
+ struct list_head task_list;
+};
+# 69 "./include/linux/swait.h"
+extern void __init_swait_queue_head(struct swait_queue_head *q, const char *name,
+        struct lock_class_key *key);
+# 121 "./include/linux/swait.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int swait_active(struct swait_queue_head *wq)
+{
+ return !list_empty(&wq->task_list);
+}
+# 134 "./include/linux/swait.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool swq_has_sleeper(struct swait_queue_head *wq)
+{
+
+
+
+
+
+
+
+ __asm__ __volatile__("": : :"memory");
+ return swait_active(wq);
+}
+
+extern void swake_up_one(struct swait_queue_head *q);
+extern void swake_up_all(struct swait_queue_head *q);
+extern void swake_up_locked(struct swait_queue_head *q);
+
+extern void prepare_to_swait_exclusive(struct swait_queue_head *q, struct swait_queue *wait, int state);
+extern long prepare_to_swait_event(struct swait_queue_head *q, struct swait_queue *wait, int state);
+
+extern void __finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
+extern void finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
+# 13 "./include/linux/completion.h" 2
+# 26 "./include/linux/completion.h"
+struct completion {
+ unsigned int done;
+ struct swait_queue_head wait;
+};
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void complete_acquire(struct completion *x) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void complete_release(struct completion *x) {}
+# 84 "./include/linux/completion.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_completion(struct completion *x)
+{
+ x->done = 0;
+ do { static struct lock_class_key __key; __init_swait_queue_head((&x->wait), "&x->wait", &__key); } while (0);
+}
+# 97 "./include/linux/completion.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void reinit_completion(struct completion *x)
+{
+ x->done = 0;
+}
+
+extern void wait_for_completion(struct completion *);
+extern void wait_for_completion_io(struct completion *);
+extern int wait_for_completion_interruptible(struct completion *x);
+extern int wait_for_completion_killable(struct completion *x);
+extern unsigned long wait_for_completion_timeout(struct completion *x,
+         unsigned long timeout);
+extern unsigned long wait_for_completion_io_timeout(struct completion *x,
+          unsigned long timeout);
+extern long wait_for_completion_interruptible_timeout(
+ struct completion *x, unsigned long timeout);
+extern long wait_for_completion_killable_timeout(
+ struct completion *x, unsigned long timeout);
+extern bool try_wait_for_completion(struct completion *x);
+extern bool completion_done(struct completion *x);
+
+extern void complete(struct completion *);
+extern void complete_all(struct completion *);
+# 13 "./include/linux/mm_types.h" 2
+
+# 1 "./include/linux/uprobes.h" 1
+# 19 "./include/linux/uprobes.h"
+struct vm_area_struct;
+struct mm_struct;
+struct inode;
+struct notifier_block;
+struct page;
+
+
+
+
+
+
+enum uprobe_filter_ctx {
+ UPROBE_FILTER_REGISTER,
+ UPROBE_FILTER_UNREGISTER,
+ UPROBE_FILTER_MMAP,
+};
+
+struct uprobe_consumer {
+ int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
+ int (*ret_handler)(struct uprobe_consumer *self,
+    unsigned long func,
+    struct pt_regs *regs);
+ bool (*filter)(struct uprobe_consumer *self,
+    enum uprobe_filter_ctx ctx,
+    struct mm_struct *mm);
+
+ struct uprobe_consumer *next;
+};
+
+
+# 1 "./arch/x86/include/asm/uprobes.h" 1
+# 13 "./arch/x86/include/asm/uprobes.h"
+# 1 "./include/linux/notifier.h" 1
+# 16 "./include/linux/notifier.h"
+# 1 "./include/linux/srcu.h" 1
+# 21 "./include/linux/srcu.h"
+# 1 "./include/linux/workqueue.h" 1
+# 9 "./include/linux/workqueue.h"
+# 1 "./include/linux/timer.h" 1
+
+
+
+
+
+# 1 "./include/linux/ktime.h" 1
+# 24 "./include/linux/ktime.h"
+# 1 "./include/linux/time.h" 1
+# 9 "./include/linux/time.h"
+extern struct timezone sys_tz;
+
+int get_timespec64(struct timespec64 *ts,
+  const struct __kernel_timespec *uts);
+int put_timespec64(const struct timespec64 *ts,
+  struct __kernel_timespec *uts);
+int get_itimerspec64(struct itimerspec64 *it,
+   const struct __kernel_itimerspec *uit);
+int put_itimerspec64(const struct itimerspec64 *it,
+   struct __kernel_itimerspec *uit);
+
+extern time64_t mktime64(const unsigned int year, const unsigned int mon,
+   const unsigned int day, const unsigned int hour,
+   const unsigned int min, const unsigned int sec);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_itimer(void) {}
+
+
+extern long do_utimes(int dfd, const char *filename, struct timespec64 *times, int flags);
+
+
+
+
+
+struct tm {
+
+
+
+
+ int tm_sec;
+
+ int tm_min;
+
+ int tm_hour;
+
+ int tm_mday;
+
+ int tm_mon;
+
+ long tm_year;
+
+ int tm_wday;
+
+ int tm_yday;
+};
+
+void time64_to_tm(time64_t totalsecs, int offset, struct tm *result);
+
+# 1 "./include/linux/time32.h" 1
+# 13 "./include/linux/time32.h"
+# 1 "./include/linux/timex.h" 1
+# 56 "./include/linux/timex.h"
+# 1 "./include/uapi/linux/timex.h" 1
+# 56 "./include/uapi/linux/timex.h"
+# 1 "./include/linux/time.h" 1
+# 57 "./include/uapi/linux/timex.h" 2
+# 97 "./include/uapi/linux/timex.h"
+struct __kernel_timex_timeval {
+ __kernel_time64_t tv_sec;
+ long long tv_usec;
+};
+
+struct __kernel_timex {
+ unsigned int modes;
+ int :32;
+ long long offset;
+ long long freq;
+ long long maxerror;
+ long long esterror;
+ int status;
+ int :32;
+ long long constant;
+ long long precision;
+ long long tolerance;
+
+
+ struct __kernel_timex_timeval time;
+ long long tick;
+
+ long long ppsfreq;
+ long long jitter;
+ int shift;
+ int :32;
+ long long stabil;
+ long long jitcnt;
+ long long calcnt;
+ long long errcnt;
+ long long stbcnt;
+
+ int tai;
+
+ int :32; int :32; int :32; int :32;
+ int :32; int :32; int :32; int :32;
+ int :32; int :32; int :32;
+};
+# 57 "./include/linux/timex.h" 2
+# 65 "./include/linux/timex.h"
+# 1 "./arch/x86/include/asm/timex.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/asm/tsc.h" 1
+# 14 "./arch/x86/include/asm/tsc.h"
+typedef unsigned long long cycles_t;
+
+extern unsigned int cpu_khz;
+extern unsigned int tsc_khz;
+
+extern void disable_TSC(void);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) cycles_t get_cycles(void)
+{
+
+
+
+
+
+ return rdtsc();
+}
+
+extern struct system_counterval_t convert_art_to_tsc(u64 art);
+extern struct system_counterval_t convert_art_ns_to_tsc(u64 art_ns);
+
+extern void tsc_early_init(void);
+extern void tsc_init(void);
+extern unsigned long calibrate_delay_is_known(void);
+extern void mark_tsc_unstable(char *reason);
+extern int unsynchronized_tsc(void);
+extern int check_tsc_unstable(void);
+extern void mark_tsc_async_resets(char *reason);
+extern unsigned long native_calibrate_cpu_early(void);
+extern unsigned long native_calibrate_tsc(void);
+extern unsigned long long native_sched_clock_from_tsc(u64 tsc);
+
+extern int tsc_clocksource_reliable;
+
+extern bool tsc_async_resets;
+# 57 "./arch/x86/include/asm/tsc.h"
+extern bool tsc_store_and_check_tsc_adjust(bool bootcpu);
+extern void tsc_verify_tsc_adjust(bool resume);
+extern void check_tsc_sync_source(int cpu);
+extern void check_tsc_sync_target(void);
+
+
+
+
+
+
+
+extern int notsc_setup(char *);
+extern void tsc_save_sched_clock_state(void);
+extern void tsc_restore_sched_clock_state(void);
+
+unsigned long cpu_khz_from_msr(void);
+# 7 "./arch/x86/include/asm/timex.h" 2
+# 66 "./include/linux/timex.h" 2
+# 139 "./include/linux/timex.h"
+extern unsigned long tick_usec;
+extern unsigned long tick_nsec;
+# 154 "./include/linux/timex.h"
+extern int do_adjtimex(struct __kernel_timex *);
+extern int do_clock_adjtime(const clockid_t which_clock, struct __kernel_timex * ktx);
+
+extern void hardpps(const struct timespec64 *, const struct timespec64 *);
+
+int read_current_timer(unsigned long *timer_val);
+# 14 "./include/linux/time32.h" 2
+
+# 1 "./include/vdso/time32.h" 1
+
+
+
+
+typedef s32 old_time32_t;
+
+struct old_timespec32 {
+ old_time32_t tv_sec;
+ s32 tv_nsec;
+};
+
+struct old_timeval32 {
+ old_time32_t tv_sec;
+ s32 tv_usec;
+};
+# 16 "./include/linux/time32.h" 2
+
+struct old_itimerspec32 {
+ struct old_timespec32 it_interval;
+ struct old_timespec32 it_value;
+};
+
+struct old_utimbuf32 {
+ old_time32_t actime;
+ old_time32_t modtime;
+};
+
+struct old_timex32 {
+ u32 modes;
+ s32 offset;
+ s32 freq;
+ s32 maxerror;
+ s32 esterror;
+ s32 status;
+ s32 constant;
+ s32 precision;
+ s32 tolerance;
+ struct old_timeval32 time;
+ s32 tick;
+ s32 ppsfreq;
+ s32 jitter;
+ s32 shift;
+ s32 stabil;
+ s32 jitcnt;
+ s32 calcnt;
+ s32 errcnt;
+ s32 stbcnt;
+ s32 tai;
+
+ s32:32; s32:32; s32:32; s32:32;
+ s32:32; s32:32; s32:32; s32:32;
+ s32:32; s32:32; s32:32;
+};
+
+extern int get_old_timespec32(struct timespec64 *, const void *);
+extern int put_old_timespec32(const struct timespec64 *, void *);
+extern int get_old_itimerspec32(struct itimerspec64 *its,
+   const struct old_itimerspec32 *uits);
+extern int put_old_itimerspec32(const struct itimerspec64 *its,
+   struct old_itimerspec32 *uits);
+struct __kernel_timex;
+int get_old_timex32(struct __kernel_timex *, const struct old_timex32 *);
+int put_old_timex32(struct old_timex32 *, const struct __kernel_timex *);
+
+
+
+
+
+
+
+extern struct __kernel_old_timeval ns_to_kernel_old_timeval(s64 nsec);
+# 61 "./include/linux/time.h" 2
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool itimerspec64_valid(const struct itimerspec64 *its)
+{
+ if (!timespec64_valid(&(its->it_interval)) ||
+  !timespec64_valid(&(its->it_value)))
+  return false;
+
+ return true;
+}
+# 100 "./include/linux/time.h"
+# 1 "./include/vdso/time.h" 1
+
+
+
+
+
+
+struct timens_offset {
+ s64 sec;
+ u64 nsec;
+};
+# 101 "./include/linux/time.h" 2
+# 25 "./include/linux/ktime.h" 2
+# 1 "./include/linux/jiffies.h" 1
+# 12 "./include/linux/jiffies.h"
+# 1 "./include/vdso/jiffies.h" 1
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/param.h" 1
+# 6 "./include/vdso/jiffies.h" 2
+# 13 "./include/linux/jiffies.h" 2
+# 1 "./arch/x86/include/generated/uapi/asm/param.h" 1
+# 14 "./include/linux/jiffies.h" 2
+# 1 "./include/generated/timeconst.h" 1
+# 15 "./include/linux/jiffies.h" 2
+# 62 "./include/linux/jiffies.h"
+extern int register_refined_jiffies(long clock_tick_rate);
+# 79 "./include/linux/jiffies.h"
+extern u64 jiffies_64;
+extern unsigned long volatile jiffies;
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 get_jiffies_64(void)
+{
+ return (u64)jiffies;
+}
+# 189 "./include/linux/jiffies.h"
+extern unsigned long preset_lpj;
+# 290 "./include/linux/jiffies.h"
+extern unsigned int jiffies_to_msecs(const unsigned long j);
+extern unsigned int jiffies_to_usecs(const unsigned long j);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 jiffies_to_nsecs(const unsigned long j)
+{
+ return (u64)jiffies_to_usecs(j) * 1000L;
+}
+
+extern u64 jiffies64_to_nsecs(u64 j);
+extern u64 jiffies64_to_msecs(u64 j);
+
+extern unsigned long __msecs_to_jiffies(const unsigned int m);
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long _msecs_to_jiffies(const unsigned int m)
+{
+ return (m + (1000L / 250) - 1) / (1000L / 250);
+}
+# 363 "./include/linux/jiffies.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long msecs_to_jiffies(const unsigned int m)
+{
+ if (__builtin_constant_p(m)) {
+  if ((int)m < 0)
+   return ((((long)(~0UL >> 1)) >> 1)-1);
+  return _msecs_to_jiffies(m);
+ } else {
+  return __msecs_to_jiffies(m);
+ }
+}
+
+extern unsigned long __usecs_to_jiffies(const unsigned int u);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long _usecs_to_jiffies(const unsigned int u)
+{
+ return (u + (1000000L / 250) - 1) / (1000000L / 250);
+}
+# 410 "./include/linux/jiffies.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long usecs_to_jiffies(const unsigned int u)
+{
+ if (__builtin_constant_p(u)) {
+  if (u > jiffies_to_usecs(((((long)(~0UL >> 1)) >> 1)-1)))
+   return ((((long)(~0UL >> 1)) >> 1)-1);
+  return _usecs_to_jiffies(u);
+ } else {
+  return __usecs_to_jiffies(u);
+ }
+}
+
+extern unsigned long timespec64_to_jiffies(const struct timespec64 *value);
+extern void jiffies_to_timespec64(const unsigned long jiffies,
+      struct timespec64 *value);
+extern clock_t jiffies_to_clock_t(unsigned long x);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) clock_t jiffies_delta_to_clock_t(long delta)
+{
+ return jiffies_to_clock_t(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x78 = (0L); typeof(delta) __UNIQUE_ID___y79 = (delta); ((__UNIQUE_ID___x78) > (__UNIQUE_ID___y79) ? (__UNIQUE_ID___x78) : (__UNIQUE_ID___y79)); })));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int jiffies_delta_to_msecs(long delta)
+{
+ return jiffies_to_msecs(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x80 = (0L); typeof(delta) __UNIQUE_ID___y81 = (delta); ((__UNIQUE_ID___x80) > (__UNIQUE_ID___y81) ? (__UNIQUE_ID___x80) : (__UNIQUE_ID___y81)); })));
+}
+
+extern unsigned long clock_t_to_jiffies(unsigned long x);
+extern u64 jiffies_64_to_clock_t(u64 x);
+extern u64 nsec_to_clock_t(u64 x);
+extern u64 nsecs_to_jiffies64(u64 n);
+extern unsigned long nsecs_to_jiffies(u64 n);
+# 26 "./include/linux/ktime.h" 2
+
+
+
+typedef s64 ktime_t;
+# 38 "./include/linux/ktime.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
+{
+ if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))
+  return ((s64)~((u64)1 << 63));
+
+ return secs * 1000000000L + (s64)nsecs;
+}
+# 71 "./include/linux/ktime.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t timespec64_to_ktime(struct timespec64 ts)
+{
+ return ktime_set(ts.tv_sec, ts.tv_nsec);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_to_ns(const ktime_t kt)
+{
+ return kt;
+}
+# 95 "./include/linux/ktime.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
+{
+ if (cmp1 < cmp2)
+  return -1;
+ if (cmp1 > cmp2)
+  return 1;
+ return 0;
+}
+# 111 "./include/linux/ktime.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
+{
+ return ktime_compare(cmp1, cmp2) > 0;
+}
+# 123 "./include/linux/ktime.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
+{
+ return ktime_compare(cmp1, cmp2) < 0;
+}
+# 148 "./include/linux/ktime.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_divns(const ktime_t kt, s64 div)
+{
+
+
+
+
+ ({ int __ret_warn_on = !!(div < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/ktime.h"), "i" (154), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (82)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ return kt / div;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_to_us(const ktime_t kt)
+{
+ return ktime_divns(kt, 1000L);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_to_ms(const ktime_t kt)
+{
+ return ktime_divns(kt, 1000000L);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
+{
+       return ktime_to_us(((later) - (earlier)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
+{
+ return ktime_to_ms(((later) - (earlier)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
+{
+ return ((kt) + (usec * 1000L));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
+{
+ return ((kt) + (msec * 1000000L));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
+{
+ return ((kt) - (usec * 1000L));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
+{
+ return ((kt) - (msec * 1000000L));
+}
+
+extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
+# 209 "./include/linux/ktime.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool ktime_to_timespec64_cond(const ktime_t kt,
+             struct timespec64 *ts)
+{
+ if (kt) {
+  *ts = ns_to_timespec64((kt));
+  return true;
+ } else {
+  return false;
+ }
+}
+
+# 1 "./include/vdso/ktime.h" 1
+# 221 "./include/linux/ktime.h" 2
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ns_to_ktime(u64 ns)
+{
+ return ns;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ms_to_ktime(u64 ms)
+{
+ return ms * 1000000L;
+}
+
+# 1 "./include/linux/timekeeping.h" 1
+# 9 "./include/linux/timekeeping.h"
+void timekeeping_init(void);
+extern int timekeeping_suspended;
+
+
+extern void legacy_timer_tick(unsigned long ticks);
+
+
+
+
+extern int do_settimeofday64(const struct timespec64 *ts);
+extern int do_sys_settimeofday64(const struct timespec64 *tv,
+     const struct timezone *tz);
+# 40 "./include/linux/timekeeping.h"
+extern void ktime_get_raw_ts64(struct timespec64 *ts);
+extern void ktime_get_ts64(struct timespec64 *ts);
+extern void ktime_get_real_ts64(struct timespec64 *tv);
+extern void ktime_get_coarse_ts64(struct timespec64 *ts);
+extern void ktime_get_coarse_real_ts64(struct timespec64 *ts);
+
+void getboottime64(struct timespec64 *ts);
+
+
+
+
+extern time64_t ktime_get_seconds(void);
+extern time64_t __ktime_get_real_seconds(void);
+extern time64_t ktime_get_real_seconds(void);
+
+
+
+
+
+enum tk_offsets {
+ TK_OFFS_REAL,
+ TK_OFFS_BOOT,
+ TK_OFFS_TAI,
+ TK_OFFS_MAX,
+};
+
+extern ktime_t ktime_get(void);
+extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
+extern ktime_t ktime_get_coarse_with_offset(enum tk_offsets offs);
+extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
+extern ktime_t ktime_get_raw(void);
+extern u32 ktime_get_resolution_ns(void);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_real(void)
+{
+ return ktime_get_with_offset(TK_OFFS_REAL);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_coarse_real(void)
+{
+ return ktime_get_coarse_with_offset(TK_OFFS_REAL);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_boottime(void)
+{
+ return ktime_get_with_offset(TK_OFFS_BOOT);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_coarse_boottime(void)
+{
+ return ktime_get_coarse_with_offset(TK_OFFS_BOOT);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_clocktai(void)
+{
+ return ktime_get_with_offset(TK_OFFS_TAI);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_coarse_clocktai(void)
+{
+ return ktime_get_coarse_with_offset(TK_OFFS_TAI);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_get_coarse(void)
+{
+ struct timespec64 ts;
+
+ ktime_get_coarse_ts64(&ts);
+ return timespec64_to_ktime(ts);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_coarse_ns(void)
+{
+ return ktime_to_ns(ktime_get_coarse());
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_coarse_real_ns(void)
+{
+ return ktime_to_ns(ktime_get_coarse_real());
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_coarse_boottime_ns(void)
+{
+ return ktime_to_ns(ktime_get_coarse_boottime());
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_coarse_clocktai_ns(void)
+{
+ return ktime_to_ns(ktime_get_coarse_clocktai());
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t ktime_mono_to_real(ktime_t mono)
+{
+ return ktime_mono_to_any(mono, TK_OFFS_REAL);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_ns(void)
+{
+ return ktime_to_ns(ktime_get());
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_real_ns(void)
+{
+ return ktime_to_ns(ktime_get_real());
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_boottime_ns(void)
+{
+ return ktime_to_ns(ktime_get_boottime());
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_clocktai_ns(void)
+{
+ return ktime_to_ns(ktime_get_clocktai());
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 ktime_get_raw_ns(void)
+{
+ return ktime_to_ns(ktime_get_raw());
+}
+
+extern u64 ktime_get_mono_fast_ns(void);
+extern u64 ktime_get_raw_fast_ns(void);
+extern u64 ktime_get_boot_fast_ns(void);
+extern u64 ktime_get_real_fast_ns(void);
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ktime_get_boottime_ts64(struct timespec64 *ts)
+{
+ *ts = ns_to_timespec64((ktime_get_boottime()));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ktime_get_coarse_boottime_ts64(struct timespec64 *ts)
+{
+ *ts = ns_to_timespec64((ktime_get_coarse_boottime()));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) time64_t ktime_get_boottime_seconds(void)
+{
+ return ktime_divns(ktime_get_coarse_boottime(), 1000000000L);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ktime_get_clocktai_ts64(struct timespec64 *ts)
+{
+ *ts = ns_to_timespec64((ktime_get_clocktai()));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ktime_get_coarse_clocktai_ts64(struct timespec64 *ts)
+{
+ *ts = ns_to_timespec64((ktime_get_coarse_clocktai()));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) time64_t ktime_get_clocktai_seconds(void)
+{
+ return ktime_divns(ktime_get_coarse_clocktai(), 1000000000L);
+}
+
+
+
+
+extern bool timekeeping_rtc_skipsuspend(void);
+extern bool timekeeping_rtc_skipresume(void);
+
+extern void timekeeping_inject_sleeptime64(const struct timespec64 *delta);
+
+
+
+
+
+
+
+struct ktime_timestamps {
+ u64 mono;
+ u64 boot;
+ u64 real;
+};
+# 245 "./include/linux/timekeeping.h"
+struct system_time_snapshot {
+ u64 cycles;
+ ktime_t real;
+ ktime_t raw;
+ unsigned int clock_was_set_seq;
+ u8 cs_was_changed_seq;
+};
+# 260 "./include/linux/timekeeping.h"
+struct system_device_crosststamp {
+ ktime_t device;
+ ktime_t sys_realtime;
+ ktime_t sys_monoraw;
+};
+# 273 "./include/linux/timekeeping.h"
+struct system_counterval_t {
+ u64 cycles;
+ struct clocksource *cs;
+};
+
+
+
+
+extern int get_device_system_crosststamp(
+   int (*get_time_fn)(ktime_t *device_time,
+    struct system_counterval_t *system_counterval,
+    void *ctx),
+   void *ctx,
+   struct system_time_snapshot *history,
+   struct system_device_crosststamp *xtstamp);
+
+
+
+
+extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);
+
+
+extern void ktime_get_fast_timestamps(struct ktime_timestamps *snap);
+
+
+
+
+extern int persistent_clock_is_local;
+
+extern void read_persistent_clock64(struct timespec64 *ts);
+void read_persistent_wall_and_boot_offset(struct timespec64 *wall_clock,
+       struct timespec64 *boot_offset);
+
+extern int update_persistent_clock64(struct timespec64 now);
+# 233 "./include/linux/ktime.h" 2
+# 7 "./include/linux/timer.h" 2
+
+# 1 "./include/linux/debugobjects.h" 1
+
+
+
+
+
+
+
+enum debug_obj_state {
+ ODEBUG_STATE_NONE,
+ ODEBUG_STATE_INIT,
+ ODEBUG_STATE_INACTIVE,
+ ODEBUG_STATE_ACTIVE,
+ ODEBUG_STATE_DESTROYED,
+ ODEBUG_STATE_NOTAVAILABLE,
+ ODEBUG_STATE_MAX,
+};
+
+struct debug_obj_descr;
+# 28 "./include/linux/debugobjects.h"
+struct debug_obj {
+ struct hlist_node node;
+ enum debug_obj_state state;
+ unsigned int astate;
+ void *object;
+ const struct debug_obj_descr *descr;
+};
+# 55 "./include/linux/debugobjects.h"
+struct debug_obj_descr {
+ const char *name;
+ void *(*debug_hint)(void *addr);
+ bool (*is_static_object)(void *addr);
+ bool (*fixup_init)(void *addr, enum debug_obj_state state);
+ bool (*fixup_activate)(void *addr, enum debug_obj_state state);
+ bool (*fixup_destroy)(void *addr, enum debug_obj_state state);
+ bool (*fixup_free)(void *addr, enum debug_obj_state state);
+ bool (*fixup_assert_init)(void *addr, enum debug_obj_state state);
+};
+
+
+extern void debug_object_init (void *addr, const struct debug_obj_descr *descr);
+extern void
+debug_object_init_on_stack(void *addr, const struct debug_obj_descr *descr);
+extern int debug_object_activate (void *addr, const struct debug_obj_descr *descr);
+extern void debug_object_deactivate(void *addr, const struct debug_obj_descr *descr);
+extern void debug_object_destroy (void *addr, const struct debug_obj_descr *descr);
+extern void debug_object_free (void *addr, const struct debug_obj_descr *descr);
+extern void debug_object_assert_init(void *addr, const struct debug_obj_descr *descr);
+
+
+
+
+
+
+extern void
+debug_object_active_state(void *addr, const struct debug_obj_descr *descr,
+     unsigned int expect, unsigned int next);
+
+extern void debug_objects_early_init(void);
+extern void debug_objects_mem_init(void);
+# 108 "./include/linux/debugobjects.h"
+extern void debug_check_no_obj_freed(const void *address, unsigned long size);
+# 9 "./include/linux/timer.h" 2
+
+
+struct timer_list {
+
+
+
+
+ struct hlist_node entry;
+ unsigned long expires;
+ void (*function)(struct timer_list *);
+ u32 flags;
+
+
+ struct lockdep_map lockdep_map;
+
+};
+# 91 "./include/linux/timer.h"
+void init_timer_key(struct timer_list *timer,
+      void (*func)(struct timer_list *), unsigned int flags,
+      const char *name, struct lock_class_key *key);
+
+
+extern void init_timer_on_stack_key(struct timer_list *timer,
+        void (*func)(struct timer_list *),
+        unsigned int flags, const char *name,
+        struct lock_class_key *key);
+# 148 "./include/linux/timer.h"
+extern void destroy_timer_on_stack(struct timer_list *timer);
+# 166 "./include/linux/timer.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int timer_pending(const struct timer_list * timer)
+{
+ return !hlist_unhashed_lockless(&timer->entry);
+}
+
+extern void add_timer_on(struct timer_list *timer, int cpu);
+extern int del_timer(struct timer_list * timer);
+extern int mod_timer(struct timer_list *timer, unsigned long expires);
+extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);
+extern int timer_reduce(struct timer_list *timer, unsigned long expires);
+
+
+
+
+
+
+
+extern void add_timer(struct timer_list *timer);
+
+extern int try_to_del_timer_sync(struct timer_list *timer);
+# 195 "./include/linux/timer.h"
+extern bool timer_curr_running(struct timer_list *timer);
+
+extern void init_timers(void);
+struct hrtimer;
+extern enum hrtimer_restart it_real_fn(struct hrtimer *);
+# 209 "./include/linux/timer.h"
+unsigned long __round_jiffies(unsigned long j, int cpu);
+unsigned long __round_jiffies_relative(unsigned long j, int cpu);
+unsigned long round_jiffies(unsigned long j);
+unsigned long round_jiffies_relative(unsigned long j);
+
+unsigned long __round_jiffies_up(unsigned long j, int cpu);
+unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
+unsigned long round_jiffies_up(unsigned long j);
+unsigned long round_jiffies_up_relative(unsigned long j);
+# 10 "./include/linux/workqueue.h" 2
+# 18 "./include/linux/workqueue.h"
+struct workqueue_struct;
+
+struct work_struct;
+typedef void (*work_func_t)(struct work_struct *work);
+void delayed_work_timer_fn(struct timer_list *t);
+
+
+
+
+
+
+
+enum {
+ WORK_STRUCT_PENDING_BIT = 0,
+ WORK_STRUCT_DELAYED_BIT = 1,
+ WORK_STRUCT_PWQ_BIT = 2,
+ WORK_STRUCT_LINKED_BIT = 3,
+
+ WORK_STRUCT_STATIC_BIT = 4,
+ WORK_STRUCT_COLOR_SHIFT = 5,
+
+
+
+
+ WORK_STRUCT_COLOR_BITS = 4,
+
+ WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
+ WORK_STRUCT_DELAYED = 1 << WORK_STRUCT_DELAYED_BIT,
+ WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
+ WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,
+
+ WORK_STRUCT_STATIC = 1 << WORK_STRUCT_STATIC_BIT,
+# 58 "./include/linux/workqueue.h"
+ WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS) - 1,
+ WORK_NO_COLOR = WORK_NR_COLORS,
+
+
+ WORK_CPU_UNBOUND = 1,
+
+
+
+
+
+
+ WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
+      WORK_STRUCT_COLOR_BITS,
+
+
+ WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,
+
+ __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
+ WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),
+
+
+
+
+
+
+ WORK_OFFQ_FLAG_BITS = 1,
+ WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
+ WORK_OFFQ_LEFT = 64 - WORK_OFFQ_POOL_SHIFT,
+ WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
+ WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,
+
+
+ WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
+ WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
+ WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,
+
+
+ WORK_BUSY_PENDING = 1 << 0,
+ WORK_BUSY_RUNNING = 1 << 1,
+
+
+ WORKER_DESC_LEN = 24,
+};
+
+struct work_struct {
+ atomic_long_t data;
+ struct list_head entry;
+ work_func_t func;
+
+ struct lockdep_map lockdep_map;
+
+};
+
+
+
+
+
+struct delayed_work {
+ struct work_struct work;
+ struct timer_list timer;
+
+
+ struct workqueue_struct *wq;
+ int cpu;
+};
+
+struct rcu_work {
+ struct work_struct work;
+ struct callback_head rcu;
+
+
+ struct workqueue_struct *wq;
+};
+
+
+
+
+
+
+struct workqueue_attrs {
+
+
+
+ int nice;
+
+
+
+
+ cpumask_var_t cpumask;
+# 155 "./include/linux/workqueue.h"
+ bool no_numa;
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct delayed_work *to_delayed_work(struct work_struct *work)
+{
+ return ({ void *__mptr = (void *)(work); do { extern void __compiletime_assert_83(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct delayed_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void))))) __compiletime_assert_83(); } while (0); ((struct delayed_work *)(__mptr - __builtin_offsetof(struct delayed_work, work))); });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct rcu_work *to_rcu_work(struct work_struct *work)
+{
+ return ({ void *__mptr = (void *)(work); do { extern void __compiletime_assert_84(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct rcu_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void))))) __compiletime_assert_84(); } while (0); ((struct rcu_work *)(__mptr - __builtin_offsetof(struct rcu_work, work))); });
+}
+
+struct execute_work {
+ struct work_struct work;
+};
+# 207 "./include/linux/workqueue.h"
+extern void __init_work(struct work_struct *work, int onstack);
+extern void destroy_work_on_stack(struct work_struct *work);
+extern void destroy_delayed_work_on_stack(struct delayed_work *work);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int work_static(struct work_struct *work)
+{
+ return *((unsigned long *)(&(work)->data)) & WORK_STRUCT_STATIC;
+}
+# 308 "./include/linux/workqueue.h"
+enum {
+ WQ_UNBOUND = 1 << 1,
+ WQ_FREEZABLE = 1 << 2,
+ WQ_MEM_RECLAIM = 1 << 3,
+ WQ_HIGHPRI = 1 << 4,
+ WQ_CPU_INTENSIVE = 1 << 5,
+ WQ_SYSFS = 1 << 6,
+# 341 "./include/linux/workqueue.h"
+ WQ_POWER_EFFICIENT = 1 << 7,
+
+ __WQ_DRAINING = 1 << 16,
+ __WQ_ORDERED = 1 << 17,
+ __WQ_LEGACY = 1 << 18,
+ __WQ_ORDERED_EXPLICIT = 1 << 19,
+
+ WQ_MAX_ACTIVE = 512,
+ WQ_MAX_UNBOUND_PER_CPU = 4,
+ WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
+};
+# 385 "./include/linux/workqueue.h"
+extern struct workqueue_struct *system_wq;
+extern struct workqueue_struct *system_highpri_wq;
+extern struct workqueue_struct *system_long_wq;
+extern struct workqueue_struct *system_unbound_wq;
+extern struct workqueue_struct *system_freezable_wq;
+extern struct workqueue_struct *system_power_efficient_wq;
+extern struct workqueue_struct *system_freezable_power_efficient_wq;
+# 407 "./include/linux/workqueue.h"
+struct workqueue_struct *alloc_workqueue(const char *fmt,
+      unsigned int flags,
+      int max_active, ...);
+# 436 "./include/linux/workqueue.h"
+extern void destroy_workqueue(struct workqueue_struct *wq);
+
+struct workqueue_attrs *alloc_workqueue_attrs(void);
+void free_workqueue_attrs(struct workqueue_attrs *attrs);
+int apply_workqueue_attrs(struct workqueue_struct *wq,
+     const struct workqueue_attrs *attrs);
+int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);
+
+extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
+   struct work_struct *work);
+extern bool queue_work_node(int node, struct workqueue_struct *wq,
+       struct work_struct *work);
+extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
+   struct delayed_work *work, unsigned long delay);
+extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
+   struct delayed_work *dwork, unsigned long delay);
+extern bool queue_rcu_work(struct workqueue_struct *wq, struct rcu_work *rwork);
+
+extern void flush_workqueue(struct workqueue_struct *wq);
+extern void drain_workqueue(struct workqueue_struct *wq);
+
+extern int schedule_on_each_cpu(work_func_t func);
+
+int execute_in_process_context(work_func_t fn, struct execute_work *);
+
+extern bool flush_work(struct work_struct *work);
+extern bool cancel_work_sync(struct work_struct *work);
+
+extern bool flush_delayed_work(struct delayed_work *dwork);
+extern bool cancel_delayed_work(struct delayed_work *dwork);
+extern bool cancel_delayed_work_sync(struct delayed_work *dwork);
+
+extern bool flush_rcu_work(struct rcu_work *rwork);
+
+extern void workqueue_set_max_active(struct workqueue_struct *wq,
+         int max_active);
+extern struct work_struct *current_work(void);
+extern bool current_is_workqueue_rescuer(void);
+extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
+extern unsigned int work_busy(struct work_struct *work);
+extern __attribute__((__format__(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
+extern void print_worker_info(const char *log_lvl, struct task_struct *task);
+extern void show_workqueue_state(void);
+extern void wq_worker_comm(char *buf, size_t size, struct task_struct *task);
+# 504 "./include/linux/workqueue.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool queue_work(struct workqueue_struct *wq,
+         struct work_struct *work)
+{
+ return queue_work_on(WORK_CPU_UNBOUND, wq, work);
+}
+# 518 "./include/linux/workqueue.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool queue_delayed_work(struct workqueue_struct *wq,
+          struct delayed_work *dwork,
+          unsigned long delay)
+{
+ return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
+}
+# 533 "./include/linux/workqueue.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mod_delayed_work(struct workqueue_struct *wq,
+        struct delayed_work *dwork,
+        unsigned long delay)
+{
+ return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
+}
+# 547 "./include/linux/workqueue.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool schedule_work_on(int cpu, struct work_struct *work)
+{
+ return queue_work_on(cpu, system_wq, work);
+}
+# 566 "./include/linux/workqueue.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool schedule_work(struct work_struct *work)
+{
+ return queue_work(system_wq, work);
+}
+# 595 "./include/linux/workqueue.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void flush_scheduled_work(void)
+{
+ flush_workqueue(system_wq);
+}
+# 609 "./include/linux/workqueue.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
+         unsigned long delay)
+{
+ return queue_delayed_work_on(cpu, system_wq, dwork, delay);
+}
+# 623 "./include/linux/workqueue.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool schedule_delayed_work(struct delayed_work *dwork,
+      unsigned long delay)
+{
+ return queue_delayed_work(system_wq, dwork, delay);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long work_on_cpu(int cpu, long (*fn)(void *), void *arg)
+{
+ return fn(arg);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long work_on_cpu_safe(int cpu, long (*fn)(void *), void *arg)
+{
+ return fn(arg);
+}
+# 650 "./include/linux/workqueue.h"
+int workqueue_sysfs_register(struct workqueue_struct *wq);
+# 659 "./include/linux/workqueue.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wq_watchdog_touch(int cpu) { }
+# 668 "./include/linux/workqueue.h"
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) workqueue_init_early(void);
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) workqueue_init(void);
+# 22 "./include/linux/srcu.h" 2
+# 1 "./include/linux/rcu_segcblist.h" 1
+# 21 "./include/linux/rcu_segcblist.h"
+struct rcu_cblist {
+ struct callback_head *head;
+ struct callback_head **tail;
+ long len;
+};
+# 182 "./include/linux/rcu_segcblist.h"
+struct rcu_segcblist {
+ struct callback_head *head;
+ struct callback_head **tails[4];
+ unsigned long gp_seq[4];
+
+
+
+ long len;
+
+ long seglen[4];
+ u8 flags;
+};
+# 23 "./include/linux/srcu.h" 2
+
+struct srcu_struct;
+
+
+
+int __init_srcu_struct(struct srcu_struct *ssp, const char *name,
+         struct lock_class_key *key);
+# 47 "./include/linux/srcu.h"
+# 1 "./include/linux/srcutiny.h" 1
+# 16 "./include/linux/srcutiny.h"
+struct srcu_struct {
+ short srcu_lock_nesting[2];
+ unsigned short srcu_idx;
+ unsigned short srcu_idx_max;
+ u8 srcu_gp_running;
+ u8 srcu_gp_waiting;
+ struct swait_queue_head srcu_wq;
+
+ struct callback_head *srcu_cb_head;
+ struct callback_head **srcu_cb_tail;
+ struct work_struct srcu_work;
+
+ struct lockdep_map dep_map;
+
+};
+
+void srcu_drive_gp(struct work_struct *wp);
+# 51 "./include/linux/srcutiny.h"
+void synchronize_srcu(struct srcu_struct *ssp);
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __srcu_read_lock(struct srcu_struct *ssp)
+{
+ int idx;
+
+ idx = ((({ do { extern void __compiletime_assert_85(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ssp->srcu_idx) == sizeof(char) || sizeof(ssp->srcu_idx) == sizeof(short) || sizeof(ssp->srcu_idx) == sizeof(int) || sizeof(ssp->srcu_idx) == sizeof(long)) || sizeof(ssp->srcu_idx) == sizeof(long long))) __compiletime_assert_85(); } while (0); (*(const volatile typeof( _Generic((ssp->srcu_idx), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ssp->srcu_idx))) *)&(ssp->srcu_idx)); }) + 1) & 0x2) >> 1;
+ do { do { extern void __compiletime_assert_86(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ssp->srcu_lock_nesting[idx]) == sizeof(char) || sizeof(ssp->srcu_lock_nesting[idx]) == sizeof(short) || sizeof(ssp->srcu_lock_nesting[idx]) == sizeof(int) || sizeof(ssp->srcu_lock_nesting[idx]) == sizeof(long)) || sizeof(ssp->srcu_lock_nesting[idx]) == sizeof(long long))) __compiletime_assert_86(); } while (0); do { *(volatile typeof(ssp->srcu_lock_nesting[idx]) *)&(ssp->srcu_lock_nesting[idx]) = (ssp->srcu_lock_nesting[idx] + 1); } while (0); } while (0);
+ return idx;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void synchronize_srcu_expedited(struct srcu_struct *ssp)
+{
+ synchronize_srcu(ssp);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void srcu_barrier(struct srcu_struct *ssp)
+{
+ synchronize_srcu(ssp);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void srcu_torture_stats_print(struct srcu_struct *ssp,
+         char *tt, char *tf)
+{
+ int idx;
+
+ idx = ((({ do { extern void __compiletime_assert_87(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ssp->srcu_idx) == sizeof(char) || sizeof(ssp->srcu_idx) == sizeof(short) || sizeof(ssp->srcu_idx) == sizeof(int) || sizeof(ssp->srcu_idx) == sizeof(long)) || sizeof(ssp->srcu_idx) == sizeof(long long))) __compiletime_assert_87(); } while (0); (*(const volatile typeof( _Generic((ssp->srcu_idx), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ssp->srcu_idx))) *)&(ssp->srcu_idx)); }) + 1) & 0x2) >> 1;
+ printk("\001" "1" "%s%s Tiny SRCU per-CPU(idx=%d): (%hd,%hd)\n", tt, tf, idx, ({ do { extern void __compiletime_assert_88(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ssp->srcu_lock_nesting[!idx]) == sizeof(char) || sizeof(ssp->srcu_lock_nesting[!idx]) == sizeof(short) || sizeof(ssp->srcu_lock_nesting[!idx]) == sizeof(int) || sizeof(ssp->srcu_lock_nesting[!idx]) == sizeof(long)) || sizeof(ssp->srcu_lock_nesting[!idx]) == sizeof(long long))) __compiletime_assert_88(); } while (0); (*(const volatile typeof( _Generic((ssp->srcu_lock_nesting[!idx]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ssp->srcu_lock_nesting[!idx]))) *)&(ssp->srcu_lock_nesting[!idx])); }), ({ do { extern void __compiletime_assert_89(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ssp->srcu_lock_nesting[idx]) == sizeof(char) || sizeof(ssp->srcu_lock_nesting[idx]) == sizeof(short) || sizeof(ssp->srcu_lock_nesting[idx]) == sizeof(int) || sizeof(ssp->srcu_lock_nesting[idx]) == sizeof(long)) || sizeof(ssp->srcu_lock_nesting[idx]) == sizeof(long long))) __compiletime_assert_89(); } while (0); (*(const volatile typeof( _Generic((ssp->srcu_lock_nesting[idx]), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ssp->srcu_lock_nesting[idx]))) *)&(ssp->srcu_lock_nesting[idx])); }))
+
+
+                                          ;
+}
+# 48 "./include/linux/srcu.h" 2
+# 57 "./include/linux/srcu.h"
+void call_srcu(struct srcu_struct *ssp, struct callback_head *head,
+  void (*func)(struct callback_head *head));
+void cleanup_srcu_struct(struct srcu_struct *ssp);
+int __srcu_read_lock(struct srcu_struct *ssp) ;
+void __srcu_read_unlock(struct srcu_struct *ssp, int idx) ;
+void synchronize_srcu(struct srcu_struct *ssp);
+unsigned long get_state_synchronize_srcu(struct srcu_struct *ssp);
+unsigned long start_poll_synchronize_srcu(struct srcu_struct *ssp);
+bool poll_state_synchronize_srcu(struct srcu_struct *ssp, unsigned long cookie);
+# 85 "./include/linux/srcu.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int srcu_read_lock_held(const struct srcu_struct *ssp)
+{
+ if (!debug_lockdep_rcu_enabled())
+  return 1;
+ return lock_is_held(&ssp->dep_map);
+}
+# 153 "./include/linux/srcu.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int srcu_read_lock(struct srcu_struct *ssp)
+{
+ int retval;
+
+ retval = __srcu_read_lock(ssp);
+ rcu_lock_acquire(&(ssp)->dep_map);
+ return retval;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) int
+srcu_read_lock_notrace(struct srcu_struct *ssp)
+{
+ int retval;
+
+ retval = __srcu_read_lock(ssp);
+ return retval;
+}
+# 179 "./include/linux/srcu.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void srcu_read_unlock(struct srcu_struct *ssp, int idx)
+
+{
+ ({ int __ret_warn_on = !!(idx & ~0x1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/srcu.h"), "i" (182), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (90)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ rcu_lock_release(&(ssp)->dep_map);
+ __srcu_read_unlock(ssp, idx);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void
+srcu_read_unlock_notrace(struct srcu_struct *ssp, int idx)
+{
+ __srcu_read_unlock(ssp, idx);
+}
+# 203 "./include/linux/srcu.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void smp_mb__after_srcu_read_unlock(void)
+{
+
+}
+# 17 "./include/linux/notifier.h" 2
+# 49 "./include/linux/notifier.h"
+struct notifier_block;
+
+typedef int (*notifier_fn_t)(struct notifier_block *nb,
+   unsigned long action, void *data);
+
+struct notifier_block {
+ notifier_fn_t notifier_call;
+ struct notifier_block *next;
+ int priority;
+};
+
+struct atomic_notifier_head {
+ spinlock_t lock;
+ struct notifier_block *head;
+};
+
+struct blocking_notifier_head {
+ struct rw_semaphore rwsem;
+ struct notifier_block *head;
+};
+
+struct raw_notifier_head {
+ struct notifier_block *head;
+};
+
+struct srcu_notifier_head {
+ struct mutex mutex;
+ struct srcu_struct srcu;
+ struct notifier_block *head;
+};
+# 93 "./include/linux/notifier.h"
+extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
+# 144 "./include/linux/notifier.h"
+extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
+  struct notifier_block *nb);
+extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
+  struct notifier_block *nb);
+extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
+  struct notifier_block *nb);
+extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
+  struct notifier_block *nb);
+
+extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
+  struct notifier_block *nb);
+extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
+  struct notifier_block *nb);
+extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
+  struct notifier_block *nb);
+extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
+  struct notifier_block *nb);
+
+extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
+  unsigned long val, void *v);
+extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
+  unsigned long val, void *v);
+extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
+  unsigned long val, void *v);
+extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
+  unsigned long val, void *v);
+
+extern int atomic_notifier_call_chain_robust(struct atomic_notifier_head *nh,
+  unsigned long val_up, unsigned long val_down, void *v);
+extern int blocking_notifier_call_chain_robust(struct blocking_notifier_head *nh,
+  unsigned long val_up, unsigned long val_down, void *v);
+extern int raw_notifier_call_chain_robust(struct raw_notifier_head *nh,
+  unsigned long val_up, unsigned long val_down, void *v);
+# 189 "./include/linux/notifier.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int notifier_from_errno(int err)
+{
+ if (err)
+  return 0x8000 | (0x0001 - err);
+
+ return 0x0001;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int notifier_to_errno(int ret)
+{
+ ret &= ~0x8000;
+ return ret > 0x0001 ? 0x0001 - ret : 0;
+}
+# 233 "./include/linux/notifier.h"
+extern struct blocking_notifier_head reboot_notifier_list;
+# 14 "./arch/x86/include/asm/uprobes.h" 2
+
+typedef u8 uprobe_opcode_t;
+
+
+
+
+
+
+
+struct uprobe_xol_ops;
+
+struct arch_uprobe {
+ union {
+  u8 insn[16];
+  u8 ixol[16];
+ };
+
+ const struct uprobe_xol_ops *ops;
+
+ union {
+  struct {
+   s32 offs;
+   u8 ilen;
+   u8 opc1;
+  } branch;
+  struct {
+   u8 fixups;
+   u8 ilen;
+  } defparam;
+  struct {
+   u8 reg_offset;
+   u8 ilen;
+  } push;
+ };
+};
+
+struct arch_uprobe_task {
+
+ unsigned long saved_scratch_register;
+
+ unsigned int saved_trap_nr;
+ unsigned int saved_tf;
+};
+# 50 "./include/linux/uprobes.h" 2
+
+enum uprobe_task_state {
+ UTASK_RUNNING,
+ UTASK_SSTEP,
+ UTASK_SSTEP_ACK,
+ UTASK_SSTEP_TRAPPED,
+};
+
+
+
+
+struct uprobe_task {
+ enum uprobe_task_state state;
+
+ union {
+  struct {
+   struct arch_uprobe_task autask;
+   unsigned long vaddr;
+  };
+
+  struct {
+   struct callback_head dup_xol_work;
+   unsigned long dup_xol_addr;
+  };
+ };
+
+ struct uprobe *active_uprobe;
+ unsigned long xol_vaddr;
+
+ struct return_instance *return_instances;
+ unsigned int depth;
+};
+
+struct return_instance {
+ struct uprobe *uprobe;
+ unsigned long func;
+ unsigned long stack;
+ unsigned long orig_ret_vaddr;
+ bool chained;
+
+ struct return_instance *next;
+};
+
+enum rp_check {
+ RP_CHECK_CALL,
+ RP_CHECK_CHAIN_CALL,
+ RP_CHECK_RET,
+};
+
+struct xol_area;
+
+struct uprobes_state {
+ struct xol_area *xol_area;
+};
+
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) uprobes_init(void);
+extern int set_swbp(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
+extern int set_orig_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
+extern bool is_swbp_insn(uprobe_opcode_t *insn);
+extern bool is_trap_insn(uprobe_opcode_t *insn);
+extern unsigned long uprobe_get_swbp_addr(struct pt_regs *regs);
+extern unsigned long uprobe_get_trap_addr(struct pt_regs *regs);
+extern int uprobe_write_opcode(struct arch_uprobe *auprobe, struct mm_struct *mm, unsigned long vaddr, uprobe_opcode_t);
+extern int uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
+extern int uprobe_register_refctr(struct inode *inode, loff_t offset, loff_t ref_ctr_offset, struct uprobe_consumer *uc);
+extern int uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool);
+extern void uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
+extern int uprobe_mmap(struct vm_area_struct *vma);
+extern void uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end);
+extern void uprobe_start_dup_mmap(void);
+extern void uprobe_end_dup_mmap(void);
+extern void uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm);
+extern void uprobe_free_utask(struct task_struct *t);
+extern void uprobe_copy_process(struct task_struct *t, unsigned long flags);
+extern int uprobe_post_sstep_notifier(struct pt_regs *regs);
+extern int uprobe_pre_sstep_notifier(struct pt_regs *regs);
+extern void uprobe_notify_resume(struct pt_regs *regs);
+extern bool uprobe_deny_signal(void);
+extern bool arch_uprobe_skip_sstep(struct arch_uprobe *aup, struct pt_regs *regs);
+extern void uprobe_clear_state(struct mm_struct *mm);
+extern int arch_uprobe_analyze_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long addr);
+extern int arch_uprobe_pre_xol(struct arch_uprobe *aup, struct pt_regs *regs);
+extern int arch_uprobe_post_xol(struct arch_uprobe *aup, struct pt_regs *regs);
+extern bool arch_uprobe_xol_was_trapped(struct task_struct *tsk);
+extern int arch_uprobe_exception_notify(struct notifier_block *self, unsigned long val, void *data);
+extern void arch_uprobe_abort_xol(struct arch_uprobe *aup, struct pt_regs *regs);
+extern unsigned long arch_uretprobe_hijack_return_addr(unsigned long trampoline_vaddr, struct pt_regs *regs);
+extern bool arch_uretprobe_is_alive(struct return_instance *ret, enum rp_check ctx, struct pt_regs *regs);
+extern bool arch_uprobe_ignore(struct arch_uprobe *aup, struct pt_regs *regs);
+extern void arch_uprobe_copy_ixol(struct page *page, unsigned long vaddr,
+      void *src, unsigned long len);
+# 15 "./include/linux/mm_types.h" 2
+
+
+
+
+# 1 "./arch/x86/include/asm/mmu.h" 1
+# 19 "./arch/x86/include/asm/mmu.h"
+typedef struct {
+
+
+
+
+ u64 ctx_id;
+# 34 "./arch/x86/include/asm/mmu.h"
+ atomic64_t tlb_gen;
+
+
+
+
+
+
+
+ unsigned short flags;
+
+
+ struct mutex lock;
+ void *vdso;
+ const struct vdso_image *vdso_image;
+
+ atomic_t perf_rdpmc_allowed;
+
+
+
+
+
+ u16 pkey_allocation_map;
+ s16 execute_only_pkey;
+
+} mm_context_t;
+
+
+
+
+
+
+
+void leave_mm(int cpu);
+# 20 "./include/linux/mm_types.h" 2
+# 28 "./include/linux/mm_types.h"
+struct address_space;
+struct mem_cgroup;
+# 70 "./include/linux/mm_types.h"
+struct page {
+ unsigned long flags;
+
+
+
+
+
+
+
+ union {
+  struct {
+
+
+
+
+
+   struct list_head lru;
+
+   struct address_space *mapping;
+   unsigned long index;
+
+
+
+
+
+
+   unsigned long private;
+  };
+  struct {
+
+
+
+
+   dma_addr_t dma_addr;
+  };
+  struct {
+   union {
+    struct list_head slab_list;
+    struct {
+     struct page *next;
+
+     int pages;
+     int pobjects;
+
+
+
+
+    };
+   };
+   struct kmem_cache *slab_cache;
+
+   void *freelist;
+   union {
+    void *s_mem;
+    unsigned long counters;
+    struct {
+     unsigned inuse:16;
+     unsigned objects:15;
+     unsigned frozen:1;
+    };
+   };
+  };
+  struct {
+   unsigned long compound_head;
+
+
+   unsigned char compound_dtor;
+   unsigned char compound_order;
+   atomic_t compound_mapcount;
+   unsigned int compound_nr;
+  };
+  struct {
+   unsigned long _compound_pad_1;
+   atomic_t hpage_pinned_refcount;
+
+   struct list_head deferred_list;
+  };
+  struct {
+   unsigned long _pt_pad_1;
+   pgtable_t pmd_huge_pte;
+   unsigned long _pt_pad_2;
+   union {
+    struct mm_struct *pt_mm;
+    atomic_t pt_frag_refcount;
+   };
+
+   spinlock_t *ptl;
+
+
+
+  };
+  struct {
+
+   struct dev_pagemap *pgmap;
+   void *zone_device_data;
+# 175 "./include/linux/mm_types.h"
+  };
+
+
+  struct callback_head callback_head;
+ };
+
+ union {
+
+
+
+
+  atomic_t _mapcount;
+
+
+
+
+
+
+
+  unsigned int page_type;
+
+  unsigned int active;
+  int units;
+ };
+
+
+ atomic_t _refcount;
+# 225 "./include/linux/mm_types.h"
+} __attribute__((__aligned__(2 * sizeof(unsigned long))));
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) atomic_t *compound_mapcount_ptr(struct page *page)
+{
+ return &page[1].compound_mapcount;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) atomic_t *compound_pincount_ptr(struct page *page)
+{
+ return &page[2].hpage_pinned_refcount;
+}
+# 247 "./include/linux/mm_types.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_page_private(struct page *page, unsigned long private)
+{
+ page->private = private;
+}
+
+struct page_frag_cache {
+ void * va;
+
+ __u16 offset;
+ __u16 size;
+
+
+
+
+
+
+ unsigned int pagecnt_bias;
+ bool pfmemalloc;
+};
+
+typedef unsigned long vm_flags_t;
+
+
+
+
+
+
+struct vm_region {
+ struct rb_node vm_rb;
+ vm_flags_t vm_flags;
+ unsigned long vm_start;
+ unsigned long vm_end;
+ unsigned long vm_top;
+ unsigned long vm_pgoff;
+ struct file *vm_file;
+
+ int vm_usage;
+ bool vm_icache_flushed : 1;
+
+};
+# 295 "./include/linux/mm_types.h"
+struct vm_userfaultfd_ctx {};
+# 304 "./include/linux/mm_types.h"
+struct vm_area_struct {
+
+
+ unsigned long vm_start;
+ unsigned long vm_end;
+
+
+
+ struct vm_area_struct *vm_next, *vm_prev;
+
+ struct rb_node vm_rb;
+
+
+
+
+
+
+
+ unsigned long rb_subtree_gap;
+
+
+
+ struct mm_struct *vm_mm;
+
+
+
+
+
+ pgprot_t vm_page_prot;
+ unsigned long vm_flags;
+
+
+
+
+
+ struct {
+  struct rb_node rb;
+  unsigned long rb_subtree_last;
+ } shared;
+
+
+
+
+
+
+
+ struct list_head anon_vma_chain;
+
+ struct anon_vma *anon_vma;
+
+
+ const struct vm_operations_struct *vm_ops;
+
+
+ unsigned long vm_pgoff;
+
+ struct file * vm_file;
+ void * vm_private_data;
+# 372 "./include/linux/mm_types.h"
+ struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
+} __attribute__((__designated_init__));
+
+struct core_thread {
+ struct task_struct *task;
+ struct core_thread *next;
+};
+
+struct core_state {
+ atomic_t nr_threads;
+ struct core_thread dumper;
+ struct completion startup;
+};
+
+struct kioctx_table;
+struct mm_struct {
+ struct {
+  struct vm_area_struct *mmap;
+  struct rb_root mm_rb;
+  u64 vmacache_seqnum;
+
+  unsigned long (*get_unmapped_area) (struct file *filp,
+    unsigned long addr, unsigned long len,
+    unsigned long pgoff, unsigned long flags);
+
+  unsigned long mmap_base;
+  unsigned long mmap_legacy_base;
+
+
+
+
+
+  unsigned long task_size;
+  unsigned long highest_vm_end;
+  pgd_t * pgd;
+# 427 "./include/linux/mm_types.h"
+  atomic_t mm_users;
+# 436 "./include/linux/mm_types.h"
+  atomic_t mm_count;
+# 446 "./include/linux/mm_types.h"
+  atomic_t has_pinned;
+
+
+
+
+
+
+  seqcount_t write_protect_seq;
+
+
+  atomic_long_t pgtables_bytes;
+
+  int map_count;
+
+  spinlock_t page_table_lock;
+
+
+  struct rw_semaphore mmap_lock;
+
+  struct list_head mmlist;
+
+
+
+
+
+
+  unsigned long hiwater_rss;
+  unsigned long hiwater_vm;
+
+  unsigned long total_vm;
+  unsigned long locked_vm;
+  atomic64_t pinned_vm;
+  unsigned long data_vm;
+  unsigned long exec_vm;
+  unsigned long stack_vm;
+  unsigned long def_flags;
+
+  spinlock_t arg_lock;
+  unsigned long start_code, end_code, start_data, end_data;
+  unsigned long start_brk, brk, start_stack;
+  unsigned long arg_start, arg_end, env_start, env_end;
+
+  unsigned long saved_auxv[(2*(1 + 20 + 1))];
+
+
+
+
+
+  struct mm_rss_stat rss_stat;
+
+  struct linux_binfmt *binfmt;
+
+
+  mm_context_t context;
+
+  unsigned long flags;
+
+  struct core_state *core_state;
+# 522 "./include/linux/mm_types.h"
+  struct user_namespace *user_ns;
+
+
+  struct file *exe_file;
+# 551 "./include/linux/mm_types.h"
+  atomic_t tlb_flush_pending;
+
+
+  bool tlb_flush_batched;
+
+  struct uprobes_state uprobes_state;
+
+
+
+  struct work_struct async_put_work;
+
+
+
+
+ } __attribute__((__designated_init__));
+
+
+
+
+
+ unsigned long cpu_bitmap[];
+};
+
+extern struct mm_struct init_mm;
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mm_init_cpumask(struct mm_struct *mm)
+{
+ unsigned long cpu_bitmap = (unsigned long)mm;
+
+ cpu_bitmap += __builtin_offsetof(struct mm_struct, cpu_bitmap);
+ cpumask_clear((struct cpumask *)cpu_bitmap);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) cpumask_t *mm_cpumask(struct mm_struct *mm)
+{
+ return (struct cpumask *)&mm->cpu_bitmap;
+}
+
+struct mmu_gather;
+extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm);
+extern void tlb_gather_mmu_fullmm(struct mmu_gather *tlb, struct mm_struct *mm);
+extern void tlb_finish_mmu(struct mmu_gather *tlb);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_tlb_flush_pending(struct mm_struct *mm)
+{
+ atomic_set(&mm->tlb_flush_pending, 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inc_tlb_flush_pending(struct mm_struct *mm)
+{
+ atomic_inc(&mm->tlb_flush_pending);
+# 640 "./include/linux/mm_types.h"
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dec_tlb_flush_pending(struct mm_struct *mm)
+{
+# 652 "./include/linux/mm_types.h"
+ atomic_dec(&mm->tlb_flush_pending);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mm_tlb_flush_pending(struct mm_struct *mm)
+{
+# 665 "./include/linux/mm_types.h"
+ return atomic_read(&mm->tlb_flush_pending);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mm_tlb_flush_nested(struct mm_struct *mm)
+{
+
+
+
+
+
+
+
+ return atomic_read(&mm->tlb_flush_pending) > 1;
+}
+
+struct vm_fault;
+
+
+
+
+
+
+typedef unsigned int vm_fault_t;
+# 714 "./include/linux/mm_types.h"
+enum vm_fault_reason {
+ VM_FAULT_OOM = ( vm_fault_t)0x000001,
+ VM_FAULT_SIGBUS = ( vm_fault_t)0x000002,
+ VM_FAULT_MAJOR = ( vm_fault_t)0x000004,
+ VM_FAULT_WRITE = ( vm_fault_t)0x000008,
+ VM_FAULT_HWPOISON = ( vm_fault_t)0x000010,
+ VM_FAULT_HWPOISON_LARGE = ( vm_fault_t)0x000020,
+ VM_FAULT_SIGSEGV = ( vm_fault_t)0x000040,
+ VM_FAULT_NOPAGE = ( vm_fault_t)0x000100,
+ VM_FAULT_LOCKED = ( vm_fault_t)0x000200,
+ VM_FAULT_RETRY = ( vm_fault_t)0x000400,
+ VM_FAULT_FALLBACK = ( vm_fault_t)0x000800,
+ VM_FAULT_DONE_COW = ( vm_fault_t)0x001000,
+ VM_FAULT_NEEDDSYNC = ( vm_fault_t)0x002000,
+ VM_FAULT_HINDEX_MASK = ( vm_fault_t)0x0f0000,
+};
+# 754 "./include/linux/mm_types.h"
+struct vm_special_mapping {
+ const char *name;
+
+
+
+
+
+
+
+ struct page **pages;
+
+
+
+
+
+ vm_fault_t (*fault)(const struct vm_special_mapping *sm,
+    struct vm_area_struct *vma,
+    struct vm_fault *vmf);
+
+ int (*mremap)(const struct vm_special_mapping *sm,
+       struct vm_area_struct *new_vma);
+};
+
+enum tlb_flush_reason {
+ TLB_FLUSH_ON_TASK_SWITCH,
+ TLB_REMOTE_SHOOTDOWN,
+ TLB_LOCAL_SHOOTDOWN,
+ TLB_LOCAL_MM_SHOOTDOWN,
+ TLB_REMOTE_SEND_IPI,
+ NR_TLB_FLUSH_REASONS,
+};
+
+
+
+
+
+typedef struct {
+ unsigned long val;
+} swp_entry_t;
+# 22 "./include/linux/mmzone.h" 2
+# 1 "./include/linux/page-flags.h" 1
+# 103 "./include/linux/page-flags.h"
+enum pageflags {
+ PG_locked,
+ PG_referenced,
+ PG_uptodate,
+ PG_dirty,
+ PG_lru,
+ PG_active,
+ PG_workingset,
+ PG_waiters,
+ PG_error,
+ PG_slab,
+ PG_owner_priv_1,
+ PG_arch_1,
+ PG_reserved,
+ PG_private,
+ PG_private_2,
+ PG_writeback,
+ PG_head,
+ PG_mappedtodisk,
+ PG_reclaim,
+ PG_swapbacked,
+ PG_unevictable,
+
+ PG_mlocked,
+# 139 "./include/linux/page-flags.h"
+ PG_arch_2,
+
+ __NR_PAGEFLAGS,
+
+
+ PG_checked = PG_owner_priv_1,
+
+
+ PG_swapcache = PG_owner_priv_1,
+
+
+
+
+
+ PG_fscache = PG_private_2,
+
+
+
+ PG_pinned = PG_owner_priv_1,
+
+ PG_savepinned = PG_dirty,
+
+ PG_foreign = PG_owner_priv_1,
+
+ PG_xen_remapped = PG_owner_priv_1,
+
+
+ PG_slob_free = PG_private,
+
+
+ PG_double_map = PG_workingset,
+
+
+ PG_isolated = PG_reclaim,
+
+
+ PG_reported = PG_uptodate,
+};
+
+
+
+struct page;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *compound_head(struct page *page)
+{
+ unsigned long head = ({ do { extern void __compiletime_assert_91(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_91(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); });
+
+ if (__builtin_expect(!!(head & 1), 0))
+  return (struct page *) (head - 1);
+ return page;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageTail(struct page *page)
+{
+ return ({ do { extern void __compiletime_assert_92(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_92(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); }) & 1;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageCompound(struct page *page)
+{
+ return test_bit(PG_head, &page->flags) || PageTail(page);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PagePoisoned(const struct page *page)
+{
+ return page->flags == -1l;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void page_init_poison(struct page *page, size_t size)
+{
+}
+# 328 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageLocked(struct page *page) { return test_bit(PG_locked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageLocked(struct page *page) { __set_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageLocked(struct page *page) { __clear_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageWaiters(struct page *page) { return test_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageWaiters(struct page *page) { set_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageWaiters(struct page *page) { clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageWaiters(struct page *page) { __clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageError(struct page *page) { return test_bit(PG_error, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageError(struct page *page) { set_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageError(struct page *page) { clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageError(struct page *page) { return test_and_clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageReferenced(struct page *page) { return test_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageReferenced(struct page *page) { __set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageDirty(struct page *page) { return test_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageDirty(struct page *page) { set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageDirty(struct page *page) { __clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageLRU(struct page *page) { return test_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageLRU(struct page *page) { set_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageLRU(struct page *page) { __clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageLRU(struct page *page) { return test_and_clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageActive(struct page *page) { return test_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageActive(struct page *page) { set_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageActive(struct page *page) { clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageActive(struct page *page) { __clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageActive(struct page *page) { return test_and_clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageWorkingset(struct page *page) { return test_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageWorkingset(struct page *page) { set_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageWorkingset(struct page *page) { clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageWorkingset(struct page *page) { return test_and_clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageSlab(struct page *page) { return test_bit(PG_slab, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageSlab(struct page *page) { __set_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageSlab(struct page *page) { __clear_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageSlobFree(struct page *page) { return test_bit(PG_slob_free, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageSlobFree(struct page *page) { __set_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageSlobFree(struct page *page) { __clear_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageChecked(struct page *page) { return test_bit(PG_checked, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageChecked(struct page *page) { set_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PagePinned(struct page *page) { return test_bit(PG_pinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPagePinned(struct page *page) { set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageSavePinned(struct page *page) { return test_bit(PG_savepinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageForeign(struct page *page) { return test_bit(PG_foreign, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageForeign(struct page *page) { set_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageForeign(struct page *page) { clear_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageXenRemapped(struct page *page) { return test_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageXenRemapped(struct page *page) { set_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageXenRemapped(struct page *page) { clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageXenRemapped(struct page *page) { return test_and_clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageReserved(struct page *page) { return test_bit(PG_reserved, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageReserved(struct page *page) { set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageReserved(struct page *page) { __clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageReserved(struct page *page) { __set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageSwapBacked(struct page *page) { return test_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageSwapBacked(struct page *page) { set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageSwapBacked(struct page *page) { clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageSwapBacked(struct page *page) { __clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageSwapBacked(struct page *page) { __set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PagePrivate(struct page *page) { return test_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPagePrivate(struct page *page) { set_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PagePrivate2(struct page *page) { return test_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPagePrivate2(struct page *page) { set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPagePrivate2(struct page *page) { clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestSetPagePrivate2(struct page *page) { return test_and_set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPagePrivate2(struct page *page) { return test_and_clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageOwnerPriv1(struct page *page) { return test_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageOwnerPriv1(struct page *page) { set_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageOwnerPriv1(struct page *page) { clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageOwnerPriv1(struct page *page) { return test_and_clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageWriteback(struct page *page) { return test_bit(PG_writeback, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageMappedToDisk(struct page *page) { return test_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageReclaim(struct page *page) { return test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageReadahead(struct page *page) { return test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageReadahead(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageReadahead(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageReadahead(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+# 392 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageHighMem(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageHighMem(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageHighMem(struct page *page) { }
+# 407 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageSwapCache(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageSwapCache(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageSwapCache(struct page *page) { }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageUnevictable(struct page *page) { return test_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageUnevictable(struct page *page) { set_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageUnevictable(struct page *page) { clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageUnevictable(struct page *page) { __clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageUnevictable(struct page *page) { return test_and_clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageMlocked(struct page *page) { return test_bit(PG_mlocked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageMlocked(struct page *page) { set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageMlocked(struct page *page) { clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageMlocked(struct page *page) { __clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestSetPageMlocked(struct page *page) { return test_and_set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int TestClearPageMlocked(struct page *page) { return test_and_clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+# 426 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageUncached(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageUncached(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageUncached(struct page *page) { }
+# 435 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageHWPoison(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageHWPoison(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageHWPoison(struct page *page) { }
+# 452 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageReported(struct page *page) { return test_bit(PG_reported, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageReported(struct page *page) { __set_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageReported(struct page *page) { __clear_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
+# 476 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageMappingFlags(struct page *page)
+{
+ return ((unsigned long)page->mapping & (0x1 | 0x2)) != 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageAnon(struct page *page)
+{
+ page = compound_head(page);
+ return ((unsigned long)page->mapping & 0x1) != 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int __PageMovable(struct page *page)
+{
+ return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
+    0x2;
+}
+# 507 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageKsm(const struct page *page) { return 0; }
+
+
+u64 stable_page_flags(struct page *page);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageUptodate(struct page *page)
+{
+ int ret;
+ page = compound_head(page);
+ ret = test_bit(PG_uptodate, &(page)->flags);
+# 525 "./include/linux/page-flags.h"
+ if (ret)
+  __asm__ __volatile__("": : :"memory");
+
+ return ret;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageUptodate(struct page *page)
+{
+ ((void)(sizeof(( long)(PageTail(page)))));
+ __asm__ __volatile__("": : :"memory");
+ __set_bit(PG_uptodate, &page->flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void SetPageUptodate(struct page *page)
+{
+ ((void)(sizeof(( long)(PageTail(page)))));
+
+
+
+
+
+ __asm__ __volatile__("": : :"memory");
+ set_bit(PG_uptodate, &page->flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
+
+int test_clear_page_writeback(struct page *page);
+int __test_set_page_writeback(struct page *page, bool keep_write);
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_page_writeback(struct page *page)
+{
+ __test_set_page_writeback(page, false);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_page_writeback_keepwrite(struct page *page)
+{
+ __test_set_page_writeback(page, true);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageHead(struct page *page) { return test_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageHead(struct page *page) { __set_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageHead(struct page *page) { __clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void ClearPageHead(struct page *page) { clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void set_compound_head(struct page *page, struct page *head)
+{
+ do { do { extern void __compiletime_assert_93(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_93(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = ((unsigned long)head + 1); } while (0); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void clear_compound_head(struct page *page)
+{
+ do { do { extern void __compiletime_assert_94(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_94(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = (0); } while (0); } while (0);
+}
+# 596 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageHuge(const struct page *page) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageHeadHuge(const struct page *page) { return 0; }
+# 689 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageTransHuge(const struct page *page) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageTransCompound(const struct page *page) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageTransCompoundMap(const struct page *page) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageTransTail(const struct page *page) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageDoubleMap(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageDoubleMap(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageDoubleMap(struct page *page) { }
+ static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int TestSetPageDoubleMap(struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int TestClearPageDoubleMap(struct page *page) { return 0; }
+# 717 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_has_type(struct page *page)
+{
+ return (int)page->page_type < -128;
+}
+# 742 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageBuddy(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000080)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageBuddy(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000080; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageBuddy(struct page *page) { ((void)(sizeof(( long)(!PageBuddy(page))))); page->page_type |= 0x00000080; }
+# 761 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageOffline(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000100)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageOffline(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000100; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageOffline(struct page *page) { ((void)(sizeof(( long)(!PageOffline(page))))); page->page_type |= 0x00000100; }
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageTable(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000200)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageTable(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000200; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageTable(struct page *page) { ((void)(sizeof(( long)(!PageTable(page))))); page->page_type |= 0x00000200; }
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageGuard(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000400)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageGuard(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000400; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageGuard(struct page *page) { ((void)(sizeof(( long)(!PageGuard(page))))); page->page_type |= 0x00000400; }
+
+extern bool is_free_buddy_page(struct page *page);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int PageIsolated(struct page *page) { return test_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __SetPageIsolated(struct page *page) { __set_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void __ClearPageIsolated(struct page *page) { __clear_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); };
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int PageSlabPfmemalloc(struct page *page)
+{
+ ((void)(sizeof(( long)(!PageSlab(page)))));
+ return PageActive(page);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void SetPageSlabPfmemalloc(struct page *page)
+{
+ ((void)(sizeof(( long)(!PageSlab(page)))));
+ SetPageActive(page);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __ClearPageSlabPfmemalloc(struct page *page)
+{
+ ((void)(sizeof(( long)(!PageSlab(page)))));
+ __ClearPageActive(page);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ClearPageSlabPfmemalloc(struct page *page)
+{
+ ((void)(sizeof(( long)(!PageSlab(page)))));
+ ClearPageActive(page);
+}
+# 842 "./include/linux/page-flags.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_has_private(struct page *page)
+{
+ return !!(page->flags & (1UL << PG_private | 1UL << PG_private_2));
+}
+# 23 "./include/linux/mmzone.h" 2
+# 41 "./include/linux/mmzone.h"
+enum migratetype {
+ MIGRATE_UNMOVABLE,
+ MIGRATE_MOVABLE,
+ MIGRATE_RECLAIMABLE,
+ MIGRATE_PCPTYPES,
+ MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,
+# 66 "./include/linux/mmzone.h"
+ MIGRATE_TYPES
+};
+
+
+extern const char * const migratetype_names[MIGRATE_TYPES];
+# 80 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_migrate_movable(int mt)
+{
+ return false || mt == MIGRATE_MOVABLE;
+}
+
+
+
+
+
+extern int page_group_by_mobility_disabled;
+
+
+
+
+
+
+struct free_area {
+ struct list_head free_list[MIGRATE_TYPES];
+ unsigned long nr_free;
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *get_page_from_free_area(struct free_area *area,
+         int migratetype)
+{
+ return ({ struct list_head *head__ = (&area->free_list[migratetype]); struct list_head *pos__ = ({ do { extern void __compiletime_assert_95(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(head__->next) == sizeof(char) || sizeof(head__->next) == sizeof(short) || sizeof(head__->next) == sizeof(int) || sizeof(head__->next) == sizeof(long)) || sizeof(head__->next) == sizeof(long long))) __compiletime_assert_95(); } while (0); (*(const volatile typeof( _Generic((head__->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head__->next))) *)&(head__->next)); }); pos__ != head__ ? ({ void *__mptr = (void *)(pos__); do { extern void __compiletime_assert_96(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(pos__)), typeof(((struct page *)0)->lru)) && !__builtin_types_compatible_p(typeof(*(pos__)), typeof(void))))) __compiletime_assert_96(); } while (0); ((struct page *)(__mptr - __builtin_offsetof(struct page, lru))); }) : ((void *)0); })
+                      ;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool free_area_empty(struct free_area *area, int migratetype)
+{
+ return list_empty(&area->free_list[migratetype]);
+}
+
+struct pglist_data;
+# 143 "./include/linux/mmzone.h"
+enum zone_stat_item {
+
+ NR_FREE_PAGES,
+ NR_ZONE_LRU_BASE,
+ NR_ZONE_INACTIVE_ANON = NR_ZONE_LRU_BASE,
+ NR_ZONE_ACTIVE_ANON,
+ NR_ZONE_INACTIVE_FILE,
+ NR_ZONE_ACTIVE_FILE,
+ NR_ZONE_UNEVICTABLE,
+ NR_ZONE_WRITE_PENDING,
+ NR_MLOCK,
+
+ NR_BOUNCE,
+
+
+
+ NR_FREE_CMA_PAGES,
+ NR_VM_ZONE_STAT_ITEMS };
+
+enum node_stat_item {
+ NR_LRU_BASE,
+ NR_INACTIVE_ANON = NR_LRU_BASE,
+ NR_ACTIVE_ANON,
+ NR_INACTIVE_FILE,
+ NR_ACTIVE_FILE,
+ NR_UNEVICTABLE,
+ NR_SLAB_RECLAIMABLE_B,
+ NR_SLAB_UNRECLAIMABLE_B,
+ NR_ISOLATED_ANON,
+ NR_ISOLATED_FILE,
+ WORKINGSET_NODES,
+ WORKINGSET_REFAULT_BASE,
+ WORKINGSET_REFAULT_ANON = WORKINGSET_REFAULT_BASE,
+ WORKINGSET_REFAULT_FILE,
+ WORKINGSET_ACTIVATE_BASE,
+ WORKINGSET_ACTIVATE_ANON = WORKINGSET_ACTIVATE_BASE,
+ WORKINGSET_ACTIVATE_FILE,
+ WORKINGSET_RESTORE_BASE,
+ WORKINGSET_RESTORE_ANON = WORKINGSET_RESTORE_BASE,
+ WORKINGSET_RESTORE_FILE,
+ WORKINGSET_NODERECLAIM,
+ NR_ANON_MAPPED,
+ NR_FILE_MAPPED,
+
+ NR_FILE_PAGES,
+ NR_FILE_DIRTY,
+ NR_WRITEBACK,
+ NR_WRITEBACK_TEMP,
+ NR_SHMEM,
+ NR_SHMEM_THPS,
+ NR_SHMEM_PMDMAPPED,
+ NR_FILE_THPS,
+ NR_FILE_PMDMAPPED,
+ NR_ANON_THPS,
+ NR_VMSCAN_WRITE,
+ NR_VMSCAN_IMMEDIATE,
+ NR_DIRTIED,
+ NR_WRITTEN,
+ NR_KERNEL_MISC_RECLAIMABLE,
+ NR_FOLL_PIN_ACQUIRED,
+ NR_FOLL_PIN_RELEASED,
+ NR_KERNEL_STACK_KB,
+
+
+
+ NR_PAGETABLE,
+
+
+
+ NR_VM_NODE_STAT_ITEMS
+};
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool vmstat_item_print_in_thp(enum node_stat_item item)
+{
+ if (!0)
+  return false;
+
+ return item == NR_ANON_THPS ||
+        item == NR_FILE_THPS ||
+        item == NR_SHMEM_THPS ||
+        item == NR_SHMEM_PMDMAPPED ||
+        item == NR_FILE_PMDMAPPED;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool vmstat_item_in_bytes(int idx)
+{
+# 248 "./include/linux/mmzone.h"
+ return (idx == NR_SLAB_RECLAIMABLE_B ||
+  idx == NR_SLAB_UNRECLAIMABLE_B);
+}
+# 265 "./include/linux/mmzone.h"
+enum lru_list {
+ LRU_INACTIVE_ANON = 0,
+ LRU_ACTIVE_ANON = 0 + 1,
+ LRU_INACTIVE_FILE = 0 + 2,
+ LRU_ACTIVE_FILE = 0 + 2 + 1,
+ LRU_UNEVICTABLE,
+ NR_LRU_LISTS
+};
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_file_lru(enum lru_list lru)
+{
+ return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_active_lru(enum lru_list lru)
+{
+ return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
+}
+
+
+
+enum lruvec_flags {
+ LRUVEC_CONGESTED,
+
+
+};
+
+struct lruvec {
+ struct list_head lists[NR_LRU_LISTS];
+
+ spinlock_t lru_lock;
+
+
+
+
+
+ unsigned long anon_cost;
+ unsigned long file_cost;
+
+ atomic_long_t nonresident_age;
+
+ unsigned long refaults[2];
+
+ unsigned long flags;
+
+
+
+};
+# 326 "./include/linux/mmzone.h"
+typedef unsigned isolate_mode_t;
+
+enum zone_watermarks {
+ WMARK_MIN,
+ WMARK_LOW,
+ WMARK_HIGH,
+ NR_WMARK
+};
+
+
+
+
+
+
+struct per_cpu_pages {
+ int count;
+ int high;
+ int batch;
+
+
+ struct list_head lists[MIGRATE_PCPTYPES];
+};
+
+struct per_cpu_pageset {
+ struct per_cpu_pages pcp;
+# 359 "./include/linux/mmzone.h"
+};
+
+struct per_cpu_nodestat {
+ s8 stat_threshold;
+ s8 vm_node_stat_diff[NR_VM_NODE_STAT_ITEMS];
+};
+
+
+
+enum zone_type {
+# 383 "./include/linux/mmzone.h"
+ ZONE_DMA32,
+
+
+
+
+
+
+ ZONE_NORMAL,
+# 437 "./include/linux/mmzone.h"
+ ZONE_MOVABLE,
+
+
+
+ __MAX_NR_ZONES
+
+};
+
+
+
+
+
+struct zone {
+
+
+
+ unsigned long _watermark[NR_WMARK];
+ unsigned long watermark_boost;
+
+ unsigned long nr_reserved_highatomic;
+# 467 "./include/linux/mmzone.h"
+ long lowmem_reserve[3];
+
+
+
+
+ struct pglist_data *zone_pgdat;
+ struct per_cpu_pageset *pageset;
+
+
+
+
+ int pageset_high;
+ int pageset_batch;
+# 490 "./include/linux/mmzone.h"
+ unsigned long zone_start_pfn;
+# 530 "./include/linux/mmzone.h"
+ atomic_long_t managed_pages;
+ unsigned long spanned_pages;
+ unsigned long present_pages;
+
+
+
+
+ const char *name;
+# 553 "./include/linux/mmzone.h"
+ int initialized;
+
+
+
+
+
+ struct free_area free_area[11];
+
+
+ unsigned long flags;
+
+
+ spinlock_t lock;
+
+
+
+
+
+
+
+
+
+ unsigned long percpu_drift_mark;
+# 603 "./include/linux/mmzone.h"
+ bool contiguous;
+
+
+
+ atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
+ atomic_long_t vm_numa_stat[0];
+} ;
+
+enum pgdat_flags {
+ PGDAT_DIRTY,
+
+
+
+ PGDAT_WRITEBACK,
+
+
+ PGDAT_RECLAIM_LOCKED,
+};
+
+enum zone_flags {
+ ZONE_BOOSTED_WATERMARK,
+
+
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long zone_managed_pages(struct zone *zone)
+{
+ return (unsigned long)atomic_long_read(&zone->managed_pages);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long zone_cma_pages(struct zone *zone)
+{
+
+
+
+ return 0;
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long zone_end_pfn(const struct zone *zone)
+{
+ return zone->zone_start_pfn + zone->spanned_pages;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zone_spans_pfn(const struct zone *zone, unsigned long pfn)
+{
+ return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zone_is_initialized(struct zone *zone)
+{
+ return zone->initialized;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zone_is_empty(struct zone *zone)
+{
+ return zone->spanned_pages == 0;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zone_intersects(struct zone *zone,
+  unsigned long start_pfn, unsigned long nr_pages)
+{
+ if (zone_is_empty(zone))
+  return false;
+ if (start_pfn >= zone_end_pfn(zone) ||
+     start_pfn + nr_pages <= zone->zone_start_pfn)
+  return false;
+
+ return true;
+}
+# 688 "./include/linux/mmzone.h"
+enum {
+ ZONELIST_FALLBACK,
+
+
+
+
+
+
+
+ MAX_ZONELISTS
+};
+
+
+
+
+
+struct zoneref {
+ struct zone *zone;
+ int zone_idx;
+};
+# 723 "./include/linux/mmzone.h"
+struct zonelist {
+ struct zoneref _zonerefs[((1 << 0) * 3) + 1];
+};
+
+
+
+extern struct page *mem_map;
+# 748 "./include/linux/mmzone.h"
+typedef struct pglist_data {
+
+
+
+
+
+ struct zone node_zones[3];
+
+
+
+
+
+
+ struct zonelist node_zonelists[MAX_ZONELISTS];
+
+ int nr_zones;
+# 785 "./include/linux/mmzone.h"
+ unsigned long node_start_pfn;
+ unsigned long node_present_pages;
+ unsigned long node_spanned_pages;
+
+ int node_id;
+ wait_queue_head_t kswapd_wait;
+ wait_queue_head_t pfmemalloc_wait;
+ struct task_struct *kswapd;
+
+ int kswapd_order;
+ enum zone_type kswapd_highest_zoneidx;
+
+ int kswapd_failures;
+# 809 "./include/linux/mmzone.h"
+ unsigned long totalreserve_pages;
+# 820 "./include/linux/mmzone.h"
+
+# 841 "./include/linux/mmzone.h"
+ struct lruvec __lruvec;
+
+ unsigned long flags;
+
+
+
+
+ struct per_cpu_nodestat *per_cpu_nodestats;
+ atomic_long_t vm_stat[NR_VM_NODE_STAT_ITEMS];
+} pg_data_t;
+# 864 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pgdat_end_pfn(pg_data_t *pgdat)
+{
+ return pgdat->node_start_pfn + pgdat->node_spanned_pages;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pgdat_is_empty(pg_data_t *pgdat)
+{
+ return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
+}
+
+# 1 "./include/linux/memory_hotplug.h" 1
+
+
+
+
+# 1 "./include/linux/mmzone.h" 1
+# 6 "./include/linux/memory_hotplug.h" 2
+
+
+
+
+struct page;
+struct zone;
+struct pglist_data;
+struct mem_section;
+struct memory_block;
+struct resource;
+struct vmem_altmap;
+# 239 "./include/linux/memory_hotplug.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned zone_span_seqbegin(struct zone *zone)
+{
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int zone_span_seqretry(struct zone *zone, unsigned iv)
+{
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_span_writelock(struct zone *zone) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_span_writeunlock(struct zone *zone) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_seqlock_init(struct zone *zone) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void register_page_bootmem_info_node(struct pglist_data *pgdat)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int try_online_node(int nid)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void get_online_mems(void) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_online_mems(void) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_hotplug_begin(void) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mem_hotplug_done(void) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool movable_node_is_enabled(void)
+{
+ return false;
+}
+
+
+
+
+
+
+
+struct range arch_get_mappable_range(void);
+# 302 "./include/linux/memory_hotplug.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pgdat_resize_lock(struct pglist_data *p, unsigned long *f) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pgdat_resize_unlock(struct pglist_data *p, unsigned long *f) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pgdat_resize_init(struct pglist_data *pgdat) {}
+# 316 "./include/linux/memory_hotplug.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void try_offline_node(int nid) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int offline_pages(unsigned long start_pfn, unsigned long nr_pages)
+{
+ return -22;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int remove_memory(int nid, u64 start, u64 size)
+{
+ return -16;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __remove_memory(int nid, u64 start, u64 size) {}
+
+
+extern void set_zone_contiguous(struct zone *zone);
+extern void clear_zone_contiguous(struct zone *zone);
+# 875 "./include/linux/mmzone.h" 2
+
+void build_all_zonelists(pg_data_t *pgdat);
+void wakeup_kswapd(struct zone *zone, gfp_t gfp_mask, int order,
+     enum zone_type highest_zoneidx);
+bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
+    int highest_zoneidx, unsigned int alloc_flags,
+    long free_pages);
+bool zone_watermark_ok(struct zone *z, unsigned int order,
+  unsigned long mark, int highest_zoneidx,
+  unsigned int alloc_flags);
+bool zone_watermark_ok_safe(struct zone *z, unsigned int order,
+  unsigned long mark, int highest_zoneidx);
+
+
+
+
+enum meminit_context {
+ MEMINIT_EARLY,
+ MEMINIT_HOTPLUG,
+};
+
+extern void init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
+         unsigned long size);
+
+extern void lruvec_init(struct lruvec *lruvec);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pglist_data *lruvec_pgdat(struct lruvec *lruvec)
+{
+
+
+
+ return ({ void *__mptr = (void *)(lruvec); do { extern void __compiletime_assert_97(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(lruvec)), typeof(((struct pglist_data *)0)->__lruvec)) && !__builtin_types_compatible_p(typeof(*(lruvec)), typeof(void))))) __compiletime_assert_97(); } while (0); ((struct pglist_data *)(__mptr - __builtin_offsetof(struct pglist_data, __lruvec))); });
+
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int local_memory_node(int node_id) { return node_id; };
+# 927 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool zone_is_zone_device(struct zone *zone)
+{
+ return false;
+}
+# 939 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool managed_zone(struct zone *zone)
+{
+ return zone_managed_pages(zone);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool populated_zone(struct zone *zone)
+{
+ return zone->present_pages;
+}
+# 961 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int zone_to_nid(struct zone *zone)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void zone_set_nid(struct zone *zone, int nid) {}
+
+
+extern int movable_zone;
+# 982 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_highmem_idx(enum zone_type idx)
+{
+
+
+
+
+ return 0;
+
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_highmem(struct zone *zone)
+{
+
+
+
+ return 0;
+
+}
+
+
+struct ctl_table;
+
+int min_free_kbytes_sysctl_handler(struct ctl_table *, int, void *, size_t *,
+  loff_t *);
+int watermark_scale_factor_sysctl_handler(struct ctl_table *, int, void *,
+  size_t *, loff_t *);
+extern int sysctl_lowmem_reserve_ratio[3];
+int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int, void *,
+  size_t *, loff_t *);
+int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *, int,
+  void *, size_t *, loff_t *);
+int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
+  void *, size_t *, loff_t *);
+int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
+  void *, size_t *, loff_t *);
+int numa_zonelist_order_handler(struct ctl_table *, int,
+  void *, size_t *, loff_t *);
+extern int percpu_pagelist_fraction;
+extern char numa_zonelist_order[];
+
+
+
+
+extern struct pglist_data contig_page_data;
+# 1041 "./include/linux/mmzone.h"
+extern struct pglist_data *first_online_pgdat(void);
+extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
+extern struct zone *next_zone(struct zone *zone);
+# 1073 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct zone *zonelist_zone(struct zoneref *zoneref)
+{
+ return zoneref->zone;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int zonelist_zone_idx(struct zoneref *zoneref)
+{
+ return zoneref->zone_idx;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int zonelist_node_idx(struct zoneref *zoneref)
+{
+ return zone_to_nid(zoneref->zone);
+}
+
+struct zoneref *__next_zones_zonelist(struct zoneref *z,
+     enum zone_type highest_zoneidx,
+     nodemask_t *nodes);
+# 1104 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct zoneref *next_zones_zonelist(struct zoneref *z,
+     enum zone_type highest_zoneidx,
+     nodemask_t *nodes)
+{
+ if (__builtin_expect(!!(!nodes && zonelist_zone_idx(z) <= highest_zoneidx), 1))
+  return z;
+ return __next_zones_zonelist(z, highest_zoneidx, nodes);
+}
+# 1129 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
+     enum zone_type highest_zoneidx,
+     nodemask_t *nodes)
+{
+ return next_zones_zonelist(zonelist->_zonerefs,
+       highest_zoneidx, nodes);
+}
+# 1204 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pfn_to_section_nr(unsigned long pfn)
+{
+ return pfn >> (27 - 12);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long section_nr_to_pfn(unsigned long sec)
+{
+ return sec << (27 - 12);
+}
+# 1232 "./include/linux/mmzone.h"
+struct mem_section_usage {
+
+ unsigned long subsection_map[((((1UL << (27 - 21))) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
+
+
+ unsigned long pageblock_flags[0];
+};
+
+void subsection_map_init(unsigned long pfn, unsigned long nr_pages);
+
+struct page;
+struct page_ext;
+struct mem_section {
+# 1257 "./include/linux/mmzone.h"
+ unsigned long section_mem_map;
+
+ struct mem_section_usage *usage;
+
+
+
+
+
+ struct page_ext *page_ext;
+ unsigned long pad;
+
+
+
+
+
+};
+# 1285 "./include/linux/mmzone.h"
+extern struct mem_section **mem_section;
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long *section_to_usemap(struct mem_section *ms)
+{
+ return ms->usage->pageblock_flags;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_section *__nr_to_section(unsigned long nr)
+{
+
+ if (!mem_section)
+  return ((void *)0);
+
+ if (!mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))])
+  return ((void *)0);
+ return &mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))][nr & ((((1UL) << 12) / sizeof (struct mem_section)) - 1)];
+}
+extern unsigned long __section_nr(struct mem_section *ms);
+extern size_t mem_section_usage_size(void);
+# 1330 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *__section_mem_map_addr(struct mem_section *section)
+{
+ unsigned long map = section->section_mem_map;
+ map &= (~((1UL<<5)-1));
+ return (struct page *)map;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int present_section(struct mem_section *section)
+{
+ return (section && (section->section_mem_map & (1UL<<0)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int present_section_nr(unsigned long nr)
+{
+ return present_section(__nr_to_section(nr));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int valid_section(struct mem_section *section)
+{
+ return (section && (section->section_mem_map & (1UL<<1)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int early_section(struct mem_section *section)
+{
+ return (section && (section->section_mem_map & (1UL<<3)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int valid_section_nr(unsigned long nr)
+{
+ return valid_section(__nr_to_section(nr));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int online_section(struct mem_section *section)
+{
+ return (section && (section->section_mem_map & (1UL<<2)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int online_device_section(struct mem_section *section)
+{
+ unsigned long flags = (1UL<<2) | (1UL<<4);
+
+ return section && ((section->section_mem_map & flags) == flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int online_section_nr(unsigned long nr)
+{
+ return online_section(__nr_to_section(nr));
+}
+# 1386 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct mem_section *__pfn_to_section(unsigned long pfn)
+{
+ return __nr_to_section(pfn_to_section_nr(pfn));
+}
+
+extern unsigned long __highest_present_section_nr;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int subsection_map_index(unsigned long pfn)
+{
+ return (pfn & ~((~((1UL << (27 - 12))-1)))) / (1UL << (21 - 12));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pfn_section_valid(struct mem_section *ms, unsigned long pfn)
+{
+ int idx = subsection_map_index(pfn);
+
+ return test_bit(idx, ms->usage->subsection_map);
+}
+# 1413 "./include/linux/mmzone.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pfn_valid(unsigned long pfn)
+{
+ struct mem_section *ms;
+
+ if (pfn_to_section_nr(pfn) >= (1UL << (((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )) ? 52 : 46) - 27)))
+  return 0;
+ ms = __nr_to_section(pfn_to_section_nr(pfn));
+ if (!valid_section(ms))
+  return 0;
+
+
+
+
+ return early_section(ms) || pfn_section_valid(ms, pfn);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pfn_in_present_section(unsigned long pfn)
+{
+ if (pfn_to_section_nr(pfn) >= (1UL << (((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )) ? 52 : 46) - 27)))
+  return 0;
+ return present_section(__nr_to_section(pfn_to_section_nr(pfn)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long next_present_section_nr(unsigned long section_nr)
+{
+ while (++section_nr <= __highest_present_section_nr) {
+  if (present_section_nr(section_nr))
+   return section_nr;
+ }
+
+ return -1;
+}
+# 1462 "./include/linux/mmzone.h"
+void sparse_init(void);
+# 7 "./include/linux/gfp.h" 2
+
+
+# 1 "./include/linux/topology.h" 1
+# 30 "./include/linux/topology.h"
+# 1 "./include/linux/arch_topology.h" 1
+# 11 "./include/linux/arch_topology.h"
+void topology_normalize_cpu_scale(void);
+int topology_update_cpu_topology(void);
+
+struct device_node;
+bool topology_parse_cpu_capacity(struct device_node *cpu_node, int cpu);
+
+extern __attribute__((section(".data" ""))) __typeof__(unsigned long) cpu_scale;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long topology_get_cpu_scale(int cpu)
+{
+ return (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(cpu_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(cpu_scale))) *)(&(cpu_scale)); }); }));
+}
+
+void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);
+
+extern __attribute__((section(".data" ""))) __typeof__(unsigned long) freq_scale;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long topology_get_freq_scale(int cpu)
+{
+ return (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(freq_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(freq_scale))) *)(&(freq_scale)); }); }));
+}
+
+void topology_set_freq_scale(const struct cpumask *cpus, unsigned long cur_freq,
+        unsigned long max_freq);
+bool topology_scale_freq_invariant(void);
+
+bool arch_freq_counters_available(const struct cpumask *cpus);
+
+extern __attribute__((section(".data" ""))) __typeof__(unsigned long) thermal_pressure;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long topology_get_thermal_pressure(int cpu)
+{
+ return (*({ (void)(cpu); ({ do { const void *__vpp_verify = (typeof((&(thermal_pressure)) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&(thermal_pressure))) *)(&(thermal_pressure)); }); }));
+}
+
+void topology_set_thermal_pressure(const struct cpumask *cpus,
+       unsigned long th_pressure);
+
+struct cpu_topology {
+ int thread_id;
+ int core_id;
+ int package_id;
+ int llc_id;
+ cpumask_t thread_sibling;
+ cpumask_t core_sibling;
+ cpumask_t llc_sibling;
+};
+# 31 "./include/linux/topology.h" 2
+
+
+
+
+
+# 1 "./arch/x86/include/asm/topology.h" 1
+# 85 "./arch/x86/include/asm/topology.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int numa_node_id(void)
+{
+ return 0;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int early_cpu_to_node(int cpu)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void setup_node_to_cpumask_map(void) { }
+
+
+
+# 1 "./include/asm-generic/topology.h" 1
+# 104 "./arch/x86/include/asm/topology.h" 2
+
+extern const struct cpumask *cpu_coregroup_mask(int cpu);
+
+
+
+
+
+
+
+extern unsigned int __max_die_per_package;
+# 143 "./arch/x86/include/asm/topology.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+topology_update_package_map(unsigned int apicid, unsigned int cpu) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+topology_update_die_map(unsigned int dieid, unsigned int cpu) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int topology_phys_to_logical_pkg(unsigned int pkg) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int topology_phys_to_logical_die(unsigned int die,
+  unsigned int cpu) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int topology_max_die_per_package(void) { return 1; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int topology_max_smt_threads(void) { return 1; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool topology_is_primary_thread(unsigned int cpu) { return true; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool topology_smt_supported(void) { return false; }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_fix_phys_package_id(int num, u32 slot)
+{
+}
+
+struct pci_bus;
+int x86_pci_root_bus_node(int bus);
+void x86_pci_root_bus_resources(int bus, struct list_head *resources);
+
+extern bool x86_topology_update;
+# 184 "./arch/x86/include/asm/topology.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sched_set_itmt_core_prio(int prio, int core_cpu)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sched_set_itmt_support(void)
+{
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sched_clear_itmt_support(void)
+{
+}
+# 216 "./arch/x86/include/asm/topology.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_set_max_freq_ratio(bool turbo_disabled)
+{
+}
+# 37 "./include/linux/topology.h" 2
+# 46 "./include/linux/topology.h"
+int arch_update_cpu_topology(void);
+# 76 "./include/linux/topology.h"
+extern int __attribute__((__section__(".data..read_mostly"))) node_reclaim_distance;
+# 168 "./include/linux/topology.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int numa_mem_id(void)
+{
+ return numa_node_id();
+}
+# 209 "./include/linux/topology.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const struct cpumask *cpu_cpu_mask(int cpu)
+{
+ return ((void)(((void)(cpu),0)), ((const struct cpumask *)&__cpu_online_mask));
+}
+# 10 "./include/linux/gfp.h" 2
+# 25 "./include/linux/gfp.h"
+struct vm_area_struct;
+# 331 "./include/linux/gfp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int gfp_migratetype(const gfp_t gfp_flags)
+{
+ ((void)(sizeof(( long)((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))))));
+ do { extern void __compiletime_assert_98(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(1UL << GFP_MOVABLE_SHIFT) != ___GFP_MOVABLE"))); if (!(!((1UL << 3) != 0x08u))) __compiletime_assert_98(); } while (0);
+ do { extern void __compiletime_assert_99(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(___GFP_MOVABLE >> GFP_MOVABLE_SHIFT) != MIGRATE_MOVABLE"))); if (!(!((0x08u >> 3) != MIGRATE_MOVABLE))) __compiletime_assert_99(); } while (0);
+
+ if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
+  return MIGRATE_UNMOVABLE;
+
+
+ return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gfpflags_allow_blocking(const gfp_t gfp_flags)
+{
+ return !!(gfp_flags & (( gfp_t)0x400u));
+}
+# 368 "./include/linux/gfp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gfpflags_normal_context(const gfp_t gfp_flags)
+{
+ return (gfp_flags & ((( gfp_t)0x400u) | (( gfp_t)0x20000u))) ==
+  (( gfp_t)0x400u);
+}
+# 464 "./include/linux/gfp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum zone_type gfp_zone(gfp_t flags)
+{
+ enum zone_type z;
+ int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));
+
+ z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_NORMAL << 0x01u * 2) | (ZONE_NORMAL << 0x02u * 2) | (ZONE_DMA32 << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_NORMAL << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_DMA32 << (0x08u | 0x04u) * 2)) >> (bit * 2)) &
+      ((1 << 2) - 1);
+ ((void)(sizeof(( long)((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1))));
+ return z;
+}
+# 482 "./include/linux/gfp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int gfp_zonelist(gfp_t flags)
+{
+
+
+
+
+ return ZONELIST_FALLBACK;
+}
+# 500 "./include/linux/gfp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct zonelist *node_zonelist(int nid, gfp_t flags)
+{
+ return (&contig_page_data)->node_zonelists + gfp_zonelist(flags);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_free_page(struct page *page, int order) { }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_alloc_page(struct page *page, int order) { }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_make_page_accessible(struct page *page)
+{
+ return 0;
+}
+
+
+struct page *
+__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order, int preferred_nid,
+       nodemask_t *nodemask);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *
+__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
+{
+ return __alloc_pages_nodemask(gfp_mask, order, preferred_nid, ((void *)0));
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *
+__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
+{
+ ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 0)))));
+ ((void)(sizeof(( long)((gfp_mask & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)))));
+
+ return __alloc_pages(gfp_mask, order, nid);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
+      unsigned int order)
+{
+ if (nid == (-1))
+  nid = numa_mem_id();
+
+ return __alloc_pages_node(nid, gfp_mask, order);
+}
+# 569 "./include/linux/gfp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
+{
+ return alloc_pages_node(numa_node_id(), gfp_mask, order);
+}
+# 582 "./include/linux/gfp.h"
+extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
+extern unsigned long get_zeroed_page(gfp_t gfp_mask);
+
+void *alloc_pages_exact(size_t size, gfp_t gfp_mask);
+void free_pages_exact(void *virt, size_t size);
+void * __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((no_instrument_function)) alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask);
+
+
+
+
+
+
+
+extern void __free_pages(struct page *page, unsigned int order);
+extern void free_pages(unsigned long addr, unsigned int order);
+
+struct page_frag_cache;
+extern void __page_frag_cache_drain(struct page *page, unsigned int count);
+extern void *page_frag_alloc_align(struct page_frag_cache *nc,
+       unsigned int fragsz, gfp_t gfp_mask,
+       unsigned int align_mask);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *page_frag_alloc(struct page_frag_cache *nc,
+        unsigned int fragsz, gfp_t gfp_mask)
+{
+ return page_frag_alloc_align(nc, fragsz, gfp_mask, ~0u);
+}
+
+extern void page_frag_free(void *addr);
+
+
+
+
+void page_alloc_init(void);
+void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
+void drain_all_pages(struct zone *zone);
+void drain_local_pages(struct zone *zone);
+
+void page_alloc_init_late(void);
+# 629 "./include/linux/gfp.h"
+extern gfp_t gfp_allowed_mask;
+
+
+bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);
+
+extern void pm_restrict_gfp_mask(void);
+extern void pm_restore_gfp_mask(void);
+
+extern gfp_t vma_thp_gfp_mask(struct vm_area_struct *vma);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pm_suspended_storage(void)
+{
+ return false;
+}
+# 655 "./include/linux/gfp.h"
+void free_contig_range(unsigned long pfn, unsigned int nr_pages);
+# 15 "./include/linux/xarray.h" 2
+# 1 "./include/linux/kconfig.h" 1
+# 16 "./include/linux/xarray.h" 2
+# 52 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_mk_value(unsigned long v)
+{
+ ({ int __ret_warn_on = !!((long)v < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/xarray.h"), "i" (54), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (100)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ return (void *)((v << 1) | 1);
+}
+# 65 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long xa_to_value(const void *entry)
+{
+ return (unsigned long)entry >> 1;
+}
+# 77 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_value(const void *entry)
+{
+ return (unsigned long)entry & 1;
+}
+# 95 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_tag_pointer(void *p, unsigned long tag)
+{
+ return (void *)((unsigned long)p | tag);
+}
+# 110 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_untag_pointer(void *entry)
+{
+ return (void *)((unsigned long)entry & ~3UL);
+}
+# 125 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int xa_pointer_tag(void *entry)
+{
+ return (unsigned long)entry & 3UL;
+}
+# 143 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_mk_internal(unsigned long v)
+{
+ return (void *)((v << 2) | 2);
+}
+# 155 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long xa_to_internal(const void *entry)
+{
+ return (unsigned long)entry >> 2;
+}
+# 167 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_internal(const void *entry)
+{
+ return ((unsigned long)entry & 3) == 2;
+}
+# 183 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_zero(const void *entry)
+{
+ return __builtin_expect(!!(entry == xa_mk_internal(257)), 0);
+}
+# 199 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_err(const void *entry)
+{
+ return __builtin_expect(!!(xa_is_internal(entry) && entry >= xa_mk_internal(-4095)), 0)
+                                       ;
+}
+# 217 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xa_err(void *entry)
+{
+
+ if (xa_is_err(entry))
+  return (long)entry >> 2;
+ return 0;
+}
+# 236 "./include/linux/xarray.h"
+struct xa_limit {
+ u32 max;
+ u32 min;
+};
+
+
+
+
+
+
+typedef unsigned xa_mark_t;
+
+
+
+
+
+
+
+enum xa_lock_type {
+ XA_LOCK_IRQ = 1,
+ XA_LOCK_BH = 2,
+};
+# 292 "./include/linux/xarray.h"
+struct xarray {
+ spinlock_t xa_lock;
+
+ gfp_t xa_flags;
+ void * xa_head;
+};
+# 347 "./include/linux/xarray.h"
+void *xa_load(struct xarray *, unsigned long index);
+void *xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
+void *xa_erase(struct xarray *, unsigned long index);
+void *xa_store_range(struct xarray *, unsigned long first, unsigned long last,
+   void *entry, gfp_t);
+bool xa_get_mark(struct xarray *, unsigned long index, xa_mark_t);
+void xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
+void xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
+void *xa_find(struct xarray *xa, unsigned long *index,
+  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
+void *xa_find_after(struct xarray *xa, unsigned long *index,
+  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
+unsigned int xa_extract(struct xarray *, void **dst, unsigned long start,
+  unsigned long max, unsigned int n, xa_mark_t);
+void xa_destroy(struct xarray *);
+# 374 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xa_init_flags(struct xarray *xa, gfp_t flags)
+{
+ do { static struct lock_class_key __key; __spin_lock_init(&xa->xa_lock, "&xa->xa_lock", &__key); } while (0);
+ xa->xa_flags = flags;
+ xa->xa_head = ((void *)0);
+}
+# 389 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xa_init(struct xarray *xa)
+{
+ xa_init_flags(xa, 0);
+}
+# 401 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_empty(const struct xarray *xa)
+{
+ return xa->xa_head == ((void *)0);
+}
+# 414 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_marked(const struct xarray *xa, xa_mark_t mark)
+{
+ return xa->xa_flags & (( gfp_t)((1U << (23 + 1)) << ( unsigned)(mark)));
+}
+# 554 "./include/linux/xarray.h"
+void *__xa_erase(struct xarray *, unsigned long index);
+void *__xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
+void *__xa_cmpxchg(struct xarray *, unsigned long index, void *old,
+  void *entry, gfp_t);
+int __attribute__((__warn_unused_result__)) __xa_insert(struct xarray *, unsigned long index,
+  void *entry, gfp_t);
+int __attribute__((__warn_unused_result__)) __xa_alloc(struct xarray *, u32 *id, void *entry,
+  struct xa_limit, gfp_t);
+int __attribute__((__warn_unused_result__)) __xa_alloc_cyclic(struct xarray *, u32 *id, void *entry,
+  struct xa_limit, u32 *next, gfp_t);
+void __xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
+void __xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
+# 581 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_store_bh(struct xarray *xa, unsigned long index,
+  void *entry, gfp_t gfp)
+{
+ void *curr;
+
+ spin_lock_bh(&(xa)->xa_lock);
+ curr = __xa_store(xa, index, entry, gfp);
+ spin_unlock_bh(&(xa)->xa_lock);
+
+ return curr;
+}
+# 607 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_store_irq(struct xarray *xa, unsigned long index,
+  void *entry, gfp_t gfp)
+{
+ void *curr;
+
+ spin_lock_irq(&(xa)->xa_lock);
+ curr = __xa_store(xa, index, entry, gfp);
+ spin_unlock_irq(&(xa)->xa_lock);
+
+ return curr;
+}
+# 632 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_erase_bh(struct xarray *xa, unsigned long index)
+{
+ void *entry;
+
+ spin_lock_bh(&(xa)->xa_lock);
+ entry = __xa_erase(xa, index);
+ spin_unlock_bh(&(xa)->xa_lock);
+
+ return entry;
+}
+# 656 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_erase_irq(struct xarray *xa, unsigned long index)
+{
+ void *entry;
+
+ spin_lock_irq(&(xa)->xa_lock);
+ entry = __xa_erase(xa, index);
+ spin_unlock_irq(&(xa)->xa_lock);
+
+ return entry;
+}
+# 682 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_cmpxchg(struct xarray *xa, unsigned long index,
+   void *old, void *entry, gfp_t gfp)
+{
+ void *curr;
+
+ spin_lock(&(xa)->xa_lock);
+ curr = __xa_cmpxchg(xa, index, old, entry, gfp);
+ spin_unlock(&(xa)->xa_lock);
+
+ return curr;
+}
+# 709 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_cmpxchg_bh(struct xarray *xa, unsigned long index,
+   void *old, void *entry, gfp_t gfp)
+{
+ void *curr;
+
+ spin_lock_bh(&(xa)->xa_lock);
+ curr = __xa_cmpxchg(xa, index, old, entry, gfp);
+ spin_unlock_bh(&(xa)->xa_lock);
+
+ return curr;
+}
+# 736 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_cmpxchg_irq(struct xarray *xa, unsigned long index,
+   void *old, void *entry, gfp_t gfp)
+{
+ void *curr;
+
+ spin_lock_irq(&(xa)->xa_lock);
+ curr = __xa_cmpxchg(xa, index, old, entry, gfp);
+ spin_unlock_irq(&(xa)->xa_lock);
+
+ return curr;
+}
+# 765 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) xa_insert(struct xarray *xa,
+  unsigned long index, void *entry, gfp_t gfp)
+{
+ int err;
+
+ spin_lock(&(xa)->xa_lock);
+ err = __xa_insert(xa, index, entry, gfp);
+ spin_unlock(&(xa)->xa_lock);
+
+ return err;
+}
+# 794 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) xa_insert_bh(struct xarray *xa,
+  unsigned long index, void *entry, gfp_t gfp)
+{
+ int err;
+
+ spin_lock_bh(&(xa)->xa_lock);
+ err = __xa_insert(xa, index, entry, gfp);
+ spin_unlock_bh(&(xa)->xa_lock);
+
+ return err;
+}
+# 823 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) xa_insert_irq(struct xarray *xa,
+  unsigned long index, void *entry, gfp_t gfp)
+{
+ int err;
+
+ spin_lock_irq(&(xa)->xa_lock);
+ err = __xa_insert(xa, index, entry, gfp);
+ spin_unlock_irq(&(xa)->xa_lock);
+
+ return err;
+}
+# 852 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) int xa_alloc(struct xarray *xa, u32 *id,
+  void *entry, struct xa_limit limit, gfp_t gfp)
+{
+ int err;
+
+ spin_lock(&(xa)->xa_lock);
+ err = __xa_alloc(xa, id, entry, limit, gfp);
+ spin_unlock(&(xa)->xa_lock);
+
+ return err;
+}
+# 881 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) xa_alloc_bh(struct xarray *xa, u32 *id,
+  void *entry, struct xa_limit limit, gfp_t gfp)
+{
+ int err;
+
+ spin_lock_bh(&(xa)->xa_lock);
+ err = __xa_alloc(xa, id, entry, limit, gfp);
+ spin_unlock_bh(&(xa)->xa_lock);
+
+ return err;
+}
+# 910 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) xa_alloc_irq(struct xarray *xa, u32 *id,
+  void *entry, struct xa_limit limit, gfp_t gfp)
+{
+ int err;
+
+ spin_lock_irq(&(xa)->xa_lock);
+ err = __xa_alloc(xa, id, entry, limit, gfp);
+ spin_unlock_irq(&(xa)->xa_lock);
+
+ return err;
+}
+# 943 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xa_alloc_cyclic(struct xarray *xa, u32 *id, void *entry,
+  struct xa_limit limit, u32 *next, gfp_t gfp)
+{
+ int err;
+
+ spin_lock(&(xa)->xa_lock);
+ err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
+ spin_unlock(&(xa)->xa_lock);
+
+ return err;
+}
+# 976 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xa_alloc_cyclic_bh(struct xarray *xa, u32 *id, void *entry,
+  struct xa_limit limit, u32 *next, gfp_t gfp)
+{
+ int err;
+
+ spin_lock_bh(&(xa)->xa_lock);
+ err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
+ spin_unlock_bh(&(xa)->xa_lock);
+
+ return err;
+}
+# 1009 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xa_alloc_cyclic_irq(struct xarray *xa, u32 *id, void *entry,
+  struct xa_limit limit, u32 *next, gfp_t gfp)
+{
+ int err;
+
+ spin_lock_irq(&(xa)->xa_lock);
+ err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
+ spin_unlock_irq(&(xa)->xa_lock);
+
+ return err;
+}
+# 1039 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__))
+int xa_reserve(struct xarray *xa, unsigned long index, gfp_t gfp)
+{
+ return xa_err(xa_cmpxchg(xa, index, ((void *)0), xa_mk_internal(257), gfp));
+}
+# 1057 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__))
+int xa_reserve_bh(struct xarray *xa, unsigned long index, gfp_t gfp)
+{
+ return xa_err(xa_cmpxchg_bh(xa, index, ((void *)0), xa_mk_internal(257), gfp));
+}
+# 1075 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__))
+int xa_reserve_irq(struct xarray *xa, unsigned long index, gfp_t gfp)
+{
+ return xa_err(xa_cmpxchg_irq(xa, index, ((void *)0), xa_mk_internal(257), gfp));
+}
+# 1090 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xa_release(struct xarray *xa, unsigned long index)
+{
+ xa_cmpxchg(xa, index, xa_mk_internal(257), ((void *)0), 0);
+}
+# 1122 "./include/linux/xarray.h"
+struct xa_node {
+ unsigned char shift;
+ unsigned char offset;
+ unsigned char count;
+ unsigned char nr_values;
+ struct xa_node *parent;
+ struct xarray *array;
+ union {
+  struct list_head private_list;
+  struct callback_head callback_head;
+ };
+ void *slots[(1UL << (1 ? 4 : 6))];
+ union {
+  unsigned long tags[3][((((1UL << (1 ? 4 : 6))) + (64) - 1) / (64))];
+  unsigned long marks[3][((((1UL << (1 ? 4 : 6))) + (64) - 1) / (64))];
+ };
+};
+
+void xa_dump(const struct xarray *);
+void xa_dump_node(const struct xa_node *);
+# 1162 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_head(const struct xarray *xa)
+{
+ return ({ typeof(*(xa->xa_head)) *________p1 = (typeof(*(xa->xa_head)) *)({ do { extern void __compiletime_assert_101(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((xa->xa_head)) == sizeof(char) || sizeof((xa->xa_head)) == sizeof(short) || sizeof((xa->xa_head)) == sizeof(int) || sizeof((xa->xa_head)) == sizeof(long)) || sizeof((xa->xa_head)) == sizeof(long long))) __compiletime_assert_101(); } while (0); (*(const volatile typeof( _Generic(((xa->xa_head)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((xa->xa_head)))) *)&((xa->xa_head))); }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map)) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("include/linux/xarray.h", 1164, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(xa->xa_head)) *)(________p1)); })
+                                    ;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_head_locked(const struct xarray *xa)
+{
+ return ({ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map))))) { __warned = true; lockdep_rcu_suspicious("include/linux/xarray.h", 1171, "suspicious rcu_dereference_protected() usage"); } } while (0); ; ((typeof(*(xa->xa_head)) *)((xa->xa_head))); })
+                                    ;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_entry(const struct xarray *xa,
+    const struct xa_node *node, unsigned int offset)
+{
+ do { } while (0);
+ return ({ typeof(*(node->slots[offset])) *________p1 = (typeof(*(node->slots[offset])) *)({ do { extern void __compiletime_assert_102(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((node->slots[offset])) == sizeof(char) || sizeof((node->slots[offset])) == sizeof(short) || sizeof((node->slots[offset])) == sizeof(int) || sizeof((node->slots[offset])) == sizeof(long)) || sizeof((node->slots[offset])) == sizeof(long long))) __compiletime_assert_102(); } while (0); (*(const volatile typeof( _Generic(((node->slots[offset])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->slots[offset])))) *)&((node->slots[offset]))); }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map)) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("include/linux/xarray.h", 1180, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(node->slots[offset])) *)(________p1)); })
+                                    ;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_entry_locked(const struct xarray *xa,
+    const struct xa_node *node, unsigned int offset)
+{
+ do { } while (0);
+ return ({ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map))))) { __warned = true; lockdep_rcu_suspicious("include/linux/xarray.h", 1189, "suspicious rcu_dereference_protected() usage"); } } while (0); ; ((typeof(*(node->slots[offset])) *)((node->slots[offset]))); })
+                                    ;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct xa_node *xa_parent(const struct xarray *xa,
+     const struct xa_node *node)
+{
+ return ({ typeof(*(node->parent)) *________p1 = (typeof(*(node->parent)) *)({ do { extern void __compiletime_assert_103(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((node->parent)) == sizeof(char) || sizeof((node->parent)) == sizeof(short) || sizeof((node->parent)) == sizeof(int) || sizeof((node->parent)) == sizeof(long)) || sizeof((node->parent)) == sizeof(long long))) __compiletime_assert_103(); } while (0); (*(const volatile typeof( _Generic(((node->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->parent)))) *)&((node->parent))); }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map)) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("include/linux/xarray.h", 1197, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(node->parent)) *)(________p1)); })
+                                    ;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct xa_node *xa_parent_locked(const struct xarray *xa,
+     const struct xa_node *node)
+{
+ return ({ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(&xa->xa_lock)->dep_map))))) { __warned = true; lockdep_rcu_suspicious("include/linux/xarray.h", 1205, "suspicious rcu_dereference_protected() usage"); } } while (0); ; ((typeof(*(node->parent)) *)((node->parent))); })
+                                    ;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_mk_node(const struct xa_node *node)
+{
+ return (void *)((unsigned long)node | 2);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct xa_node *xa_to_node(const void *entry)
+{
+ return (struct xa_node *)((unsigned long)entry - 2);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_node(const void *entry)
+{
+ return xa_is_internal(entry) && (unsigned long)entry > 4096;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_mk_sibling(unsigned int offset)
+{
+ return xa_mk_internal(offset);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long xa_to_sibling(const void *entry)
+{
+ return xa_to_internal(entry);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_sibling(const void *entry)
+{
+ return 0 && xa_is_internal(entry) &&
+  (entry < xa_mk_sibling((1UL << (1 ? 4 : 6)) - 1));
+}
+# 1259 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_retry(const void *entry)
+{
+ return __builtin_expect(!!(entry == xa_mk_internal(256)), 0);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xa_is_advanced(const void *entry)
+{
+ return xa_is_internal(entry) && (entry <= xa_mk_internal(256));
+}
+# 1287 "./include/linux/xarray.h"
+typedef void (*xa_update_node_t)(struct xa_node *node);
+
+void xa_delete_node(struct xa_node *, xa_update_node_t);
+# 1308 "./include/linux/xarray.h"
+struct xa_state {
+ struct xarray *xa;
+ unsigned long xa_index;
+ unsigned char xa_shift;
+ unsigned char xa_sibs;
+ unsigned char xa_offset;
+ unsigned char xa_pad;
+ struct xa_node *xa_node;
+ struct xa_node *xa_alloc;
+ xa_update_node_t xa_update;
+};
+# 1387 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xas_error(const struct xa_state *xas)
+{
+ return xa_err(xas->xa_node);
+}
+# 1401 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_set_err(struct xa_state *xas, long err)
+{
+ xas->xa_node = ((struct xa_node *)(((unsigned long)err << 2) | 2UL));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_invalid(const struct xa_state *xas)
+{
+ return (unsigned long)xas->xa_node & 3;
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_valid(const struct xa_state *xas)
+{
+ return !xas_invalid(xas);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_is_node(const struct xa_state *xas)
+{
+ return xas_valid(xas) && xas->xa_node;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_not_node(struct xa_node *node)
+{
+ return ((unsigned long)node & 3) || !node;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_frozen(struct xa_node *node)
+{
+ return (unsigned long)node & 2;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_top(struct xa_node *node)
+{
+ return node <= ((struct xa_node *)3UL);
+}
+# 1467 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_reset(struct xa_state *xas)
+{
+ xas->xa_node = ((struct xa_node *)3UL);
+}
+# 1484 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool xas_retry(struct xa_state *xas, const void *entry)
+{
+ if (xa_is_zero(entry))
+  return true;
+ if (!xa_is_retry(entry))
+  return false;
+ xas_reset(xas);
+ return true;
+}
+
+void *xas_load(struct xa_state *);
+void *xas_store(struct xa_state *, void *entry);
+void *xas_find(struct xa_state *, unsigned long max);
+void *xas_find_conflict(struct xa_state *);
+
+bool xas_get_mark(const struct xa_state *, xa_mark_t);
+void xas_set_mark(const struct xa_state *, xa_mark_t);
+void xas_clear_mark(const struct xa_state *, xa_mark_t);
+void *xas_find_marked(struct xa_state *, unsigned long max, xa_mark_t);
+void xas_init_marks(const struct xa_state *);
+
+bool xas_nomem(struct xa_state *, gfp_t);
+void xas_pause(struct xa_state *);
+
+void xas_create_range(struct xa_state *);
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int xa_get_order(struct xarray *xa, unsigned long index)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_split(struct xa_state *xas, void *entry,
+  unsigned int order)
+{
+ xas_store(xas, entry);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_split_alloc(struct xa_state *xas, void *entry,
+  unsigned int order, gfp_t gfp)
+{
+}
+# 1546 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xas_reload(struct xa_state *xas)
+{
+ struct xa_node *node = xas->xa_node;
+ void *entry;
+ char offset;
+
+ if (!node)
+  return xa_head(xas->xa);
+ if (0) {
+  offset = (xas->xa_index >> node->shift) & ((1UL << (1 ? 4 : 6)) - 1);
+  entry = xa_entry(xas->xa, node, offset);
+  if (!xa_is_sibling(entry))
+   return entry;
+  offset = xa_to_sibling(entry);
+ } else {
+  offset = xas->xa_offset;
+ }
+ return xa_entry(xas->xa, node, offset);
+}
+# 1575 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_set(struct xa_state *xas, unsigned long index)
+{
+ xas->xa_index = index;
+ xas->xa_node = ((struct xa_node *)3UL);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_set_order(struct xa_state *xas, unsigned long index,
+     unsigned int order)
+{
+
+
+
+
+
+
+ do { if (__builtin_expect(!!(order > 0), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/xarray.h"), "i" (1596), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (104)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0); } while (0);
+ xas_set(xas, index);
+
+}
+# 1609 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void xas_set_update(struct xa_state *xas, xa_update_node_t update)
+{
+ xas->xa_update = update;
+}
+# 1625 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xas_next_entry(struct xa_state *xas, unsigned long max)
+{
+ struct xa_node *node = xas->xa_node;
+ void *entry;
+
+ if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset != (xas->xa_index & ((1UL << (1 ? 4 : 6)) - 1))), 0)
+                                                     )
+  return xas_find(xas, max);
+
+ do {
+  if (__builtin_expect(!!(xas->xa_index >= max), 0))
+   return xas_find(xas, max);
+  if (__builtin_expect(!!(xas->xa_offset == ((1UL << (1 ? 4 : 6)) - 1)), 0))
+   return xas_find(xas, max);
+  entry = xa_entry(xas->xa, node, xas->xa_offset + 1);
+  if (__builtin_expect(!!(xa_is_internal(entry)), 0))
+   return xas_find(xas, max);
+  xas->xa_offset++;
+  xas->xa_index++;
+ } while (!entry);
+
+ return entry;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int xas_find_chunk(struct xa_state *xas, bool advance,
+  xa_mark_t mark)
+{
+ unsigned long *addr = xas->xa_node->marks[( unsigned)mark];
+ unsigned int offset = xas->xa_offset;
+
+ if (advance)
+  offset++;
+ if ((1UL << (1 ? 4 : 6)) == 64) {
+  if (offset < (1UL << (1 ? 4 : 6))) {
+   unsigned long data = *addr & (~0UL << offset);
+   if (data)
+    return __ffs(data);
+  }
+  return (1UL << (1 ? 4 : 6));
+ }
+
+ return find_next_bit(addr, (1UL << (1 ? 4 : 6)), offset);
+}
+# 1682 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xas_next_marked(struct xa_state *xas, unsigned long max,
+        xa_mark_t mark)
+{
+ struct xa_node *node = xas->xa_node;
+ void *entry;
+ unsigned int offset;
+
+ if (__builtin_expect(!!(xas_not_node(node) || node->shift), 0))
+  return xas_find_marked(xas, max, mark);
+ offset = xas_find_chunk(xas, true, mark);
+ xas->xa_offset = offset;
+ xas->xa_index = (xas->xa_index & ~((1UL << (1 ? 4 : 6)) - 1)) + offset;
+ if (xas->xa_index > max)
+  return ((void *)0);
+ if (offset == (1UL << (1 ? 4 : 6)))
+  return xas_find_marked(xas, max, mark);
+ entry = xa_entry(xas->xa, node, offset);
+ if (!entry)
+  return xas_find_marked(xas, max, mark);
+ return entry;
+}
+
+
+
+
+
+enum {
+ XA_CHECK_SCHED = 4096,
+};
+# 1762 "./include/linux/xarray.h"
+void *__xas_next(struct xa_state *);
+void *__xas_prev(struct xa_state *);
+# 1781 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xas_prev(struct xa_state *xas)
+{
+ struct xa_node *node = xas->xa_node;
+
+ if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == 0), 0)
+                        )
+  return __xas_prev(xas);
+
+ xas->xa_index--;
+ xas->xa_offset--;
+ return xa_entry(xas->xa, node, xas->xa_offset);
+}
+# 1810 "./include/linux/xarray.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xas_next(struct xa_state *xas)
+{
+ struct xa_node *node = xas->xa_node;
+
+ if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == ((1UL << (1 ? 4 : 6)) - 1)), 0)
+                                    )
+  return __xas_next(xas);
+
+ xas->xa_index++;
+ xas->xa_offset++;
+ return xa_entry(xas->xa, node, xas->xa_offset);
+}
+# 20 "./include/linux/radix-tree.h" 2
+# 1 "./include/linux/local_lock.h" 1
+
+
+
+
+# 1 "./include/linux/local_lock_internal.h" 1
+# 9 "./include/linux/local_lock_internal.h"
+typedef struct {
+
+ struct lockdep_map dep_map;
+ struct task_struct *owner;
+
+} local_lock_t;
+# 40 "./include/linux/local_lock_internal.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_lock_acquire(local_lock_t *l)
+{
+ lock_acquire(&l->dep_map, 0, 0, 0, 1, ((void *)0), ({ __label__ __here; __here: (unsigned long)&&__here; }));
+ ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(l->owner), 0)) { if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("DEBUG_LOCKS_WARN_ON(%s)", "l->owner"); do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/local_lock_internal.h"), "i" (43), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (105)); }); do { } while(0); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); __ret = 1; } __ret; });
+ l->owner = get_current();
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void local_lock_release(local_lock_t *l)
+{
+ ({ int __ret = 0; if (!oops_in_progress && __builtin_expect(!!(l->owner != get_current()), 0)) { if (debug_locks_off() && !debug_locks_silent) ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("DEBUG_LOCKS_WARN_ON(%s)", "l->owner != current"); do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/local_lock_internal.h"), "i" (49), "i" ((1 << 0)|((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (106)); }); do { } while(0); } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); __ret = 1; } __ret; });
+ l->owner = ((void *)0);
+ lock_release(&l->dep_map, ({ __label__ __here; __here: (unsigned long)&&__here; }));
+}
+# 6 "./include/linux/local_lock.h" 2
+# 21 "./include/linux/radix-tree.h" 2
+
+
+
+
+
+struct radix_tree_preload {
+ local_lock_t lock;
+ unsigned nr;
+
+ struct xa_node *nodes;
+};
+extern __attribute__((section(".data" ""))) __typeof__(struct radix_tree_preload) radix_tree_preloads;
+# 53 "./include/linux/radix-tree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool radix_tree_is_internal_node(void *ptr)
+{
+ return ((unsigned long)ptr & 3UL) ==
+    2UL;
+}
+# 84 "./include/linux/radix-tree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool radix_tree_empty(const struct xarray *root)
+{
+ return root->xa_head == ((void *)0);
+}
+# 104 "./include/linux/radix-tree.h"
+struct radix_tree_iter {
+ unsigned long index;
+ unsigned long next_index;
+ unsigned long tags;
+ struct xa_node *node;
+};
+# 175 "./include/linux/radix-tree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *radix_tree_deref_slot(void **slot)
+{
+ return ({ typeof(*(*slot)) *________p1 = (typeof(*(*slot)) *)({ do { extern void __compiletime_assert_107(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*slot)) == sizeof(char) || sizeof((*slot)) == sizeof(short) || sizeof((*slot)) == sizeof(int) || sizeof((*slot)) == sizeof(long)) || sizeof((*slot)) == sizeof(long long))) __compiletime_assert_107(); } while (0); (*(const volatile typeof( _Generic(((*slot)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((*slot)))) *)&((*slot))); }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((0) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("include/linux/radix-tree.h", 177, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(*slot)) *)(________p1)); });
+}
+# 189 "./include/linux/radix-tree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *radix_tree_deref_slot_protected(void **slot,
+       spinlock_t *treelock)
+{
+ return ({ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((lock_is_held(&(treelock)->dep_map))))) { __warned = true; lockdep_rcu_suspicious("include/linux/radix-tree.h", 192, "suspicious rcu_dereference_protected() usage"); } } while (0); ; ((typeof(*(*slot)) *)((*slot))); });
+}
+# 202 "./include/linux/radix-tree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int radix_tree_deref_retry(void *arg)
+{
+ return __builtin_expect(!!(radix_tree_is_internal_node(arg)), 0);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int radix_tree_exception(void *arg)
+{
+ return __builtin_expect(!!((unsigned long)arg & 3UL), 0);
+}
+
+int radix_tree_insert(struct xarray *, unsigned long index,
+   void *);
+void *__radix_tree_lookup(const struct xarray *, unsigned long index,
+     struct xa_node **nodep, void ***slotp);
+void *radix_tree_lookup(const struct xarray *, unsigned long);
+void **radix_tree_lookup_slot(const struct xarray *,
+     unsigned long index);
+void __radix_tree_replace(struct xarray *, struct xa_node *,
+     void **slot, void *entry);
+void radix_tree_iter_replace(struct xarray *,
+  const struct radix_tree_iter *, void **slot, void *entry);
+void radix_tree_replace_slot(struct xarray *,
+        void **slot, void *entry);
+void radix_tree_iter_delete(struct xarray *,
+   struct radix_tree_iter *iter, void **slot);
+void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
+void *radix_tree_delete(struct xarray *, unsigned long);
+unsigned int radix_tree_gang_lookup(const struct xarray *,
+   void **results, unsigned long first_index,
+   unsigned int max_items);
+int radix_tree_preload(gfp_t gfp_mask);
+int radix_tree_maybe_preload(gfp_t gfp_mask);
+void radix_tree_init(void);
+void *radix_tree_tag_set(struct xarray *,
+   unsigned long index, unsigned int tag);
+void *radix_tree_tag_clear(struct xarray *,
+   unsigned long index, unsigned int tag);
+int radix_tree_tag_get(const struct xarray *,
+   unsigned long index, unsigned int tag);
+void radix_tree_iter_tag_clear(struct xarray *,
+  const struct radix_tree_iter *iter, unsigned int tag);
+unsigned int radix_tree_gang_lookup_tag(const struct xarray *,
+  void **results, unsigned long first_index,
+  unsigned int max_items, unsigned int tag);
+unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *,
+  void ***results, unsigned long first_index,
+  unsigned int max_items, unsigned int tag);
+int radix_tree_tagged(const struct xarray *, unsigned int tag);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void radix_tree_preload_end(void)
+{
+ do { local_lock_release(({ (void)(0); ({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock); }); })); do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0); } while (0);
+}
+
+void **idr_get_free(struct xarray *root,
+         struct radix_tree_iter *iter, gfp_t gfp,
+         unsigned long max);
+
+enum {
+ RADIX_TREE_ITER_TAG_MASK = 0x0f,
+ RADIX_TREE_ITER_TAGGED = 0x10,
+ RADIX_TREE_ITER_CONTIG = 0x20,
+};
+# 278 "./include/linux/radix-tree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void **
+radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
+{
+# 289 "./include/linux/radix-tree.h"
+ iter->index = 0;
+ iter->next_index = start;
+ return ((void *)0);
+}
+# 307 "./include/linux/radix-tree.h"
+void **radix_tree_next_chunk(const struct xarray *,
+        struct radix_tree_iter *iter, unsigned flags);
+# 320 "./include/linux/radix-tree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void **
+radix_tree_iter_lookup(const struct xarray *root,
+   struct radix_tree_iter *iter, unsigned long index)
+{
+ radix_tree_iter_init(iter, index);
+ return radix_tree_next_chunk(root, iter, RADIX_TREE_ITER_CONTIG);
+}
+# 337 "./include/linux/radix-tree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__))
+void **radix_tree_iter_retry(struct radix_tree_iter *iter)
+{
+ iter->next_index = iter->index;
+ iter->tags = 0;
+ return ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
+__radix_tree_iter_add(struct radix_tree_iter *iter, unsigned long slots)
+{
+ return iter->index + slots;
+}
+# 361 "./include/linux/radix-tree.h"
+void **__attribute__((__warn_unused_result__)) radix_tree_iter_resume(void **slot,
+     struct radix_tree_iter *iter);
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) long
+radix_tree_chunk_size(struct radix_tree_iter *iter)
+{
+ return iter->next_index - iter->index;
+}
+# 395 "./include/linux/radix-tree.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void **radix_tree_next_slot(void **slot,
+    struct radix_tree_iter *iter, unsigned flags)
+{
+ if (flags & RADIX_TREE_ITER_TAGGED) {
+  iter->tags >>= 1;
+  if (__builtin_expect(!!(!iter->tags), 0))
+   return ((void *)0);
+  if (__builtin_expect(!!(iter->tags & 1ul), 1)) {
+   iter->index = __radix_tree_iter_add(iter, 1);
+   slot++;
+   goto found;
+  }
+  if (!(flags & RADIX_TREE_ITER_CONTIG)) {
+   unsigned offset = __ffs(iter->tags);
+
+   iter->tags >>= offset++;
+   iter->index = __radix_tree_iter_add(iter, offset);
+   slot += offset;
+   goto found;
+  }
+ } else {
+  long count = radix_tree_chunk_size(iter);
+
+  while (--count > 0) {
+   slot++;
+   iter->index = __radix_tree_iter_add(iter, 1);
+
+   if (__builtin_expect(!!(*slot), 1))
+    goto found;
+   if (flags & RADIX_TREE_ITER_CONTIG) {
+
+    iter->next_index = 0;
+    break;
+   }
+  }
+ }
+ return ((void *)0);
+
+ found:
+ return slot;
+}
+# 16 "./include/linux/idr.h" 2
+
+
+
+struct idr {
+ struct xarray idr_rt;
+ unsigned int idr_base;
+ unsigned int idr_next;
+};
+# 66 "./include/linux/idr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int idr_get_cursor(const struct idr *idr)
+{
+ return ({ do { extern void __compiletime_assert_108(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(idr->idr_next) == sizeof(char) || sizeof(idr->idr_next) == sizeof(short) || sizeof(idr->idr_next) == sizeof(int) || sizeof(idr->idr_next) == sizeof(long)) || sizeof(idr->idr_next) == sizeof(long long))) __compiletime_assert_108(); } while (0); (*(const volatile typeof( _Generic((idr->idr_next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (idr->idr_next))) *)&(idr->idr_next)); });
+}
+# 79 "./include/linux/idr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void idr_set_cursor(struct idr *idr, unsigned int val)
+{
+ do { do { extern void __compiletime_assert_109(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(idr->idr_next) == sizeof(char) || sizeof(idr->idr_next) == sizeof(short) || sizeof(idr->idr_next) == sizeof(int) || sizeof(idr->idr_next) == sizeof(long)) || sizeof(idr->idr_next) == sizeof(long long))) __compiletime_assert_109(); } while (0); do { *(volatile typeof(idr->idr_next) *)&(idr->idr_next) = (val); } while (0); } while (0);
+}
+# 112 "./include/linux/idr.h"
+void idr_preload(gfp_t gfp_mask);
+
+int idr_alloc(struct idr *, void *ptr, int start, int end, gfp_t);
+int __attribute__((__warn_unused_result__)) idr_alloc_u32(struct idr *, void *ptr, u32 *id,
+    unsigned long max, gfp_t);
+int idr_alloc_cyclic(struct idr *, void *ptr, int start, int end, gfp_t);
+void *idr_remove(struct idr *, unsigned long id);
+void *idr_find(const struct idr *, unsigned long id);
+int idr_for_each(const struct idr *,
+   int (*fn)(int id, void *p, void *data), void *data);
+void *idr_get_next(struct idr *, int *nextid);
+void *idr_get_next_ul(struct idr *, unsigned long *nextid);
+void *idr_replace(struct idr *, void *, unsigned long id);
+void idr_destroy(struct idr *);
+# 135 "./include/linux/idr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void idr_init_base(struct idr *idr, int base)
+{
+ xa_init_flags(&idr->idr_rt, ((( gfp_t)4) | ( gfp_t) (1 << (((23 + 1)) + 0))));
+ idr->idr_base = base;
+ idr->idr_next = 0;
+}
+# 149 "./include/linux/idr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void idr_init(struct idr *idr)
+{
+ idr_init_base(idr, 0);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool idr_is_empty(const struct idr *idr)
+{
+ return radix_tree_empty(&idr->idr_rt) &&
+  radix_tree_tagged(&idr->idr_rt, 0);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void idr_preload_end(void)
+{
+ do { local_lock_release(({ (void)(0); ({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))((void *)0); (void)__vpp_verify; } while (0); (typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock); }); })); do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0); } while (0);
+}
+# 240 "./include/linux/idr.h"
+struct ida_bitmap {
+ unsigned long bitmap[(128 / sizeof(long))];
+};
+
+struct ida {
+ struct xarray xa;
+};
+# 255 "./include/linux/idr.h"
+int ida_alloc_range(struct ida *, unsigned int min, unsigned int max, gfp_t);
+void ida_free(struct ida *, unsigned int id);
+void ida_destroy(struct ida *ida);
+# 271 "./include/linux/idr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ida_alloc(struct ida *ida, gfp_t gfp)
+{
+ return ida_alloc_range(ida, 0, ~0, gfp);
+}
+# 289 "./include/linux/idr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ida_alloc_min(struct ida *ida, unsigned int min, gfp_t gfp)
+{
+ return ida_alloc_range(ida, min, ~0, gfp);
+}
+# 307 "./include/linux/idr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ida_alloc_max(struct ida *ida, unsigned int max, gfp_t gfp)
+{
+ return ida_alloc_range(ida, 0, max, gfp);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ida_init(struct ida *ida)
+{
+ xa_init_flags(&ida->xa, ((( gfp_t)XA_LOCK_IRQ) | ((( gfp_t)4U) | (( gfp_t)((1U << (23 + 1)) << ( unsigned)((( xa_mark_t)0U)))))));
+}
+# 325 "./include/linux/idr.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ida_is_empty(const struct ida *ida)
+{
+ return xa_empty(&ida->xa);
+}
+# 14 "./include/linux/kernfs.h" 2
+
+
+
+# 1 "./include/linux/uidgid.h" 1
+# 16 "./include/linux/uidgid.h"
+# 1 "./include/linux/highuid.h" 1
+# 35 "./include/linux/highuid.h"
+extern int overflowuid;
+extern int overflowgid;
+
+extern void __bad_uid(void);
+extern void __bad_gid(void);
+# 82 "./include/linux/highuid.h"
+extern int fs_overflowuid;
+extern int fs_overflowgid;
+# 17 "./include/linux/uidgid.h" 2
+
+struct user_namespace;
+extern struct user_namespace init_user_ns;
+
+typedef struct {
+ uid_t val;
+} kuid_t;
+
+
+typedef struct {
+ gid_t val;
+} kgid_t;
+# 44 "./include/linux/uidgid.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) uid_t __kuid_val(kuid_t uid)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gid_t __kgid_val(kgid_t gid)
+{
+ return 0;
+}
+# 61 "./include/linux/uidgid.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_eq(kuid_t left, kuid_t right)
+{
+ return __kuid_val(left) == __kuid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_eq(kgid_t left, kgid_t right)
+{
+ return __kgid_val(left) == __kgid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_gt(kuid_t left, kuid_t right)
+{
+ return __kuid_val(left) > __kuid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_gt(kgid_t left, kgid_t right)
+{
+ return __kgid_val(left) > __kgid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_gte(kuid_t left, kuid_t right)
+{
+ return __kuid_val(left) >= __kuid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_gte(kgid_t left, kgid_t right)
+{
+ return __kgid_val(left) >= __kgid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_lt(kuid_t left, kuid_t right)
+{
+ return __kuid_val(left) < __kuid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_lt(kgid_t left, kgid_t right)
+{
+ return __kgid_val(left) < __kgid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_lte(kuid_t left, kuid_t right)
+{
+ return __kuid_val(left) <= __kuid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_lte(kgid_t left, kgid_t right)
+{
+ return __kgid_val(left) <= __kgid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uid_valid(kuid_t uid)
+{
+ return __kuid_val(uid) != (uid_t) -1;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gid_valid(kgid_t gid)
+{
+ return __kgid_val(gid) != (gid_t) -1;
+}
+# 143 "./include/linux/uidgid.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kuid_t make_kuid(struct user_namespace *from, uid_t uid)
+{
+ return (kuid_t){ uid };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kgid_t make_kgid(struct user_namespace *from, gid_t gid)
+{
+ return (kgid_t){ gid };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) uid_t from_kuid(struct user_namespace *to, kuid_t kuid)
+{
+ return __kuid_val(kuid);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gid_t from_kgid(struct user_namespace *to, kgid_t kgid)
+{
+ return __kgid_val(kgid);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) uid_t from_kuid_munged(struct user_namespace *to, kuid_t kuid)
+{
+ uid_t uid = from_kuid(to, kuid);
+ if (uid == (uid_t)-1)
+  uid = overflowuid;
+ return uid;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gid_t from_kgid_munged(struct user_namespace *to, kgid_t kgid)
+{
+ gid_t gid = from_kgid(to, kgid);
+ if (gid == (gid_t)-1)
+  gid = overflowgid;
+ return gid;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
+{
+ return uid_valid(uid);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
+{
+ return gid_valid(gid);
+}
+# 18 "./include/linux/kernfs.h" 2
+
+
+struct file;
+struct dentry;
+struct iattr;
+struct seq_file;
+struct vm_area_struct;
+struct super_block;
+struct file_system_type;
+struct poll_table_struct;
+struct fs_context;
+
+struct kernfs_fs_context;
+struct kernfs_open_node;
+struct kernfs_iattrs;
+
+enum kernfs_node_type {
+ KERNFS_DIR = 0x0001,
+ KERNFS_FILE = 0x0002,
+ KERNFS_LINK = 0x0004,
+};
+
+
+
+
+
+
+enum kernfs_node_flag {
+ KERNFS_ACTIVATED = 0x0010,
+ KERNFS_NS = 0x0020,
+ KERNFS_HAS_SEQ_SHOW = 0x0040,
+ KERNFS_HAS_MMAP = 0x0080,
+ KERNFS_LOCKDEP = 0x0100,
+ KERNFS_SUICIDAL = 0x0400,
+ KERNFS_SUICIDED = 0x0800,
+ KERNFS_EMPTY_DIR = 0x1000,
+ KERNFS_HAS_RELEASE = 0x2000,
+};
+
+
+enum kernfs_root_flag {
+
+
+
+
+
+
+ KERNFS_ROOT_CREATE_DEACTIVATED = 0x0001,
+# 76 "./include/linux/kernfs.h"
+ KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 0x0002,
+
+
+
+
+
+ KERNFS_ROOT_SUPPORT_EXPORTOP = 0x0004,
+
+
+
+
+ KERNFS_ROOT_SUPPORT_USER_XATTR = 0x0008,
+};
+
+
+struct kernfs_elem_dir {
+ unsigned long subdirs;
+
+ struct rb_root children;
+
+
+
+
+
+ struct kernfs_root *root;
+};
+
+struct kernfs_elem_symlink {
+ struct kernfs_node *target_kn;
+};
+
+struct kernfs_elem_attr {
+ const struct kernfs_ops *ops;
+ struct kernfs_open_node *open;
+ loff_t size;
+ struct kernfs_node *notify_next;
+};
+# 123 "./include/linux/kernfs.h"
+struct kernfs_node {
+ atomic_t count;
+ atomic_t active;
+
+ struct lockdep_map dep_map;
+
+
+
+
+
+
+
+ struct kernfs_node *parent;
+ const char *name;
+
+ struct rb_node rb;
+
+ const void *ns;
+ unsigned int hash;
+ union {
+  struct kernfs_elem_dir dir;
+  struct kernfs_elem_symlink symlink;
+  struct kernfs_elem_attr attr;
+ };
+
+ void *priv;
+
+
+
+
+
+ u64 id;
+
+ unsigned short flags;
+ umode_t mode;
+ struct kernfs_iattrs *iattr;
+};
+# 168 "./include/linux/kernfs.h"
+struct kernfs_syscall_ops {
+ int (*show_options)(struct seq_file *sf, struct kernfs_root *root);
+
+ int (*mkdir)(struct kernfs_node *parent, const char *name,
+       umode_t mode);
+ int (*rmdir)(struct kernfs_node *kn);
+ int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
+        const char *new_name);
+ int (*show_path)(struct seq_file *sf, struct kernfs_node *kn,
+    struct kernfs_root *root);
+};
+
+struct kernfs_root {
+
+ struct kernfs_node *kn;
+ unsigned int flags;
+
+
+ struct idr ino_idr;
+ u32 last_id_lowbits;
+ u32 id_highbits;
+ struct kernfs_syscall_ops *syscall_ops;
+
+
+ struct list_head supers;
+
+ wait_queue_head_t deactivate_waitq;
+};
+
+struct kernfs_open_file {
+
+ struct kernfs_node *kn;
+ struct file *file;
+ struct seq_file *seq_file;
+ void *priv;
+
+
+ struct mutex mutex;
+ struct mutex prealloc_mutex;
+ int event;
+ struct list_head list;
+ char *prealloc_buf;
+
+ size_t atomic_write_len;
+ bool mmapped:1;
+ bool released:1;
+ const struct vm_operations_struct *vm_ops;
+};
+
+struct kernfs_ops {
+
+
+
+
+ int (*open)(struct kernfs_open_file *of);
+ void (*release)(struct kernfs_open_file *of);
+# 236 "./include/linux/kernfs.h"
+ int (*seq_show)(struct seq_file *sf, void *v);
+
+ void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
+ void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
+ void (*seq_stop)(struct seq_file *sf, void *v);
+
+ ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
+   loff_t off);
+# 252 "./include/linux/kernfs.h"
+ size_t atomic_write_len;
+
+
+
+
+
+
+ bool prealloc;
+ ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
+    loff_t off);
+
+ __poll_t (*poll)(struct kernfs_open_file *of,
+    struct poll_table_struct *pt);
+
+ int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);
+
+
+ struct lock_class_key lockdep_key;
+
+};
+
+
+
+
+struct kernfs_fs_context {
+ struct kernfs_root *root;
+ void *ns_tag;
+ unsigned long magic;
+
+
+ bool new_sb_created;
+};
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
+{
+ return kn->flags & 0x000f;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ino_t kernfs_id_ino(u64 id)
+{
+
+ if (sizeof(ino_t) >= sizeof(u64))
+  return id;
+ else
+  return (u32)id;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 kernfs_id_gen(u64 id)
+{
+
+ if (sizeof(ino_t) >= sizeof(u64))
+  return 1;
+ else
+  return id >> 32;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ino_t kernfs_ino(struct kernfs_node *kn)
+{
+ return kernfs_id_ino(kn->id);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ino_t kernfs_gen(struct kernfs_node *kn)
+{
+ return kernfs_id_gen(kn->id);
+}
+# 328 "./include/linux/kernfs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kernfs_enable_ns(struct kernfs_node *kn)
+{
+ ({ int __ret_warn_on = !!(kernfs_type(kn) != KERNFS_DIR); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/kernfs.h"), "i" (330), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (110)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ ({ int __ret_warn_on = !!(!(({ do { extern void __compiletime_assert_111(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&kn->dir.children)->rb_node) == sizeof(char) || sizeof((&kn->dir.children)->rb_node) == sizeof(short) || sizeof((&kn->dir.children)->rb_node) == sizeof(int) || sizeof((&kn->dir.children)->rb_node) == sizeof(long)) || sizeof((&kn->dir.children)->rb_node) == sizeof(long long))) __compiletime_assert_111(); } while (0); (*(const volatile typeof( _Generic(((&kn->dir.children)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&kn->dir.children)->rb_node))) *)&((&kn->dir.children)->rb_node)); }) == ((void *)0))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/kernfs.h"), "i" (331), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (112)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ kn->flags |= KERNFS_NS;
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kernfs_ns_enabled(struct kernfs_node *kn)
+{
+ return kn->flags & KERNFS_NS;
+}
+
+int kernfs_name(struct kernfs_node *kn, char *buf, size_t buflen);
+int kernfs_path_from_node(struct kernfs_node *root_kn, struct kernfs_node *kn,
+     char *buf, size_t buflen);
+void pr_cont_kernfs_name(struct kernfs_node *kn);
+void pr_cont_kernfs_path(struct kernfs_node *kn);
+struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn);
+struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
+        const char *name, const void *ns);
+struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *parent,
+        const char *path, const void *ns);
+void kernfs_get(struct kernfs_node *kn);
+void kernfs_put(struct kernfs_node *kn);
+
+struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry);
+struct kernfs_root *kernfs_root_from_sb(struct super_block *sb);
+struct inode *kernfs_get_inode(struct super_block *sb, struct kernfs_node *kn);
+
+struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
+      struct super_block *sb);
+struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
+           unsigned int flags, void *priv);
+void kernfs_destroy_root(struct kernfs_root *root);
+
+struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
+      const char *name, umode_t mode,
+      kuid_t uid, kgid_t gid,
+      void *priv, const void *ns);
+struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
+         const char *name);
+struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
+      const char *name, umode_t mode,
+      kuid_t uid, kgid_t gid,
+      loff_t size,
+      const struct kernfs_ops *ops,
+      void *priv, const void *ns,
+      struct lock_class_key *key);
+struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
+           const char *name,
+           struct kernfs_node *target);
+void kernfs_activate(struct kernfs_node *kn);
+void kernfs_remove(struct kernfs_node *kn);
+void kernfs_break_active_protection(struct kernfs_node *kn);
+void kernfs_unbreak_active_protection(struct kernfs_node *kn);
+bool kernfs_remove_self(struct kernfs_node *kn);
+int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
+        const void *ns);
+int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
+       const char *new_name, const void *new_ns);
+int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
+__poll_t kernfs_generic_poll(struct kernfs_open_file *of,
+        struct poll_table_struct *pt);
+void kernfs_notify(struct kernfs_node *kn);
+
+int kernfs_xattr_get(struct kernfs_node *kn, const char *name,
+       void *value, size_t size);
+int kernfs_xattr_set(struct kernfs_node *kn, const char *name,
+       const void *value, size_t size, int flags);
+
+const void *kernfs_super_ns(struct super_block *sb);
+int kernfs_get_tree(struct fs_context *fc);
+void kernfs_free_fs_context(struct fs_context *fc);
+void kernfs_kill_sb(struct super_block *sb);
+
+void kernfs_init(void);
+
+struct kernfs_node *kernfs_find_and_get_node_by_id(struct kernfs_root *root,
+         u64 id);
+# 540 "./include/linux/kernfs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kernfs_path(struct kernfs_node *kn, char *buf, size_t buflen)
+{
+ return kernfs_path_from_node(kn, ((void *)0), buf, buflen);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *
+kernfs_find_and_get(struct kernfs_node *kn, const char *name)
+{
+ return kernfs_find_and_get_ns(kn, name, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *
+kernfs_walk_and_get(struct kernfs_node *kn, const char *path)
+{
+ return kernfs_walk_and_get_ns(kn, path, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *
+kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
+    void *priv)
+{
+ return kernfs_create_dir_ns(parent, name, mode,
+        (kuid_t){ 0 }, (kgid_t){ 0 },
+        priv, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *
+kernfs_create_file_ns(struct kernfs_node *parent, const char *name,
+        umode_t mode, kuid_t uid, kgid_t gid,
+        loff_t size, const struct kernfs_ops *ops,
+        void *priv, const void *ns)
+{
+ struct lock_class_key *key = ((void *)0);
+
+
+ key = (struct lock_class_key *)&ops->lockdep_key;
+
+ return __kernfs_create_file(parent, name, mode, uid, gid,
+        size, ops, priv, ns, key);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *
+kernfs_create_file(struct kernfs_node *parent, const char *name, umode_t mode,
+     loff_t size, const struct kernfs_ops *ops, void *priv)
+{
+ return kernfs_create_file_ns(parent, name, mode,
+         (kuid_t){ 0 }, (kgid_t){ 0 },
+         size, ops, priv, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kernfs_remove_by_name(struct kernfs_node *parent,
+     const char *name)
+{
+ return kernfs_remove_by_name_ns(parent, name, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kernfs_rename(struct kernfs_node *kn,
+    struct kernfs_node *new_parent,
+    const char *new_name)
+{
+ return kernfs_rename_ns(kn, new_parent, new_name, ((void *)0));
+}
+# 17 "./include/linux/sysfs.h" 2
+
+
+
+
+# 1 "./include/linux/kobject_ns.h" 1
+# 19 "./include/linux/kobject_ns.h"
+struct sock;
+struct kobject;
+
+
+
+
+
+enum kobj_ns_type {
+ KOBJ_NS_TYPE_NONE = 0,
+ KOBJ_NS_TYPE_NET,
+ KOBJ_NS_TYPES
+};
+# 39 "./include/linux/kobject_ns.h"
+struct kobj_ns_type_operations {
+ enum kobj_ns_type type;
+ bool (*current_may_mount)(void);
+ void *(*grab_current_ns)(void);
+ const void *(*netlink_ns)(struct sock *sk);
+ const void *(*initial_ns)(void);
+ void (*drop_ns)(void *);
+};
+
+int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
+int kobj_ns_type_registered(enum kobj_ns_type type);
+const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
+const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);
+
+bool kobj_ns_current_may_mount(enum kobj_ns_type type);
+void *kobj_ns_grab_current(enum kobj_ns_type type);
+const void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
+const void *kobj_ns_initial(enum kobj_ns_type type);
+void kobj_ns_drop(enum kobj_ns_type type, void *ns);
+# 22 "./include/linux/sysfs.h" 2
+# 1 "./include/linux/stat.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/uapi/asm/stat.h" 1
+
+
+
+
+# 1 "./arch/x86/include/asm/posix_types.h" 1
+# 6 "./arch/x86/include/uapi/asm/stat.h" 2
+# 83 "./arch/x86/include/uapi/asm/stat.h"
+struct stat {
+ __kernel_ulong_t st_dev;
+ __kernel_ulong_t st_ino;
+ __kernel_ulong_t st_nlink;
+
+ unsigned int st_mode;
+ unsigned int st_uid;
+ unsigned int st_gid;
+ unsigned int __pad0;
+ __kernel_ulong_t st_rdev;
+ __kernel_long_t st_size;
+ __kernel_long_t st_blksize;
+ __kernel_long_t st_blocks;
+
+ __kernel_ulong_t st_atime;
+ __kernel_ulong_t st_atime_nsec;
+ __kernel_ulong_t st_mtime;
+ __kernel_ulong_t st_mtime_nsec;
+ __kernel_ulong_t st_ctime;
+ __kernel_ulong_t st_ctime_nsec;
+ __kernel_long_t __unused[3];
+};
+# 117 "./arch/x86/include/uapi/asm/stat.h"
+struct __old_kernel_stat {
+ unsigned short st_dev;
+ unsigned short st_ino;
+ unsigned short st_mode;
+ unsigned short st_nlink;
+ unsigned short st_uid;
+ unsigned short st_gid;
+ unsigned short st_rdev;
+
+
+
+
+
+
+ unsigned int st_size;
+ unsigned int st_atime;
+ unsigned int st_mtime;
+ unsigned int st_ctime;
+
+};
+# 7 "./include/linux/stat.h" 2
+# 1 "./include/uapi/linux/stat.h" 1
+# 56 "./include/uapi/linux/stat.h"
+struct statx_timestamp {
+ __s64 tv_sec;
+ __u32 tv_nsec;
+ __s32 __reserved;
+};
+# 99 "./include/uapi/linux/stat.h"
+struct statx {
+
+ __u32 stx_mask;
+ __u32 stx_blksize;
+ __u64 stx_attributes;
+
+ __u32 stx_nlink;
+ __u32 stx_uid;
+ __u32 stx_gid;
+ __u16 stx_mode;
+ __u16 __spare0[1];
+
+ __u64 stx_ino;
+ __u64 stx_size;
+ __u64 stx_blocks;
+ __u64 stx_attributes_mask;
+
+ struct statx_timestamp stx_atime;
+ struct statx_timestamp stx_btime;
+ struct statx_timestamp stx_ctime;
+ struct statx_timestamp stx_mtime;
+
+ __u32 stx_rdev_major;
+ __u32 stx_rdev_minor;
+ __u32 stx_dev_major;
+ __u32 stx_dev_minor;
+
+ __u64 stx_mnt_id;
+ __u64 __spare2;
+
+ __u64 __spare3[12];
+
+};
+# 8 "./include/linux/stat.h" 2
+# 22 "./include/linux/stat.h"
+struct kstat {
+ u32 result_mask;
+ umode_t mode;
+ unsigned int nlink;
+ uint32_t blksize;
+ u64 attributes;
+ u64 attributes_mask;
+# 37 "./include/linux/stat.h"
+ u64 ino;
+ dev_t dev;
+ dev_t rdev;
+ kuid_t uid;
+ kgid_t gid;
+ loff_t size;
+ struct timespec64 atime;
+ struct timespec64 mtime;
+ struct timespec64 ctime;
+ struct timespec64 btime;
+ u64 blocks;
+ u64 mnt_id;
+};
+# 23 "./include/linux/sysfs.h" 2
+
+
+struct kobject;
+struct module;
+struct bin_attribute;
+enum kobj_ns_type;
+
+struct attribute {
+ const char *name;
+ umode_t mode;
+
+ bool ignore_lockdep:1;
+ struct lock_class_key *key;
+ struct lock_class_key skey;
+
+};
+# 84 "./include/linux/sysfs.h"
+struct attribute_group {
+ const char *name;
+ umode_t (*is_visible)(struct kobject *,
+           struct attribute *, int);
+ umode_t (*is_bin_visible)(struct kobject *,
+        struct bin_attribute *, int);
+ struct attribute **attrs;
+ struct bin_attribute **bin_attrs;
+};
+# 165 "./include/linux/sysfs.h"
+struct file;
+struct vm_area_struct;
+struct address_space;
+
+struct bin_attribute {
+ struct attribute attr;
+ size_t size;
+ void *private;
+ struct address_space *mapping;
+ ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
+   char *, loff_t, size_t);
+ ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
+    char *, loff_t, size_t);
+ int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
+      struct vm_area_struct *vma);
+};
+# 232 "./include/linux/sysfs.h"
+struct sysfs_ops {
+ ssize_t (*show)(struct kobject *, struct attribute *, char *);
+ ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
+};
+
+
+
+int __attribute__((__warn_unused_result__)) sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
+void sysfs_remove_dir(struct kobject *kobj);
+int __attribute__((__warn_unused_result__)) sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
+         const void *new_ns);
+int __attribute__((__warn_unused_result__)) sysfs_move_dir_ns(struct kobject *kobj,
+       struct kobject *new_parent_kobj,
+       const void *new_ns);
+int __attribute__((__warn_unused_result__)) sysfs_create_mount_point(struct kobject *parent_kobj,
+       const char *name);
+void sysfs_remove_mount_point(struct kobject *parent_kobj,
+         const char *name);
+
+int __attribute__((__warn_unused_result__)) sysfs_create_file_ns(struct kobject *kobj,
+          const struct attribute *attr,
+          const void *ns);
+int __attribute__((__warn_unused_result__)) sysfs_create_files(struct kobject *kobj,
+       const struct attribute * const *attr);
+int __attribute__((__warn_unused_result__)) sysfs_chmod_file(struct kobject *kobj,
+      const struct attribute *attr, umode_t mode);
+struct kernfs_node *sysfs_break_active_protection(struct kobject *kobj,
+        const struct attribute *attr);
+void sysfs_unbreak_active_protection(struct kernfs_node *kn);
+void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
+     const void *ns);
+bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
+void sysfs_remove_files(struct kobject *kobj, const struct attribute * const *attr);
+
+int __attribute__((__warn_unused_result__)) sysfs_create_bin_file(struct kobject *kobj,
+           const struct bin_attribute *attr);
+void sysfs_remove_bin_file(struct kobject *kobj,
+      const struct bin_attribute *attr);
+
+int __attribute__((__warn_unused_result__)) sysfs_create_link(struct kobject *kobj, struct kobject *target,
+       const char *name);
+int __attribute__((__warn_unused_result__)) sysfs_create_link_nowarn(struct kobject *kobj,
+       struct kobject *target,
+       const char *name);
+void sysfs_remove_link(struct kobject *kobj, const char *name);
+
+int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
+    const char *old_name, const char *new_name,
+    const void *new_ns);
+
+void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
+   const char *name);
+
+int __attribute__((__warn_unused_result__)) sysfs_create_group(struct kobject *kobj,
+        const struct attribute_group *grp);
+int __attribute__((__warn_unused_result__)) sysfs_create_groups(struct kobject *kobj,
+         const struct attribute_group **groups);
+int __attribute__((__warn_unused_result__)) sysfs_update_groups(struct kobject *kobj,
+         const struct attribute_group **groups);
+int sysfs_update_group(struct kobject *kobj,
+         const struct attribute_group *grp);
+void sysfs_remove_group(struct kobject *kobj,
+   const struct attribute_group *grp);
+void sysfs_remove_groups(struct kobject *kobj,
+    const struct attribute_group **groups);
+int sysfs_add_file_to_group(struct kobject *kobj,
+   const struct attribute *attr, const char *group);
+void sysfs_remove_file_from_group(struct kobject *kobj,
+   const struct attribute *attr, const char *group);
+int sysfs_merge_group(struct kobject *kobj,
+         const struct attribute_group *grp);
+void sysfs_unmerge_group(struct kobject *kobj,
+         const struct attribute_group *grp);
+int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
+       struct kobject *target, const char *link_name);
+void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
+      const char *link_name);
+int compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
+      struct kobject *target_kobj,
+      const char *target_name,
+      const char *symlink_name);
+
+void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);
+
+int __attribute__((__warn_unused_result__)) sysfs_init(void);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sysfs_enable_ns(struct kernfs_node *kn)
+{
+ return kernfs_enable_ns(kn);
+}
+
+int sysfs_file_change_owner(struct kobject *kobj, const char *name, kuid_t kuid,
+       kgid_t kgid);
+int sysfs_change_owner(struct kobject *kobj, kuid_t kuid, kgid_t kgid);
+int sysfs_link_change_owner(struct kobject *kobj, struct kobject *targ,
+       const char *name, kuid_t kuid, kgid_t kgid);
+int sysfs_groups_change_owner(struct kobject *kobj,
+         const struct attribute_group **groups,
+         kuid_t kuid, kgid_t kgid);
+int sysfs_group_change_owner(struct kobject *kobj,
+        const struct attribute_group *groups, kuid_t kuid,
+        kgid_t kgid);
+__attribute__((__format__(printf, 2, 3)))
+int sysfs_emit(char *buf, const char *fmt, ...);
+__attribute__((__format__(printf, 3, 4)))
+int sysfs_emit_at(char *buf, int at, const char *fmt, ...);
+# 598 "./include/linux/sysfs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) sysfs_create_file(struct kobject *kobj,
+       const struct attribute *attr)
+{
+ return sysfs_create_file_ns(kobj, attr, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sysfs_remove_file(struct kobject *kobj,
+         const struct attribute *attr)
+{
+ sysfs_remove_file_ns(kobj, attr, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
+        const char *old_name, const char *new_name)
+{
+ return sysfs_rename_link_ns(kobj, target, old_name, new_name, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sysfs_notify_dirent(struct kernfs_node *kn)
+{
+ kernfs_notify(kn);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,
+         const char *name)
+{
+ return kernfs_find_and_get(parent, name);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kernfs_node *sysfs_get(struct kernfs_node *kn)
+{
+ kernfs_get(kn);
+ return kn;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sysfs_put(struct kernfs_node *kn)
+{
+ kernfs_put(kn);
+}
+# 21 "./include/linux/kobject.h" 2
+
+
+# 1 "./include/linux/kref.h" 1
+# 17 "./include/linux/kref.h"
+# 1 "./include/linux/refcount.h" 1
+# 101 "./include/linux/refcount.h"
+struct mutex;
+# 111 "./include/linux/refcount.h"
+typedef struct refcount_struct {
+ atomic_t refs;
+} refcount_t;
+
+
+
+
+
+enum refcount_saturation_type {
+ REFCOUNT_ADD_NOT_ZERO_OVF,
+ REFCOUNT_ADD_OVF,
+ REFCOUNT_ADD_UAF,
+ REFCOUNT_SUB_UAF,
+ REFCOUNT_DEC_LEAK,
+};
+
+void refcount_warn_saturate(refcount_t *r, enum refcount_saturation_type t);
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void refcount_set(refcount_t *r, int n)
+{
+ atomic_set(&r->refs, n);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int refcount_read(const refcount_t *r)
+{
+ return atomic_read(&r->refs);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool __refcount_add_not_zero(int i, refcount_t *r, int *oldp)
+{
+ int old = refcount_read(r);
+
+ do {
+  if (!old)
+   break;
+ } while (!atomic_try_cmpxchg_relaxed(&r->refs, &old, old + i));
+
+ if (oldp)
+  *oldp = old;
+
+ if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
+  refcount_warn_saturate(r, REFCOUNT_ADD_NOT_ZERO_OVF);
+
+ return old;
+}
+# 186 "./include/linux/refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool refcount_add_not_zero(int i, refcount_t *r)
+{
+ return __refcount_add_not_zero(i, r, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __refcount_add(int i, refcount_t *r, int *oldp)
+{
+ int old = atomic_fetch_add_relaxed(i, &r->refs);
+
+ if (oldp)
+  *oldp = old;
+
+ if (__builtin_expect(!!(!old), 0))
+  refcount_warn_saturate(r, REFCOUNT_ADD_UAF);
+ else if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
+  refcount_warn_saturate(r, REFCOUNT_ADD_OVF);
+}
+# 220 "./include/linux/refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void refcount_add(int i, refcount_t *r)
+{
+ __refcount_add(i, r, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool __refcount_inc_not_zero(refcount_t *r, int *oldp)
+{
+ return __refcount_add_not_zero(1, r, oldp);
+}
+# 243 "./include/linux/refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool refcount_inc_not_zero(refcount_t *r)
+{
+ return __refcount_inc_not_zero(r, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __refcount_inc(refcount_t *r, int *oldp)
+{
+ __refcount_add(1, r, oldp);
+}
+# 265 "./include/linux/refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void refcount_inc(refcount_t *r)
+{
+ __refcount_inc(r, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool __refcount_sub_and_test(int i, refcount_t *r, int *oldp)
+{
+ int old = atomic_fetch_sub_release(i, &r->refs);
+
+ if (oldp)
+  *oldp = old;
+
+ if (old == i) {
+  __asm__ __volatile__("": : :"memory");
+  return true;
+ }
+
+ if (__builtin_expect(!!(old < 0 || old - i < 0), 0))
+  refcount_warn_saturate(r, REFCOUNT_SUB_UAF);
+
+ return false;
+}
+# 308 "./include/linux/refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool refcount_sub_and_test(int i, refcount_t *r)
+{
+ return __refcount_sub_and_test(i, r, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool __refcount_dec_and_test(refcount_t *r, int *oldp)
+{
+ return __refcount_sub_and_test(1, r, oldp);
+}
+# 331 "./include/linux/refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) bool refcount_dec_and_test(refcount_t *r)
+{
+ return __refcount_dec_and_test(r, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __refcount_dec(refcount_t *r, int *oldp)
+{
+ int old = atomic_fetch_sub_release(1, &r->refs);
+
+ if (oldp)
+  *oldp = old;
+
+ if (__builtin_expect(!!(old <= 1), 0))
+  refcount_warn_saturate(r, REFCOUNT_DEC_LEAK);
+}
+# 357 "./include/linux/refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void refcount_dec(refcount_t *r)
+{
+ __refcount_dec(r, ((void *)0));
+}
+
+extern __attribute__((__warn_unused_result__)) bool refcount_dec_if_one(refcount_t *r);
+extern __attribute__((__warn_unused_result__)) bool refcount_dec_not_one(refcount_t *r);
+extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock);
+extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock(refcount_t *r, spinlock_t *lock);
+extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock_irqsave(refcount_t *r,
+             spinlock_t *lock,
+             unsigned long *flags);
+# 18 "./include/linux/kref.h" 2
+
+struct kref {
+ refcount_t refcount;
+};
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kref_init(struct kref *kref)
+{
+ refcount_set(&kref->refcount, 1);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int kref_read(const struct kref *kref)
+{
+ return refcount_read(&kref->refcount);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kref_get(struct kref *kref)
+{
+ refcount_inc(&kref->refcount);
+}
+# 62 "./include/linux/kref.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kref_put(struct kref *kref, void (*release)(struct kref *kref))
+{
+ if (refcount_dec_and_test(&kref->refcount)) {
+  release(kref);
+  return 1;
+ }
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kref_put_mutex(struct kref *kref,
+     void (*release)(struct kref *kref),
+     struct mutex *lock)
+{
+ if (refcount_dec_and_mutex_lock(&kref->refcount, lock)) {
+  release(kref);
+  return 1;
+ }
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kref_put_lock(struct kref *kref,
+    void (*release)(struct kref *kref),
+    spinlock_t *lock)
+{
+ if (refcount_dec_and_lock(&kref->refcount, lock)) {
+  release(kref);
+  return 1;
+ }
+ return 0;
+}
+# 109 "./include/linux/kref.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) kref_get_unless_zero(struct kref *kref)
+{
+ return refcount_inc_not_zero(&kref->refcount);
+}
+# 24 "./include/linux/kobject.h" 2
+# 41 "./include/linux/kobject.h"
+extern u64 uevent_seqnum;
+# 53 "./include/linux/kobject.h"
+enum kobject_action {
+ KOBJ_ADD,
+ KOBJ_REMOVE,
+ KOBJ_CHANGE,
+ KOBJ_MOVE,
+ KOBJ_ONLINE,
+ KOBJ_OFFLINE,
+ KOBJ_BIND,
+ KOBJ_UNBIND,
+};
+
+struct kobject {
+ const char *name;
+ struct list_head entry;
+ struct kobject *parent;
+ struct kset *kset;
+ struct kobj_type *ktype;
+ struct kernfs_node *sd;
+ struct kref kref;
+
+
+
+ unsigned int state_initialized:1;
+ unsigned int state_in_sysfs:1;
+ unsigned int state_add_uevent_sent:1;
+ unsigned int state_remove_uevent_sent:1;
+ unsigned int uevent_suppress:1;
+};
+
+extern __attribute__((__format__(printf, 2, 3)))
+int kobject_set_name(struct kobject *kobj, const char *name, ...);
+extern __attribute__((__format__(printf, 2, 0)))
+int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
+      va_list vargs);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *kobject_name(const struct kobject *kobj)
+{
+ return kobj->name;
+}
+
+extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
+extern __attribute__((__format__(printf, 3, 4))) __attribute__((__warn_unused_result__))
+int kobject_add(struct kobject *kobj, struct kobject *parent,
+  const char *fmt, ...);
+extern __attribute__((__format__(printf, 4, 5))) __attribute__((__warn_unused_result__))
+int kobject_init_and_add(struct kobject *kobj,
+    struct kobj_type *ktype, struct kobject *parent,
+    const char *fmt, ...);
+
+extern void kobject_del(struct kobject *kobj);
+
+extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create(void);
+extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create_and_add(const char *name,
+      struct kobject *parent);
+
+extern int __attribute__((__warn_unused_result__)) kobject_rename(struct kobject *, const char *new_name);
+extern int __attribute__((__warn_unused_result__)) kobject_move(struct kobject *, struct kobject *);
+
+extern struct kobject *kobject_get(struct kobject *kobj);
+extern struct kobject * __attribute__((__warn_unused_result__)) kobject_get_unless_zero(
+      struct kobject *kobj);
+extern void kobject_put(struct kobject *kobj);
+
+extern const void *kobject_namespace(struct kobject *kobj);
+extern void kobject_get_ownership(struct kobject *kobj,
+      kuid_t *uid, kgid_t *gid);
+extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);
+# 131 "./include/linux/kobject.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kobject_has_children(struct kobject *kobj)
+{
+ ({ int __ret_warn_on = !!(kref_read(&kobj->kref) == 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/kobject.h"), "i" (133), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (113)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+
+ return kobj->sd && kobj->sd->dir.subdirs;
+}
+
+struct kobj_type {
+ void (*release)(struct kobject *kobj);
+ const struct sysfs_ops *sysfs_ops;
+ struct attribute **default_attrs;
+ const struct attribute_group **default_groups;
+ const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
+ const void *(*namespace)(struct kobject *kobj);
+ void (*get_ownership)(struct kobject *kobj, kuid_t *uid, kgid_t *gid);
+};
+
+struct kobj_uevent_env {
+ char *argv[3];
+ char *envp[64];
+ int envp_idx;
+ char buf[2048];
+ int buflen;
+};
+
+struct kset_uevent_ops {
+ int (* const filter)(struct kset *kset, struct kobject *kobj);
+ const char *(* const name)(struct kset *kset, struct kobject *kobj);
+ int (* const uevent)(struct kset *kset, struct kobject *kobj,
+        struct kobj_uevent_env *env);
+};
+
+struct kobj_attribute {
+ struct attribute attr;
+ ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
+   char *buf);
+ ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
+    const char *buf, size_t count);
+};
+
+extern const struct sysfs_ops kobj_sysfs_ops;
+
+struct sock;
+# 192 "./include/linux/kobject.h"
+struct kset {
+ struct list_head list;
+ spinlock_t list_lock;
+ struct kobject kobj;
+ const struct kset_uevent_ops *uevent_ops;
+} __attribute__((__designated_init__));
+
+extern void kset_init(struct kset *kset);
+extern int __attribute__((__warn_unused_result__)) kset_register(struct kset *kset);
+extern void kset_unregister(struct kset *kset);
+extern struct kset * __attribute__((__warn_unused_result__)) kset_create_and_add(const char *name,
+      const struct kset_uevent_ops *u,
+      struct kobject *parent_kobj);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kset *to_kset(struct kobject *kobj)
+{
+ return kobj ? ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_114(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct kset *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_114(); } while (0); ((struct kset *)(__mptr - __builtin_offsetof(struct kset, kobj))); }) : ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kset *kset_get(struct kset *k)
+{
+ return k ? to_kset(kobject_get(&k->kobj)) : ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kset_put(struct kset *k)
+{
+ kobject_put(&k->kobj);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kobj_type *get_ktype(struct kobject *kobj)
+{
+ return kobj->ktype;
+}
+
+extern struct kobject *kset_find_obj(struct kset *, const char *);
+
+
+extern struct kobject *kernel_kobj;
+
+extern struct kobject *mm_kobj;
+
+extern struct kobject *hypervisor_kobj;
+
+extern struct kobject *power_kobj;
+
+extern struct kobject *firmware_kobj;
+
+int kobject_uevent(struct kobject *kobj, enum kobject_action action);
+int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
+   char *envp[]);
+int kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count);
+
+__attribute__((__format__(printf, 2, 3)))
+int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
+# 6 "./include/linux/cdev.h" 2
+# 1 "./include/linux/kdev_t.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/kdev_t.h" 1
+# 6 "./include/linux/kdev_t.h" 2
+# 24 "./include/linux/kdev_t.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool old_valid_dev(dev_t dev)
+{
+ return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u16 old_encode_dev(dev_t dev)
+{
+ return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) dev_t old_decode_dev(u16 val)
+{
+ return ((((val >> 8) & 255) << 20) | (val & 255));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 new_encode_dev(dev_t dev)
+{
+ unsigned major = ((unsigned int) ((dev) >> 20));
+ unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
+ return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) dev_t new_decode_dev(u32 dev)
+{
+ unsigned major = (dev & 0xfff00) >> 8;
+ unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
+ return (((major) << 20) | (minor));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u64 huge_encode_dev(dev_t dev)
+{
+ return new_encode_dev(dev);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) dev_t huge_decode_dev(u64 dev)
+{
+ return new_decode_dev(dev);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int sysv_valid_dev(dev_t dev)
+{
+ return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 sysv_encode_dev(dev_t dev)
+{
+ return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned sysv_major(u32 dev)
+{
+ return (dev >> 18) & 0x3fff;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned sysv_minor(u32 dev)
+{
+ return dev & 0x3ffff;
+}
+# 7 "./include/linux/cdev.h" 2
+
+# 1 "./include/linux/device.h" 1
+# 15 "./include/linux/device.h"
+# 1 "./include/linux/dev_printk.h" 1
+# 16 "./include/linux/dev_printk.h"
+# 1 "./include/linux/ratelimit.h" 1
+
+
+
+
+
+# 1 "./include/linux/sched.h" 1
+# 10 "./include/linux/sched.h"
+# 1 "./include/uapi/linux/sched.h" 1
+# 92 "./include/uapi/linux/sched.h"
+struct clone_args {
+ __u64 __attribute__((aligned(8))) flags;
+ __u64 __attribute__((aligned(8))) pidfd;
+ __u64 __attribute__((aligned(8))) child_tid;
+ __u64 __attribute__((aligned(8))) parent_tid;
+ __u64 __attribute__((aligned(8))) exit_signal;
+ __u64 __attribute__((aligned(8))) stack;
+ __u64 __attribute__((aligned(8))) stack_size;
+ __u64 __attribute__((aligned(8))) tls;
+ __u64 __attribute__((aligned(8))) set_tid;
+ __u64 __attribute__((aligned(8))) set_tid_size;
+ __u64 __attribute__((aligned(8))) cgroup;
+};
+# 11 "./include/linux/sched.h" 2
+
+
+
+# 1 "./include/linux/pid.h" 1
+
+
+
+
+# 1 "./include/linux/rculist.h" 1
+# 31 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void INIT_LIST_HEAD_RCU(struct list_head *list)
+{
+ do { do { extern void __compiletime_assert_115(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_115(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_116(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(list->prev) == sizeof(char) || sizeof(list->prev) == sizeof(short) || sizeof(list->prev) == sizeof(int) || sizeof(list->prev) == sizeof(long)) || sizeof(list->prev) == sizeof(long long))) __compiletime_assert_116(); } while (0); do { *(volatile typeof(list->prev) *)&(list->prev) = (list); } while (0); } while (0);
+}
+# 85 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_add_rcu(struct list_head *new,
+  struct list_head *prev, struct list_head *next)
+{
+ if (!__list_add_valid(new, prev, next))
+  return;
+
+ new->next = next;
+ new->prev = prev;
+ do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_117(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_117(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_118(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_118(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_119(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_119(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(prev)->next)))) *)&(*&(*((struct list_head **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+ next->prev = new;
+}
+# 113 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_add_rcu(struct list_head *new, struct list_head *head)
+{
+ __list_add_rcu(new, head, head->next);
+}
+# 134 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_add_tail_rcu(struct list_head *new,
+     struct list_head *head)
+{
+ __list_add_rcu(new, head->prev, head);
+}
+# 164 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_del_rcu(struct list_head *entry)
+{
+ __list_del_entry(entry);
+ entry->prev = ((void *) 0x122 + (0xdead000000000000UL));
+}
+# 190 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_del_init_rcu(struct hlist_node *n)
+{
+ if (!hlist_unhashed(n)) {
+  __hlist_del(n);
+  do { do { extern void __compiletime_assert_120(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_120(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *)0)); } while (0); } while (0);
+ }
+}
+# 206 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_replace_rcu(struct list_head *old,
+    struct list_head *new)
+{
+ new->next = old->next;
+ new->prev = old->prev;
+ do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_121(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long long))) __compiletime_assert_121(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(new->prev)->next))))) *)&(((*((struct list_head **)(&(new->prev)->next))))) = ((typeof((*((struct list_head **)(&(new->prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_122(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)))) __compiletime_assert_122(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_123(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long long))) __compiletime_assert_123(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(new->prev)->next)))) *)&(*&(*((struct list_head **)(&(new->prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+ new->next->prev = new;
+ old->prev = ((void *) 0x122 + (0xdead000000000000UL));
+}
+# 235 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __list_splice_init_rcu(struct list_head *list,
+       struct list_head *prev,
+       struct list_head *next,
+       void (*sync)(void))
+{
+ struct list_head *first = list->next;
+ struct list_head *last = list->prev;
+
+
+
+
+
+
+
+ INIT_LIST_HEAD_RCU(list);
+# 258 "./include/linux/rculist.h"
+ sync();
+ __kcsan_check_access(&(*first), sizeof(*first), (1 << 0) | (1 << 3));
+ __kcsan_check_access(&(*last), sizeof(*last), (1 << 0) | (1 << 3));
+# 270 "./include/linux/rculist.h"
+ last->next = next;
+ do { uintptr_t _r_a_p__v = (uintptr_t)(first); ; if (__builtin_constant_p(first) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_124(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_124(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_125(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_125(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_126(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_126(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(prev)->next)))) *)&(*&(*((struct list_head **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+ first->prev = prev;
+ next->prev = last;
+}
+# 283 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice_init_rcu(struct list_head *list,
+     struct list_head *head,
+     void (*sync)(void))
+{
+ if (!list_empty(list))
+  __list_splice_init_rcu(list, head, head->next, sync);
+}
+# 298 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void list_splice_tail_init_rcu(struct list_head *list,
+          struct list_head *head,
+          void (*sync)(void))
+{
+ if (!list_empty(list))
+  __list_splice_init_rcu(list, head->prev, head, sync);
+}
+# 512 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_del_rcu(struct hlist_node *n)
+{
+ __hlist_del(n);
+ do { do { extern void __compiletime_assert_127(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_127(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *) 0x122 + (0xdead000000000000UL))); } while (0); } while (0);
+}
+# 525 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_replace_rcu(struct hlist_node *old,
+     struct hlist_node *new)
+{
+ struct hlist_node *next = old->next;
+
+ new->next = next;
+ do { do { extern void __compiletime_assert_128(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(new->pprev) == sizeof(char) || sizeof(new->pprev) == sizeof(short) || sizeof(new->pprev) == sizeof(int) || sizeof(new->pprev) == sizeof(long)) || sizeof(new->pprev) == sizeof(long long))) __compiletime_assert_128(); } while (0); do { *(volatile typeof(new->pprev) *)&(new->pprev) = (old->pprev); } while (0); } while (0);
+ do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_129(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((*(struct hlist_node **)new->pprev)) == sizeof(char) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(short) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(int) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long)) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long long))) __compiletime_assert_129(); } while (0); do { *(volatile typeof((*(struct hlist_node **)new->pprev)) *)&((*(struct hlist_node **)new->pprev)) = ((typeof(*(struct hlist_node **)new->pprev))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_130(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)))) __compiletime_assert_130(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_131(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long long))) __compiletime_assert_131(); } while (0); do { *(volatile typeof(*&*(struct hlist_node **)new->pprev) *)&(*&*(struct hlist_node **)new->pprev) = ((typeof(*((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) *)((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+ if (next)
+  do { do { extern void __compiletime_assert_132(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(new->next->pprev) == sizeof(char) || sizeof(new->next->pprev) == sizeof(short) || sizeof(new->next->pprev) == sizeof(int) || sizeof(new->next->pprev) == sizeof(long)) || sizeof(new->next->pprev) == sizeof(long long))) __compiletime_assert_132(); } while (0); do { *(volatile typeof(new->next->pprev) *)&(new->next->pprev) = (&new->next); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_133(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(old->pprev) == sizeof(char) || sizeof(old->pprev) == sizeof(short) || sizeof(old->pprev) == sizeof(int) || sizeof(old->pprev) == sizeof(long)) || sizeof(old->pprev) == sizeof(long long))) __compiletime_assert_133(); } while (0); do { *(volatile typeof(old->pprev) *)&(old->pprev) = (((void *) 0x122 + (0xdead000000000000UL))); } while (0); } while (0);
+}
+# 548 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlists_swap_heads_rcu(struct hlist_head *left, struct hlist_head *right)
+{
+ struct hlist_node *node1 = left->first;
+ struct hlist_node *node2 = right->first;
+
+ do { uintptr_t _r_a_p__v = (uintptr_t)(node2); ; if (__builtin_constant_p(node2) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_134(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((left->first)) == sizeof(char) || sizeof((left->first)) == sizeof(short) || sizeof((left->first)) == sizeof(int) || sizeof((left->first)) == sizeof(long)) || sizeof((left->first)) == sizeof(long long))) __compiletime_assert_134(); } while (0); do { *(volatile typeof((left->first)) *)&((left->first)) = ((typeof(left->first))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_135(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&left->first) == sizeof(char) || sizeof(*&left->first) == sizeof(short) || sizeof(*&left->first) == sizeof(int) || sizeof(*&left->first) == sizeof(long)))) __compiletime_assert_135(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_136(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&left->first) == sizeof(char) || sizeof(*&left->first) == sizeof(short) || sizeof(*&left->first) == sizeof(int) || sizeof(*&left->first) == sizeof(long)) || sizeof(*&left->first) == sizeof(long long))) __compiletime_assert_136(); } while (0); do { *(volatile typeof(*&left->first) *)&(*&left->first) = ((typeof(*((typeof(left->first))_r_a_p__v)) *)((typeof(left->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+ do { uintptr_t _r_a_p__v = (uintptr_t)(node1); ; if (__builtin_constant_p(node1) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_137(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((right->first)) == sizeof(char) || sizeof((right->first)) == sizeof(short) || sizeof((right->first)) == sizeof(int) || sizeof((right->first)) == sizeof(long)) || sizeof((right->first)) == sizeof(long long))) __compiletime_assert_137(); } while (0); do { *(volatile typeof((right->first)) *)&((right->first)) = ((typeof(right->first))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_138(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&right->first) == sizeof(char) || sizeof(*&right->first) == sizeof(short) || sizeof(*&right->first) == sizeof(int) || sizeof(*&right->first) == sizeof(long)))) __compiletime_assert_138(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_139(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&right->first) == sizeof(char) || sizeof(*&right->first) == sizeof(short) || sizeof(*&right->first) == sizeof(int) || sizeof(*&right->first) == sizeof(long)) || sizeof(*&right->first) == sizeof(long long))) __compiletime_assert_139(); } while (0); do { *(volatile typeof(*&right->first) *)&(*&right->first) = ((typeof(*((typeof(right->first))_r_a_p__v)) *)((typeof(right->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_140(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node2->pprev) == sizeof(char) || sizeof(node2->pprev) == sizeof(short) || sizeof(node2->pprev) == sizeof(int) || sizeof(node2->pprev) == sizeof(long)) || sizeof(node2->pprev) == sizeof(long long))) __compiletime_assert_140(); } while (0); do { *(volatile typeof(node2->pprev) *)&(node2->pprev) = (&left->first); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_141(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node1->pprev) == sizeof(char) || sizeof(node1->pprev) == sizeof(short) || sizeof(node1->pprev) == sizeof(int) || sizeof(node1->pprev) == sizeof(long)) || sizeof(node1->pprev) == sizeof(long long))) __compiletime_assert_141(); } while (0); do { *(volatile typeof(node1->pprev) *)&(node1->pprev) = (&right->first); } while (0); } while (0);
+}
+# 585 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_head_rcu(struct hlist_node *n,
+     struct hlist_head *h)
+{
+ struct hlist_node *first = h->first;
+
+ n->next = first;
+ do { do { extern void __compiletime_assert_142(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_142(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
+ do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_143(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long long))) __compiletime_assert_143(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(h)->first))))) *)&(((*((struct hlist_node **)(&(h)->first))))) = ((typeof((*((struct hlist_node **)(&(h)->first)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_144(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)))) __compiletime_assert_144(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_145(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long long))) __compiletime_assert_145(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(h)->first)))) *)&(*&(*((struct hlist_node **)(&(h)->first)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+ if (first)
+  do { do { extern void __compiletime_assert_146(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_146(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
+}
+# 616 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_tail_rcu(struct hlist_node *n,
+          struct hlist_head *h)
+{
+ struct hlist_node *i, *last = ((void *)0);
+
+
+ for (i = h->first; i; i = i->next)
+  last = i;
+
+ if (last) {
+  n->next = last->next;
+  do { do { extern void __compiletime_assert_147(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_147(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&last->next); } while (0); } while (0);
+  do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_148(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long long))) __compiletime_assert_148(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(last)->next))))) *)&(((*((struct hlist_node **)(&(last)->next))))) = ((typeof((*((struct hlist_node **)(&(last)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_149(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)))) __compiletime_assert_149(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_150(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long long))) __compiletime_assert_150(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(last)->next)))) *)&(*&(*((struct hlist_node **)(&(last)->next)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+ } else {
+  hlist_add_head_rcu(n, h);
+ }
+}
+# 652 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_before_rcu(struct hlist_node *n,
+     struct hlist_node *next)
+{
+ do { do { extern void __compiletime_assert_151(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_151(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
+ n->next = next;
+ do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_152(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(char) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(short) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(int) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long long))) __compiletime_assert_152(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)((n)->pprev))))) *)&(((*((struct hlist_node **)((n)->pprev))))) = ((typeof((*((struct hlist_node **)((n)->pprev)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_153(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)))) __compiletime_assert_153(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_154(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long long))) __compiletime_assert_154(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)((n)->pprev)))) *)&(*&(*((struct hlist_node **)((n)->pprev)))) = ((typeof(*((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+ do { do { extern void __compiletime_assert_155(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_155(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
+}
+# 679 "./include/linux/rculist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_add_behind_rcu(struct hlist_node *n,
+     struct hlist_node *prev)
+{
+ n->next = prev->next;
+ do { do { extern void __compiletime_assert_156(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_156(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);
+ do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_157(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_157(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(prev)->next))))) *)&(((*((struct hlist_node **)(&(prev)->next))))) = ((typeof((*((struct hlist_node **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_158(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_158(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_159(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_159(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(prev)->next)))) *)&(*&(*((struct hlist_node **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+ if (n->next)
+  do { do { extern void __compiletime_assert_160(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_160(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
+}
+# 6 "./include/linux/pid.h" 2
+
+
+
+enum pid_type
+{
+ PIDTYPE_PID,
+ PIDTYPE_TGID,
+ PIDTYPE_PGID,
+ PIDTYPE_SID,
+ PIDTYPE_MAX,
+};
+# 54 "./include/linux/pid.h"
+struct upid {
+ int nr;
+ struct pid_namespace *ns;
+};
+
+struct pid
+{
+ refcount_t count;
+ unsigned int level;
+ spinlock_t lock;
+
+ struct hlist_head tasks[PIDTYPE_MAX];
+ struct hlist_head inodes;
+
+ wait_queue_head_t wait_pidfd;
+ struct callback_head rcu;
+ struct upid numbers[1];
+};
+
+extern struct pid init_struct_pid;
+
+extern const struct file_operations pidfd_fops;
+
+struct file;
+
+extern struct pid *pidfd_pid(const struct file *file);
+struct pid *pidfd_get_pid(unsigned int fd, unsigned int *flags);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid *get_pid(struct pid *pid)
+{
+ if (pid)
+  refcount_inc(&pid->count);
+ return pid;
+}
+
+extern void put_pid(struct pid *pid);
+extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pid_has_task(struct pid *pid, enum pid_type type)
+{
+ return !hlist_empty(&pid->tasks[type]);
+}
+extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);
+
+extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);
+
+
+
+
+extern void attach_pid(struct task_struct *task, enum pid_type);
+extern void detach_pid(struct task_struct *task, enum pid_type);
+extern void change_pid(struct task_struct *task, enum pid_type,
+   struct pid *pid);
+extern void exchange_tids(struct task_struct *task, struct task_struct *old);
+extern void transfer_pid(struct task_struct *old, struct task_struct *new,
+    enum pid_type);
+
+struct pid_namespace;
+extern struct pid_namespace init_pid_ns;
+
+extern int pid_max;
+extern int pid_max_min, pid_max_max;
+# 125 "./include/linux/pid.h"
+extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
+extern struct pid *find_vpid(int nr);
+
+
+
+
+extern struct pid *find_get_pid(int nr);
+extern struct pid *find_ge_pid(int nr, struct pid_namespace *);
+
+extern struct pid *alloc_pid(struct pid_namespace *ns, pid_t *set_tid,
+        size_t set_tid_size);
+extern void free_pid(struct pid *pid);
+extern void disable_pid_allocation(struct pid_namespace *ns);
+# 149 "./include/linux/pid.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid_namespace *ns_of_pid(struct pid *pid)
+{
+ struct pid_namespace *ns = ((void *)0);
+ if (pid)
+  ns = pid->numbers[pid->level].ns;
+ return ns;
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_child_reaper(struct pid *pid)
+{
+ return pid->numbers[pid->level].nr == 1;
+}
+# 179 "./include/linux/pid.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t pid_nr(struct pid *pid)
+{
+ pid_t nr = 0;
+ if (pid)
+  nr = pid->numbers[0].nr;
+ return nr;
+}
+
+pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
+pid_t pid_vnr(struct pid *pid);
+# 15 "./include/linux/sched.h" 2
+# 1 "./include/linux/sem.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/sem.h" 1
+
+
+
+
+# 1 "./include/linux/ipc.h" 1
+
+
+
+
+
+
+# 1 "./include/linux/rhashtable-types.h" 1
+# 17 "./include/linux/rhashtable-types.h"
+struct rhash_head {
+ struct rhash_head *next;
+};
+
+struct rhlist_head {
+ struct rhash_head rhead;
+ struct rhlist_head *next;
+};
+
+struct bucket_table;
+
+
+
+
+
+
+struct rhashtable_compare_arg {
+ struct rhashtable *ht;
+ const void *key;
+};
+
+typedef u32 (*rht_hashfn_t)(const void *data, u32 len, u32 seed);
+typedef u32 (*rht_obj_hashfn_t)(const void *data, u32 len, u32 seed);
+typedef int (*rht_obj_cmpfn_t)(struct rhashtable_compare_arg *arg,
+          const void *obj);
+# 56 "./include/linux/rhashtable-types.h"
+struct rhashtable_params {
+ u16 nelem_hint;
+ u16 key_len;
+ u16 key_offset;
+ u16 head_offset;
+ unsigned int max_size;
+ u16 min_size;
+ bool automatic_shrinking;
+ rht_hashfn_t hashfn;
+ rht_obj_hashfn_t obj_hashfn;
+ rht_obj_cmpfn_t obj_cmpfn;
+};
+# 81 "./include/linux/rhashtable-types.h"
+struct rhashtable {
+ struct bucket_table *tbl;
+ unsigned int key_len;
+ unsigned int max_elems;
+ struct rhashtable_params p;
+ bool rhlist;
+ struct work_struct run_work;
+ struct mutex mutex;
+ spinlock_t lock;
+ atomic_t nelems;
+};
+
+
+
+
+
+struct rhltable {
+ struct rhashtable ht;
+};
+
+
+
+
+
+
+struct rhashtable_walker {
+ struct list_head list;
+ struct bucket_table *tbl;
+};
+# 120 "./include/linux/rhashtable-types.h"
+struct rhashtable_iter {
+ struct rhashtable *ht;
+ struct rhash_head *p;
+ struct rhlist_head *list;
+ struct rhashtable_walker walker;
+ unsigned int slot;
+ unsigned int skip;
+ bool end_of_table;
+};
+
+int rhashtable_init(struct rhashtable *ht,
+      const struct rhashtable_params *params);
+int rhltable_init(struct rhltable *hlt,
+    const struct rhashtable_params *params);
+# 8 "./include/linux/ipc.h" 2
+# 1 "./include/uapi/linux/ipc.h" 1
+# 10 "./include/uapi/linux/ipc.h"
+struct ipc_perm
+{
+ __kernel_key_t key;
+ __kernel_uid_t uid;
+ __kernel_gid_t gid;
+ __kernel_uid_t cuid;
+ __kernel_gid_t cgid;
+ __kernel_mode_t mode;
+ unsigned short seq;
+};
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/ipcbuf.h" 1
+# 1 "./include/uapi/asm-generic/ipcbuf.h" 1
+# 22 "./include/uapi/asm-generic/ipcbuf.h"
+struct ipc64_perm {
+ __kernel_key_t key;
+ __kernel_uid32_t uid;
+ __kernel_gid32_t gid;
+ __kernel_uid32_t cuid;
+ __kernel_gid32_t cgid;
+ __kernel_mode_t mode;
+
+ unsigned char __pad1[4 - sizeof(__kernel_mode_t)];
+ unsigned short seq;
+ unsigned short __pad2;
+ __kernel_ulong_t __unused1;
+ __kernel_ulong_t __unused2;
+};
+# 2 "./arch/x86/include/generated/uapi/asm/ipcbuf.h" 2
+# 23 "./include/uapi/linux/ipc.h" 2
+# 58 "./include/uapi/linux/ipc.h"
+struct ipc_kludge {
+ struct msgbuf *msgp;
+ long msgtyp;
+};
+# 9 "./include/linux/ipc.h" 2
+
+
+
+struct kern_ipc_perm {
+ spinlock_t lock;
+ bool deleted;
+ int id;
+ key_t key;
+ kuid_t uid;
+ kgid_t gid;
+ kuid_t cuid;
+ kgid_t cgid;
+ umode_t mode;
+ unsigned long seq;
+ void *security;
+
+ struct rhash_head khtnode;
+
+ struct callback_head rcu;
+ refcount_t refcount;
+} __attribute__((__designated_init__));
+# 6 "./include/uapi/linux/sem.h" 2
+# 25 "./include/uapi/linux/sem.h"
+struct semid_ds {
+ struct ipc_perm sem_perm;
+ __kernel_old_time_t sem_otime;
+ __kernel_old_time_t sem_ctime;
+ struct sem *sem_base;
+ struct sem_queue *sem_pending;
+ struct sem_queue **sem_pending_last;
+ struct sem_undo *undo;
+ unsigned short sem_nsems;
+};
+
+
+# 1 "./arch/x86/include/uapi/asm/sembuf.h" 1
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/ipcbuf.h" 1
+# 6 "./arch/x86/include/uapi/asm/sembuf.h" 2
+# 18 "./arch/x86/include/uapi/asm/sembuf.h"
+struct semid64_ds {
+ struct ipc64_perm sem_perm;
+
+
+
+
+
+
+ __kernel_long_t sem_otime;
+ __kernel_ulong_t __unused1;
+ __kernel_long_t sem_ctime;
+ __kernel_ulong_t __unused2;
+
+ __kernel_ulong_t sem_nsems;
+ __kernel_ulong_t __unused3;
+ __kernel_ulong_t __unused4;
+};
+# 38 "./include/uapi/linux/sem.h" 2
+
+
+struct sembuf {
+ unsigned short sem_num;
+ short sem_op;
+ short sem_flg;
+};
+
+
+union semun {
+ int val;
+ struct semid_ds *buf;
+ unsigned short *array;
+ struct seminfo *__buf;
+ void *__pad;
+};
+
+struct seminfo {
+ int semmap;
+ int semmni;
+ int semmns;
+ int semmnu;
+ int semmsl;
+ int semopm;
+ int semume;
+ int semusz;
+ int semvmx;
+ int semaem;
+};
+# 6 "./include/linux/sem.h" 2
+
+struct task_struct;
+struct sem_undo_list;
+# 21 "./include/linux/sem.h"
+struct sysv_sem {
+
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int copy_semundo(unsigned long clone_flags, struct task_struct *tsk)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exit_sem(struct task_struct *tsk)
+{
+ return;
+}
+# 16 "./include/linux/sched.h" 2
+# 1 "./include/linux/shm.h" 1
+
+
+
+
+
+
+# 1 "./include/uapi/linux/shm.h" 1
+
+
+
+
+
+
+# 1 "./include/uapi/asm-generic/hugetlb_encode.h" 1
+# 8 "./include/uapi/linux/shm.h" 2
+# 28 "./include/uapi/linux/shm.h"
+struct shmid_ds {
+ struct ipc_perm shm_perm;
+ int shm_segsz;
+ __kernel_old_time_t shm_atime;
+ __kernel_old_time_t shm_dtime;
+ __kernel_old_time_t shm_ctime;
+ __kernel_ipc_pid_t shm_cpid;
+ __kernel_ipc_pid_t shm_lpid;
+ unsigned short shm_nattch;
+ unsigned short shm_unused;
+ void *shm_unused2;
+ void *shm_unused3;
+};
+
+
+# 1 "./arch/x86/include/uapi/asm/shmbuf.h" 1
+
+
+
+
+
+# 1 "./include/uapi/asm-generic/shmbuf.h" 1
+# 25 "./include/uapi/asm-generic/shmbuf.h"
+struct shmid64_ds {
+ struct ipc64_perm shm_perm;
+ size_t shm_segsz;
+
+ long shm_atime;
+ long shm_dtime;
+ long shm_ctime;
+# 40 "./include/uapi/asm-generic/shmbuf.h"
+ __kernel_pid_t shm_cpid;
+ __kernel_pid_t shm_lpid;
+ unsigned long shm_nattch;
+ unsigned long __unused4;
+ unsigned long __unused5;
+};
+
+struct shminfo64 {
+ unsigned long shmmax;
+ unsigned long shmmin;
+ unsigned long shmmni;
+ unsigned long shmseg;
+ unsigned long shmall;
+ unsigned long __unused1;
+ unsigned long __unused2;
+ unsigned long __unused3;
+ unsigned long __unused4;
+};
+# 7 "./arch/x86/include/uapi/asm/shmbuf.h" 2
+# 44 "./include/uapi/linux/shm.h" 2
+# 93 "./include/uapi/linux/shm.h"
+struct shminfo {
+ int shmmax;
+ int shmmin;
+ int shmmni;
+ int shmseg;
+ int shmall;
+};
+
+struct shm_info {
+ int used_ids;
+ __kernel_ulong_t shm_tot;
+ __kernel_ulong_t shm_rss;
+ __kernel_ulong_t shm_swp;
+ __kernel_ulong_t swap_attempts;
+ __kernel_ulong_t swap_successes;
+};
+# 8 "./include/linux/shm.h" 2
+# 1 "./arch/x86/include/asm/shmparam.h" 1
+# 9 "./include/linux/shm.h" 2
+
+struct file;
+# 23 "./include/linux/shm.h"
+struct sysv_shm {
+
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long do_shmat(int shmid, char *shmaddr,
+       int shmflg, unsigned long *addr,
+       unsigned long shmlba)
+{
+ return -38;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_file_shm_hugepages(struct file *file)
+{
+ return false;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exit_shm(struct task_struct *task)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void shm_init_task(struct task_struct *task)
+{
+}
+# 17 "./include/linux/sched.h" 2
+# 1 "./include/linux/kcov.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/kcov.h" 1
+# 11 "./include/uapi/linux/kcov.h"
+struct kcov_remote_arg {
+ __u32 trace_mode;
+ __u32 area_size;
+ __u32 num_handles;
+ __u64 __attribute__((aligned(8))) common_handle;
+ __u64 __attribute__((aligned(8))) handles[0];
+};
+# 26 "./include/uapi/linux/kcov.h"
+enum {
+# 35 "./include/uapi/linux/kcov.h"
+ KCOV_TRACE_PC = 0,
+
+ KCOV_TRACE_CMP = 1,
+};
+# 56 "./include/uapi/linux/kcov.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u64 kcov_remote_handle(__u64 subsys, __u64 inst)
+{
+ if (subsys & ~(0xffull << 56) || inst & ~(0xffffffffull))
+  return 0;
+ return subsys | inst;
+}
+# 6 "./include/linux/kcov.h" 2
+
+struct task_struct;
+# 76 "./include/linux/kcov.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcov_task_init(struct task_struct *t) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcov_task_exit(struct task_struct *t) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcov_prepare_switch(struct task_struct *t) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcov_finish_switch(struct task_struct *t) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcov_remote_start(u64 handle) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcov_remote_stop(void) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 kcov_common_handle(void)
+{
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcov_remote_start_common(u64 id) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcov_remote_start_usb(u64 id) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcov_remote_start_usb_softirq(u64 id) {}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcov_remote_stop_softirq(void) {}
+# 18 "./include/linux/sched.h" 2
+
+# 1 "./include/linux/plist.h" 1
+# 79 "./include/linux/plist.h"
+struct plist_head {
+ struct list_head node_list;
+};
+
+struct plist_node {
+ int prio;
+ struct list_head prio_list;
+ struct list_head node_list;
+};
+# 121 "./include/linux/plist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+plist_head_init(struct plist_head *head)
+{
+ INIT_LIST_HEAD(&head->node_list);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void plist_node_init(struct plist_node *node, int prio)
+{
+ node->prio = prio;
+ INIT_LIST_HEAD(&node->prio_list);
+ INIT_LIST_HEAD(&node->node_list);
+}
+
+extern void plist_add(struct plist_node *node, struct plist_head *head);
+extern void plist_del(struct plist_node *node, struct plist_head *head);
+
+extern void plist_requeue(struct plist_node *node, struct plist_head *head);
+# 210 "./include/linux/plist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int plist_head_empty(const struct plist_head *head)
+{
+ return list_empty(&head->node_list);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int plist_node_empty(const struct plist_node *node)
+{
+ return list_empty(&node->node_list);
+}
+# 280 "./include/linux/plist.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct plist_node *plist_first(const struct plist_head *head)
+{
+ return ({ void *__mptr = (void *)(head->node_list.next); do { extern void __compiletime_assert_161(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(void))))) __compiletime_assert_161(); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); })
+                                  ;
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct plist_node *plist_last(const struct plist_head *head)
+{
+ return ({ void *__mptr = (void *)(head->node_list.prev); do { extern void __compiletime_assert_162(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(void))))) __compiletime_assert_162(); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); })
+                                  ;
+}
+# 20 "./include/linux/sched.h" 2
+# 1 "./include/linux/hrtimer.h" 1
+# 15 "./include/linux/hrtimer.h"
+# 1 "./include/linux/hrtimer_defs.h" 1
+# 16 "./include/linux/hrtimer.h" 2
+
+
+
+
+
+
+# 1 "./include/linux/timerqueue.h" 1
+# 9 "./include/linux/timerqueue.h"
+struct timerqueue_node {
+ struct rb_node node;
+ ktime_t expires;
+};
+
+struct timerqueue_head {
+ struct rb_root_cached rb_root;
+};
+
+
+extern bool timerqueue_add(struct timerqueue_head *head,
+      struct timerqueue_node *node);
+extern bool timerqueue_del(struct timerqueue_head *head,
+      struct timerqueue_node *node);
+extern struct timerqueue_node *timerqueue_iterate_next(
+      struct timerqueue_node *node);
+# 33 "./include/linux/timerqueue.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
+struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
+{
+ struct rb_node *leftmost = (&head->rb_root)->rb_leftmost;
+
+ return ({ void *__mptr = (void *)(leftmost); do { extern void __compiletime_assert_163(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(leftmost)), typeof(((struct timerqueue_node *)0)->node)) && !__builtin_types_compatible_p(typeof(*(leftmost)), typeof(void))))) __compiletime_assert_163(); } while (0); ((struct timerqueue_node *)(__mptr - __builtin_offsetof(struct timerqueue_node, node))); });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void timerqueue_init(struct timerqueue_node *node)
+{
+ ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool timerqueue_node_queued(struct timerqueue_node *node)
+{
+ return !((&node->node)->__rb_parent_color == (unsigned long)(&node->node));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool timerqueue_node_expires(struct timerqueue_node *node)
+{
+ return node->expires;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void timerqueue_init_head(struct timerqueue_head *head)
+{
+ head->rb_root = (struct rb_root_cached) { {((void *)0), }, ((void *)0) };
+}
+# 23 "./include/linux/hrtimer.h" 2
+
+struct hrtimer_clock_base;
+struct hrtimer_cpu_base;
+# 39 "./include/linux/hrtimer.h"
+enum hrtimer_mode {
+ HRTIMER_MODE_ABS = 0x00,
+ HRTIMER_MODE_REL = 0x01,
+ HRTIMER_MODE_PINNED = 0x02,
+ HRTIMER_MODE_SOFT = 0x04,
+ HRTIMER_MODE_HARD = 0x08,
+
+ HRTIMER_MODE_ABS_PINNED = HRTIMER_MODE_ABS | HRTIMER_MODE_PINNED,
+ HRTIMER_MODE_REL_PINNED = HRTIMER_MODE_REL | HRTIMER_MODE_PINNED,
+
+ HRTIMER_MODE_ABS_SOFT = HRTIMER_MODE_ABS | HRTIMER_MODE_SOFT,
+ HRTIMER_MODE_REL_SOFT = HRTIMER_MODE_REL | HRTIMER_MODE_SOFT,
+
+ HRTIMER_MODE_ABS_PINNED_SOFT = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_SOFT,
+ HRTIMER_MODE_REL_PINNED_SOFT = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_SOFT,
+
+ HRTIMER_MODE_ABS_HARD = HRTIMER_MODE_ABS | HRTIMER_MODE_HARD,
+ HRTIMER_MODE_REL_HARD = HRTIMER_MODE_REL | HRTIMER_MODE_HARD,
+
+ HRTIMER_MODE_ABS_PINNED_HARD = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_HARD,
+ HRTIMER_MODE_REL_PINNED_HARD = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_HARD,
+};
+
+
+
+
+enum hrtimer_restart {
+ HRTIMER_NORESTART,
+ HRTIMER_RESTART,
+};
+# 118 "./include/linux/hrtimer.h"
+struct hrtimer {
+ struct timerqueue_node node;
+ ktime_t _softexpires;
+ enum hrtimer_restart (*function)(struct hrtimer *);
+ struct hrtimer_clock_base *base;
+ u8 state;
+ u8 is_rel;
+ u8 is_soft;
+ u8 is_hard;
+};
+# 136 "./include/linux/hrtimer.h"
+struct hrtimer_sleeper {
+ struct hrtimer timer;
+ struct task_struct *task;
+};
+# 159 "./include/linux/hrtimer.h"
+struct hrtimer_clock_base {
+ struct hrtimer_cpu_base *cpu_base;
+ unsigned int index;
+ clockid_t clockid;
+ seqcount_raw_spinlock_t seq;
+ struct hrtimer *running;
+ struct timerqueue_head active;
+ ktime_t (*get_time)(void);
+ ktime_t offset;
+} __attribute__((__aligned__((1 << (6)))));
+
+enum hrtimer_base_type {
+ HRTIMER_BASE_MONOTONIC,
+ HRTIMER_BASE_REALTIME,
+ HRTIMER_BASE_BOOTTIME,
+ HRTIMER_BASE_TAI,
+ HRTIMER_BASE_MONOTONIC_SOFT,
+ HRTIMER_BASE_REALTIME_SOFT,
+ HRTIMER_BASE_BOOTTIME_SOFT,
+ HRTIMER_BASE_TAI_SOFT,
+ HRTIMER_MAX_CLOCK_BASES,
+};
+# 214 "./include/linux/hrtimer.h"
+struct hrtimer_cpu_base {
+ raw_spinlock_t lock;
+ unsigned int cpu;
+ unsigned int active_bases;
+ unsigned int clock_was_set_seq;
+ unsigned int hres_active : 1,
+     in_hrtirq : 1,
+     hang_detected : 1,
+     softirq_activated : 1;
+# 233 "./include/linux/hrtimer.h"
+ ktime_t expires_next;
+ struct hrtimer *next_timer;
+ ktime_t softirq_expires_next;
+ struct hrtimer *softirq_next_timer;
+ struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];
+} __attribute__((__aligned__((1 << (6)))));
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
+{
+ timer->node.expires = time;
+ timer->_softexpires = time;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
+{
+ timer->_softexpires = time;
+ timer->node.expires = ktime_add_safe(time, delta);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
+{
+ timer->_softexpires = time;
+ timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
+{
+ timer->node.expires = tv64;
+ timer->_softexpires = tv64;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
+{
+ timer->node.expires = ktime_add_safe(timer->node.expires, time);
+ timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
+{
+ timer->node.expires = ((timer->node.expires) + (ns));
+ timer->_softexpires = ((timer->_softexpires) + (ns));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_expires(const struct hrtimer *timer)
+{
+ return timer->node.expires;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
+{
+ return timer->_softexpires;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
+{
+ return timer->node.expires;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
+{
+ return timer->_softexpires;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
+{
+ return ktime_to_ns(timer->node.expires);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
+{
+ return ((timer->node.expires) - (timer->base->get_time()));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
+{
+ return timer->base->get_time();
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hrtimer_is_hres_active(struct hrtimer *timer)
+{
+ return 0 ?
+  timer->base->cpu_base->hres_active : 0;
+}
+# 329 "./include/linux/hrtimer.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clock_was_set_delayed(void) { }
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t
+__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
+{
+ ktime_t rem = ((timer->node.expires) - (now));
+
+
+
+
+
+ if (0 && timer->is_rel)
+  rem -= (unsigned int)((1000000000L +250/2)/250);
+ return rem;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t
+hrtimer_expires_remaining_adjusted(const struct hrtimer *timer)
+{
+ return __hrtimer_expires_remaining_adjusted(timer,
+          timer->base->get_time());
+}
+
+extern void clock_was_set(void);
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void timerfd_clock_was_set(void) { }
+
+extern void hrtimers_resume(void);
+
+extern __attribute__((section(".data" ""))) __typeof__(struct tick_device) tick_cpu_device;
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_cancel_wait_running(struct hrtimer *timer)
+{
+ cpu_relax();
+}
+
+
+
+
+
+extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
+    enum hrtimer_mode mode);
+extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl, clockid_t clock_id,
+     enum hrtimer_mode mode);
+
+
+extern void hrtimer_init_on_stack(struct hrtimer *timer, clockid_t which_clock,
+      enum hrtimer_mode mode);
+extern void hrtimer_init_sleeper_on_stack(struct hrtimer_sleeper *sl,
+       clockid_t clock_id,
+       enum hrtimer_mode mode);
+
+extern void destroy_hrtimer_on_stack(struct hrtimer *timer);
+# 408 "./include/linux/hrtimer.h"
+extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
+       u64 range_ns, const enum hrtimer_mode mode);
+# 419 "./include/linux/hrtimer.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_start(struct hrtimer *timer, ktime_t tim,
+     const enum hrtimer_mode mode)
+{
+ hrtimer_start_range_ns(timer, tim, 0, mode);
+}
+
+extern int hrtimer_cancel(struct hrtimer *timer);
+extern int hrtimer_try_to_cancel(struct hrtimer *timer);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_start_expires(struct hrtimer *timer,
+      enum hrtimer_mode mode)
+{
+ u64 delta;
+ ktime_t soft, hard;
+ soft = hrtimer_get_softexpires(timer);
+ hard = hrtimer_get_expires(timer);
+ delta = ktime_to_ns(((hard) - (soft)));
+ hrtimer_start_range_ns(timer, soft, delta, mode);
+}
+
+void hrtimer_sleeper_start_expires(struct hrtimer_sleeper *sl,
+       enum hrtimer_mode mode);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hrtimer_restart(struct hrtimer *timer)
+{
+ hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
+}
+
+
+extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
+{
+ return __hrtimer_get_remaining(timer, false);
+}
+
+extern u64 hrtimer_get_next_event(void);
+extern u64 hrtimer_next_event_without(const struct hrtimer *exclude);
+
+extern bool hrtimer_active(const struct hrtimer *timer);
+# 472 "./include/linux/hrtimer.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hrtimer_is_queued(struct hrtimer *timer)
+{
+
+ return !!(({ do { extern void __compiletime_assert_164(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(timer->state) == sizeof(char) || sizeof(timer->state) == sizeof(short) || sizeof(timer->state) == sizeof(int) || sizeof(timer->state) == sizeof(long)) || sizeof(timer->state) == sizeof(long long))) __compiletime_assert_164(); } while (0); (*(const volatile typeof( _Generic((timer->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (timer->state))) *)&(timer->state)); }) & 0x01);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int hrtimer_callback_running(struct hrtimer *timer)
+{
+ return timer->base->running == timer;
+}
+
+
+extern u64
+hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
+# 507 "./include/linux/hrtimer.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 hrtimer_forward_now(struct hrtimer *timer,
+          ktime_t interval)
+{
+ return hrtimer_forward(timer, timer->base->get_time(), interval);
+}
+
+
+
+extern int nanosleep_copyout(struct restart_block *, struct timespec64 *);
+extern long hrtimer_nanosleep(ktime_t rqtp, const enum hrtimer_mode mode,
+         const clockid_t clockid);
+
+extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
+        const enum hrtimer_mode mode);
+extern int schedule_hrtimeout_range_clock(ktime_t *expires,
+       u64 delta,
+       const enum hrtimer_mode mode,
+       clockid_t clock_id);
+extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);
+
+
+extern void hrtimer_run_queues(void);
+
+
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) hrtimers_init(void);
+
+
+extern void sysrq_timer_list_show(void);
+
+int hrtimers_prepare_cpu(unsigned int cpu);
+# 21 "./include/linux/sched.h" 2
+
+# 1 "./include/linux/seccomp.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/seccomp.h" 1
+# 60 "./include/uapi/linux/seccomp.h"
+struct seccomp_data {
+ int nr;
+ __u32 arch;
+ __u64 instruction_pointer;
+ __u64 args[6];
+};
+
+struct seccomp_notif_sizes {
+ __u16 seccomp_notif;
+ __u16 seccomp_notif_resp;
+ __u16 seccomp_data;
+};
+
+struct seccomp_notif {
+ __u64 id;
+ __u32 pid;
+ __u32 flags;
+ struct seccomp_data data;
+};
+# 109 "./include/uapi/linux/seccomp.h"
+struct seccomp_notif_resp {
+ __u64 id;
+ __s64 val;
+ __s32 error;
+ __u32 flags;
+};
+# 127 "./include/uapi/linux/seccomp.h"
+struct seccomp_notif_addfd {
+ __u64 id;
+ __u32 flags;
+ __u32 srcfd;
+ __u32 newfd;
+ __u32 newfd_flags;
+};
+# 6 "./include/linux/seccomp.h" 2
+# 65 "./include/linux/seccomp.h"
+struct seccomp { };
+struct seccomp_filter { };
+struct seccomp_data;
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int secure_computing(void) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __secure_computing(const struct seccomp_data *sd) { return 0; }
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long prctl_get_seccomp(void)
+{
+ return -22;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long prctl_set_seccomp(unsigned long arg2, char *arg3)
+{
+ return -22;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int seccomp_mode(struct seccomp *s)
+{
+ return 0;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void seccomp_filter_release(struct task_struct *tsk)
+{
+ return;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void get_seccomp_filter(struct task_struct *tsk)
+{
+ return;
+}
+# 112 "./include/linux/seccomp.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long seccomp_get_filter(struct task_struct *task,
+          unsigned long n, void *data)
+{
+ return -22;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long seccomp_get_metadata(struct task_struct *task,
+     unsigned long filter_off,
+     void *data)
+{
+ return -22;
+}
+# 23 "./include/linux/sched.h" 2
+
+
+
+# 1 "./include/linux/resource.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/resource.h" 1
+# 24 "./include/uapi/linux/resource.h"
+struct rusage {
+ struct __kernel_old_timeval ru_utime;
+ struct __kernel_old_timeval ru_stime;
+ __kernel_long_t ru_maxrss;
+ __kernel_long_t ru_ixrss;
+ __kernel_long_t ru_idrss;
+ __kernel_long_t ru_isrss;
+ __kernel_long_t ru_minflt;
+ __kernel_long_t ru_majflt;
+ __kernel_long_t ru_nswap;
+ __kernel_long_t ru_inblock;
+ __kernel_long_t ru_oublock;
+ __kernel_long_t ru_msgsnd;
+ __kernel_long_t ru_msgrcv;
+ __kernel_long_t ru_nsignals;
+ __kernel_long_t ru_nvcsw;
+ __kernel_long_t ru_nivcsw;
+};
+
+struct rlimit {
+ __kernel_ulong_t rlim_cur;
+ __kernel_ulong_t rlim_max;
+};
+
+
+
+struct rlimit64 {
+ __u64 rlim_cur;
+ __u64 rlim_max;
+};
+# 78 "./include/uapi/linux/resource.h"
+# 1 "./arch/x86/include/generated/uapi/asm/resource.h" 1
+# 1 "./include/asm-generic/resource.h" 1
+
+
+
+
+# 1 "./include/uapi/asm-generic/resource.h" 1
+# 6 "./include/asm-generic/resource.h" 2
+# 2 "./arch/x86/include/generated/uapi/asm/resource.h" 2
+# 79 "./include/uapi/linux/resource.h" 2
+# 6 "./include/linux/resource.h" 2
+
+
+struct task_struct;
+
+void getrusage(struct task_struct *p, int who, struct rusage *ru);
+int do_prlimit(struct task_struct *tsk, unsigned int resource,
+  struct rlimit *new_rlim, struct rlimit *old_rlim);
+# 27 "./include/linux/sched.h" 2
+# 1 "./include/linux/latencytop.h" 1
+# 14 "./include/linux/latencytop.h"
+struct task_struct;
+# 46 "./include/linux/latencytop.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+account_scheduler_latency(struct task_struct *task, int usecs, int inter)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_tsk_latency_tracing(struct task_struct *p)
+{
+}
+# 28 "./include/linux/sched.h" 2
+# 1 "./include/linux/sched/prio.h" 1
+# 32 "./include/linux/sched/prio.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long nice_to_rlimit(long nice)
+{
+ return (19 - nice + 1);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) long rlimit_to_nice(long prio)
+{
+ return (19 - prio + 1);
+}
+# 29 "./include/linux/sched.h" 2
+# 1 "./include/linux/sched/types.h" 1
+# 17 "./include/linux/sched/types.h"
+struct task_cputime {
+ u64 stime;
+ u64 utime;
+ unsigned long long sum_exec_runtime;
+};
+# 30 "./include/linux/sched.h" 2
+# 1 "./include/linux/signal_types.h" 1
+# 10 "./include/linux/signal_types.h"
+# 1 "./include/uapi/linux/signal.h" 1
+
+
+
+
+# 1 "./arch/x86/include/asm/signal.h" 1
+# 21 "./arch/x86/include/asm/signal.h"
+typedef unsigned long old_sigset_t;
+
+typedef struct {
+ unsigned long sig[(64 / 64)];
+} sigset_t;
+
+
+
+
+
+
+typedef sigset_t compat_sigset_t;
+
+
+
+# 1 "./arch/x86/include/uapi/asm/signal.h" 1
+# 11 "./arch/x86/include/uapi/asm/signal.h"
+struct siginfo;
+# 70 "./arch/x86/include/uapi/asm/signal.h"
+# 1 "./include/uapi/asm-generic/signal-defs.h" 1
+# 81 "./include/uapi/asm-generic/signal-defs.h"
+typedef void __signalfn_t(int);
+typedef __signalfn_t *__sighandler_t;
+
+typedef void __restorefn_t(void);
+typedef __restorefn_t *__sigrestore_t;
+# 71 "./arch/x86/include/uapi/asm/signal.h" 2
+# 104 "./arch/x86/include/uapi/asm/signal.h"
+typedef struct sigaltstack {
+ void *ss_sp;
+ int ss_flags;
+ size_t ss_size;
+} stack_t;
+# 37 "./arch/x86/include/asm/signal.h" 2
+# 6 "./include/uapi/linux/signal.h" 2
+# 1 "./arch/x86/include/uapi/asm/siginfo.h" 1
+# 13 "./arch/x86/include/uapi/asm/siginfo.h"
+# 1 "./include/uapi/asm-generic/siginfo.h" 1
+
+
+
+
+
+
+
+typedef union sigval {
+ int sival_int;
+ void *sival_ptr;
+} sigval_t;
+# 32 "./include/uapi/asm-generic/siginfo.h"
+union __sifields {
+
+ struct {
+  __kernel_pid_t _pid;
+  __kernel_uid32_t _uid;
+ } _kill;
+
+
+ struct {
+  __kernel_timer_t _tid;
+  int _overrun;
+  sigval_t _sigval;
+  int _sys_private;
+ } _timer;
+
+
+ struct {
+  __kernel_pid_t _pid;
+  __kernel_uid32_t _uid;
+  sigval_t _sigval;
+ } _rt;
+
+
+ struct {
+  __kernel_pid_t _pid;
+  __kernel_uid32_t _uid;
+  int _status;
+  __kernel_clock_t _utime;
+  __kernel_clock_t _stime;
+ } _sigchld;
+
+
+ struct {
+  void *_addr;
+# 77 "./include/uapi/asm-generic/siginfo.h"
+  union {
+
+
+
+
+   short _addr_lsb;
+
+   struct {
+    char _dummy_bnd[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
+    void *_lower;
+    void *_upper;
+   } _addr_bnd;
+
+   struct {
+    char _dummy_pkey[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
+    __u32 _pkey;
+   } _addr_pkey;
+  };
+ } _sigfault;
+
+
+ struct {
+  long _band;
+  int _fd;
+ } _sigpoll;
+
+
+ struct {
+  void *_call_addr;
+  int _syscall;
+  unsigned int _arch;
+ } _sigsys;
+};
+# 129 "./include/uapi/asm-generic/siginfo.h"
+typedef struct siginfo {
+ union {
+  struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
+  int _si_pad[128/sizeof(int)];
+ };
+} siginfo_t;
+# 323 "./include/uapi/asm-generic/siginfo.h"
+typedef struct sigevent {
+ sigval_t sigev_value;
+ int sigev_signo;
+ int sigev_notify;
+ union {
+  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
+   int _tid;
+
+  struct {
+   void (*_function)(sigval_t);
+   void *_attribute;
+  } _sigev_thread;
+ } _sigev_un;
+} sigevent_t;
+# 14 "./arch/x86/include/uapi/asm/siginfo.h" 2
+# 7 "./include/uapi/linux/signal.h" 2
+# 11 "./include/linux/signal_types.h" 2
+
+typedef struct kernel_siginfo {
+ struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
+} kernel_siginfo_t;
+
+
+
+
+
+struct sigqueue {
+ struct list_head list;
+ int flags;
+ kernel_siginfo_t info;
+ struct user_struct *user;
+};
+
+
+
+
+struct sigpending {
+ struct list_head list;
+ sigset_t signal;
+};
+
+struct sigaction {
+
+ __sighandler_t sa_handler;
+ unsigned long sa_flags;
+
+
+
+
+
+ __sigrestore_t sa_restorer;
+
+ sigset_t sa_mask;
+};
+
+struct k_sigaction {
+ struct sigaction sa;
+
+
+
+};
+# 65 "./include/linux/signal_types.h"
+struct ksignal {
+ struct k_sigaction ka;
+ kernel_siginfo_t info;
+ int sig;
+};
+# 31 "./include/linux/sched.h" 2
+# 1 "./include/linux/syscall_user_dispatch.h" 1
+# 12 "./include/linux/syscall_user_dispatch.h"
+struct syscall_user_dispatch {
+ char *selector;
+ unsigned long offset;
+ unsigned long len;
+ bool on_dispatch;
+};
+
+int set_syscall_user_dispatch(unsigned long mode, unsigned long offset,
+         unsigned long len, char *selector);
+# 32 "./include/linux/sched.h" 2
+
+# 1 "./include/linux/task_io_accounting.h" 1
+# 12 "./include/linux/task_io_accounting.h"
+struct task_io_accounting {
+# 46 "./include/linux/task_io_accounting.h"
+};
+# 34 "./include/linux/sched.h" 2
+# 1 "./include/linux/posix-timers.h" 1
+
+
+
+
+
+
+# 1 "./include/linux/alarmtimer.h" 1
+# 9 "./include/linux/alarmtimer.h"
+struct rtc_device;
+
+enum alarmtimer_type {
+ ALARM_REALTIME,
+ ALARM_BOOTTIME,
+
+
+ ALARM_NUMTYPE,
+
+
+ ALARM_REALTIME_FREEZER,
+ ALARM_BOOTTIME_FREEZER,
+};
+
+enum alarmtimer_restart {
+ ALARMTIMER_NORESTART,
+ ALARMTIMER_RESTART,
+};
+# 42 "./include/linux/alarmtimer.h"
+struct alarm {
+ struct timerqueue_node node;
+ struct hrtimer timer;
+ enum alarmtimer_restart (*function)(struct alarm *, ktime_t now);
+ enum alarmtimer_type type;
+ int state;
+ void *data;
+};
+
+void alarm_init(struct alarm *alarm, enum alarmtimer_type type,
+  enum alarmtimer_restart (*function)(struct alarm *, ktime_t));
+void alarm_start(struct alarm *alarm, ktime_t start);
+void alarm_start_relative(struct alarm *alarm, ktime_t start);
+void alarm_restart(struct alarm *alarm);
+int alarm_try_to_cancel(struct alarm *alarm);
+int alarm_cancel(struct alarm *alarm);
+
+u64 alarm_forward(struct alarm *alarm, ktime_t now, ktime_t interval);
+u64 alarm_forward_now(struct alarm *alarm, ktime_t interval);
+ktime_t alarm_expires_remaining(const struct alarm *alarm);
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct rtc_device *alarmtimer_get_rtcdev(void) { return ((void *)0); }
+# 8 "./include/linux/posix-timers.h" 2
+
+# 1 "./include/linux/task_work.h" 1
+
+
+
+
+
+# 1 "./include/linux/sched.h" 1
+# 7 "./include/linux/task_work.h" 2
+
+typedef void (*task_work_func_t)(struct callback_head *);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+init_task_work(struct callback_head *twork, task_work_func_t func)
+{
+ twork->func = func;
+}
+
+enum task_work_notify_mode {
+ TWA_NONE,
+ TWA_RESUME,
+ TWA_SIGNAL,
+};
+
+int task_work_add(struct task_struct *task, struct callback_head *twork,
+   enum task_work_notify_mode mode);
+
+struct callback_head *task_work_cancel(struct task_struct *, task_work_func_t);
+void task_work_run(void);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exit_task_work(struct task_struct *task)
+{
+ task_work_run();
+}
+# 10 "./include/linux/posix-timers.h" 2
+
+struct kernel_siginfo;
+struct task_struct;
+# 39 "./include/linux/posix-timers.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) clockid_t make_process_cpuclock(const unsigned int pid,
+  const clockid_t clock)
+{
+ return ((~pid) << 3) | clock;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) clockid_t make_thread_cpuclock(const unsigned int tid,
+  const clockid_t clock)
+{
+ return make_process_cpuclock(tid, clock | 4);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) clockid_t fd_to_clockid(const int fd)
+{
+ return make_process_cpuclock((unsigned int) fd, 3);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int clockid_to_fd(const clockid_t clk)
+{
+ return ~(clk >> 3);
+}
+# 171 "./include/linux/posix-timers.h"
+struct posix_cputimers { };
+struct cpu_timer { };
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void posix_cputimers_init(struct posix_cputimers *pct) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void posix_cputimers_group_init(struct posix_cputimers *pct,
+           u64 cpu_limit) { }
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void posix_cputimers_init_work(void) { }
+# 210 "./include/linux/posix-timers.h"
+struct k_itimer {
+ struct list_head list;
+ struct hlist_node t_hash;
+ spinlock_t it_lock;
+ const struct k_clock *kclock;
+ clockid_t it_clock;
+ timer_t it_id;
+ int it_active;
+ s64 it_overrun;
+ s64 it_overrun_last;
+ int it_requeue_pending;
+ int it_sigev_notify;
+ ktime_t it_interval;
+ struct signal_struct *it_signal;
+ union {
+  struct pid *it_pid;
+  struct task_struct *it_process;
+ };
+ struct sigqueue *sigq;
+ union {
+  struct {
+   struct hrtimer timer;
+  } real;
+  struct cpu_timer cpu;
+  struct {
+   struct alarm alarmtimer;
+  } alarm;
+ } it;
+ struct callback_head rcu;
+};
+
+void run_posix_cpu_timers(void);
+void posix_cpu_timers_exit(struct task_struct *task);
+void posix_cpu_timers_exit_group(struct task_struct *task);
+void set_process_cpu_timer(struct task_struct *task, unsigned int clock_idx,
+      u64 *newval, u64 *oldval);
+
+void update_rlimit_cpu(struct task_struct *task, unsigned long rlim_new);
+
+void posixtimer_rearm(struct kernel_siginfo *info);
+# 35 "./include/linux/sched.h" 2
+# 1 "./include/uapi/linux/rseq.h" 1
+# 16 "./include/uapi/linux/rseq.h"
+enum rseq_cpu_id_state {
+ RSEQ_CPU_ID_UNINITIALIZED = -1,
+ RSEQ_CPU_ID_REGISTRATION_FAILED = -2,
+};
+
+enum rseq_flags {
+ RSEQ_FLAG_UNREGISTER = (1 << 0),
+};
+
+enum rseq_cs_flags_bit {
+ RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT = 0,
+ RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT = 1,
+ RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT = 2,
+};
+
+enum rseq_cs_flags {
+ RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT =
+  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT),
+ RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL =
+  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT),
+ RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE =
+  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT),
+};
+
+
+
+
+
+
+struct rseq_cs {
+
+ __u32 version;
+
+ __u32 flags;
+ __u64 start_ip;
+
+ __u64 post_commit_offset;
+ __u64 abort_ip;
+} __attribute__((aligned(4 * sizeof(__u64))));
+
+
+
+
+
+
+
+struct rseq {
+# 75 "./include/uapi/linux/rseq.h"
+ __u32 cpu_id_start;
+# 90 "./include/uapi/linux/rseq.h"
+ __u32 cpu_id;
+# 109 "./include/uapi/linux/rseq.h"
+ union {
+  __u64 ptr64;
+
+  __u64 ptr;
+# 124 "./include/uapi/linux/rseq.h"
+ } rseq_cs;
+# 144 "./include/uapi/linux/rseq.h"
+ __u32 flags;
+} __attribute__((aligned(4 * sizeof(__u64))));
+# 36 "./include/linux/sched.h" 2
+
+# 1 "./include/linux/kcsan.h" 1
+# 55 "./include/linux/kcsan.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kcsan_init(void) { }
+# 38 "./include/linux/sched.h" 2
+# 1 "./arch/x86/include/generated/asm/kmap_size.h" 1
+# 1 "./include/asm-generic/kmap_size.h" 1
+# 2 "./arch/x86/include/generated/asm/kmap_size.h" 2
+# 39 "./include/linux/sched.h" 2
+
+
+struct audit_context;
+struct backing_dev_info;
+struct bio_list;
+struct blk_plug;
+struct capture_control;
+struct cfs_rq;
+struct fs_struct;
+struct futex_pi_state;
+struct io_context;
+struct io_uring_task;
+struct mempolicy;
+struct nameidata;
+struct nsproxy;
+struct perf_event_context;
+struct pid_namespace;
+struct pipe_inode_info;
+struct rcu_node;
+struct reclaim_state;
+struct robust_list_head;
+struct root_domain;
+struct rq;
+struct sched_attr;
+struct sched_param;
+struct seq_file;
+struct sighand_struct;
+struct signal_struct;
+struct task_delay_info;
+struct task_group;
+# 217 "./include/linux/sched.h"
+extern void scheduler_tick(void);
+
+
+
+extern long schedule_timeout(long timeout);
+extern long schedule_timeout_interruptible(long timeout);
+extern long schedule_timeout_killable(long timeout);
+extern long schedule_timeout_uninterruptible(long timeout);
+extern long schedule_timeout_idle(long timeout);
+ void schedule(void);
+extern void schedule_preempt_disabled(void);
+ void preempt_schedule_irq(void);
+
+extern int __attribute__((__warn_unused_result__)) io_schedule_prepare(void);
+extern void io_schedule_finish(int token);
+extern long io_schedule_timeout(long timeout);
+extern void io_schedule(void);
+# 244 "./include/linux/sched.h"
+struct prev_cputime {
+
+ u64 utime;
+ u64 stime;
+ raw_spinlock_t lock;
+
+};
+
+enum vtime_state {
+
+ VTIME_INACTIVE = 0,
+
+ VTIME_IDLE,
+
+ VTIME_SYS,
+
+ VTIME_USER,
+
+ VTIME_GUEST,
+};
+
+struct vtime {
+ seqcount_t seqcount;
+ unsigned long long starttime;
+ enum vtime_state state;
+ unsigned int cpu;
+ u64 utime;
+ u64 stime;
+ u64 gtime;
+};
+
+
+
+
+
+
+
+enum uclamp_id {
+ UCLAMP_MIN = 0,
+ UCLAMP_MAX,
+ UCLAMP_CNT
+};
+
+
+
+
+
+
+struct sched_info {
+# 311 "./include/linux/sched.h"
+};
+# 327 "./include/linux/sched.h"
+struct load_weight {
+ unsigned long weight;
+ u32 inv_weight;
+};
+# 354 "./include/linux/sched.h"
+struct util_est {
+ unsigned int enqueued;
+ unsigned int ewma;
+
+} __attribute__((__aligned__(sizeof(u64))));
+# 405 "./include/linux/sched.h"
+struct sched_avg {
+ u64 last_update_time;
+ u64 load_sum;
+ u64 runnable_sum;
+ u32 util_sum;
+ u32 period_contrib;
+ unsigned long load_avg;
+ unsigned long runnable_avg;
+ unsigned long util_avg;
+ struct util_est util_est;
+} __attribute__((__aligned__((1 << (6)))));
+
+struct sched_statistics {
+# 451 "./include/linux/sched.h"
+};
+
+struct sched_entity {
+
+ struct load_weight load;
+ struct rb_node run_node;
+ struct list_head group_node;
+ unsigned int on_rq;
+
+ u64 exec_start;
+ u64 sum_exec_runtime;
+ u64 vruntime;
+ u64 prev_sum_exec_runtime;
+
+ u64 nr_migrations;
+
+ struct sched_statistics statistics;
+# 489 "./include/linux/sched.h"
+};
+
+struct sched_rt_entity {
+ struct list_head run_list;
+ unsigned long timeout;
+ unsigned long watchdog_stamp;
+ unsigned int time_slice;
+ unsigned short on_rq;
+ unsigned short on_list;
+
+ struct sched_rt_entity *back;
+
+
+
+
+
+
+
+} __attribute__((__designated_init__));
+
+struct sched_dl_entity {
+ struct rb_node rb_node;
+
+
+
+
+
+
+ u64 dl_runtime;
+ u64 dl_deadline;
+ u64 dl_period;
+ u64 dl_bw;
+ u64 dl_density;
+
+
+
+
+
+
+ s64 runtime;
+ u64 deadline;
+ unsigned int flags;
+# 556 "./include/linux/sched.h"
+ unsigned int dl_throttled : 1;
+ unsigned int dl_yielded : 1;
+ unsigned int dl_non_contending : 1;
+ unsigned int dl_overrun : 1;
+
+
+
+
+
+ struct hrtimer dl_timer;
+# 574 "./include/linux/sched.h"
+ struct hrtimer inactive_timer;
+# 584 "./include/linux/sched.h"
+};
+# 621 "./include/linux/sched.h"
+union rcu_special {
+ struct {
+  u8 blocked;
+  u8 need_qs;
+  u8 exp_hint;
+  u8 need_mb;
+ } b;
+ u32 s;
+};
+
+enum perf_event_task_context {
+ perf_invalid_context = -1,
+ perf_hw_context = 0,
+ perf_sw_context,
+ perf_nr_task_contexts,
+};
+
+struct wake_q_node {
+ struct wake_q_node *next;
+};
+
+struct kmap_ctrl {
+
+
+
+
+};
+
+struct task_struct {
+
+
+
+
+
+ struct thread_info thread_info;
+
+
+ volatile long state;
+
+
+
+
+
+
+
+ void *stack;
+ refcount_t usage;
+
+ unsigned int flags;
+ unsigned int ptrace;
+# 693 "./include/linux/sched.h"
+ int on_rq;
+
+ int prio;
+ int static_prio;
+ int normal_prio;
+ unsigned int rt_priority;
+
+ const struct sched_class *sched_class;
+ struct sched_entity se;
+ struct sched_rt_entity rt;
+
+
+
+ struct sched_dl_entity dl;
+# 730 "./include/linux/sched.h"
+ unsigned int policy;
+ int nr_cpus_allowed;
+ const cpumask_t *cpus_ptr;
+ cpumask_t cpus_mask;
+ void *migration_pending;
+
+
+
+ unsigned short migration_flags;
+# 763 "./include/linux/sched.h"
+ struct sched_info sched_info;
+
+ struct list_head tasks;
+
+
+
+
+
+ struct mm_struct *mm;
+ struct mm_struct *active_mm;
+
+
+ struct vmacache vmacache;
+
+
+
+
+ int exit_state;
+ int exit_code;
+ int exit_signal;
+
+ int pdeath_signal;
+
+ unsigned long jobctl;
+
+
+ unsigned int personality;
+
+
+ unsigned sched_reset_on_fork:1;
+ unsigned sched_contributes_to_load:1;
+ unsigned sched_migrated:1;
+
+
+
+
+
+ unsigned :0;
+# 817 "./include/linux/sched.h"
+ unsigned sched_remote_wakeup:1;
+
+
+ unsigned in_execve:1;
+ unsigned in_iowait:1;
+
+ unsigned restore_sigmask:1;
+# 845 "./include/linux/sched.h"
+ unsigned long atomic_flags;
+
+ struct restart_block restart_block;
+
+ pid_t pid;
+ pid_t tgid;
+# 863 "./include/linux/sched.h"
+ struct task_struct *real_parent;
+
+
+ struct task_struct *parent;
+
+
+
+
+ struct list_head children;
+ struct list_head sibling;
+ struct task_struct *group_leader;
+
+
+
+
+
+
+
+ struct list_head ptraced;
+ struct list_head ptrace_entry;
+
+
+ struct pid *thread_pid;
+ struct hlist_node pid_links[PIDTYPE_MAX];
+ struct list_head thread_group;
+ struct list_head thread_node;
+
+ struct completion *vfork_done;
+
+
+ int *set_child_tid;
+
+
+ int *clear_child_tid;
+
+
+ void *pf_io_worker;
+
+ u64 utime;
+ u64 stime;
+
+
+
+
+ u64 gtime;
+ struct prev_cputime prev_cputime;
+# 917 "./include/linux/sched.h"
+ unsigned long nvcsw;
+ unsigned long nivcsw;
+
+
+ u64 start_time;
+
+
+ u64 start_boottime;
+
+
+ unsigned long min_flt;
+ unsigned long maj_flt;
+
+
+ struct posix_cputimers posix_cputimers;
+# 940 "./include/linux/sched.h"
+ const struct cred *ptracer_cred;
+
+
+ const struct cred *real_cred;
+
+
+ const struct cred *cred;
+# 960 "./include/linux/sched.h"
+ char comm[16];
+
+ struct nameidata *nameidata;
+# 973 "./include/linux/sched.h"
+ struct fs_struct *fs;
+
+
+ struct files_struct *files;
+
+
+
+
+
+
+ struct nsproxy *nsproxy;
+
+
+ struct signal_struct *signal;
+ struct sighand_struct *sighand;
+ sigset_t blocked;
+ sigset_t real_blocked;
+
+ sigset_t saved_sigmask;
+ struct sigpending pending;
+ unsigned long sas_ss_sp;
+ size_t sas_ss_size;
+ unsigned int sas_ss_flags;
+
+ struct callback_head *task_works;
+# 1006 "./include/linux/sched.h"
+ struct seccomp seccomp;
+ struct syscall_user_dispatch syscall_dispatch;
+
+
+ u64 parent_exec_id;
+ u64 self_exec_id;
+
+
+ spinlock_t alloc_lock;
+
+
+ raw_spinlock_t pi_lock;
+
+ struct wake_q_node wake_q;
+# 1032 "./include/linux/sched.h"
+ struct mutex_waiter *blocked_on;
+
+
+
+
+
+
+
+ struct irqtrace_events irqtrace;
+ unsigned int hardirq_threaded;
+ u64 hardirq_chain_key;
+ int softirqs_enabled;
+ int softirq_context;
+ int irq_config;
+
+
+
+
+ u64 curr_chain_key;
+ int lockdep_depth;
+ unsigned int lockdep_recursion;
+ struct held_lock held_locks[48UL];
+
+
+
+ unsigned int in_ubsan;
+
+
+
+ void *journal_info;
+
+
+ struct bio_list *bio_list;
+
+
+
+
+
+
+
+ struct reclaim_state *reclaim_state;
+
+ struct backing_dev_info *backing_dev_info;
+
+ struct io_context *io_context;
+
+
+
+
+
+ unsigned long ptrace_message;
+ kernel_siginfo_t *last_siginfo;
+
+ struct task_io_accounting ioac;
+# 1127 "./include/linux/sched.h"
+ struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
+ struct mutex perf_event_mutex;
+ struct list_head perf_event_list;
+# 1200 "./include/linux/sched.h"
+ struct tlbflush_unmap_batch tlb_ubc;
+
+ union {
+  refcount_t rcu_users;
+  struct callback_head rcu;
+ };
+
+
+ struct pipe_inode_info *splice_pipe;
+
+ struct page_frag task_frag;
+# 1224 "./include/linux/sched.h"
+ int nr_dirtied;
+ int nr_dirtied_pause;
+
+ unsigned long dirty_paused_when;
+# 1237 "./include/linux/sched.h"
+ u64 timer_slack_ns;
+ u64 default_timer_slack_ns;
+
+
+ unsigned int kasan_depth;
+# 1278 "./include/linux/sched.h"
+ unsigned long trace;
+
+
+ unsigned long trace_recursion;
+# 1326 "./include/linux/sched.h"
+ struct uprobe_task *utask;
+
+
+
+
+
+ struct kmap_ctrl kmap_ctrl;
+
+
+
+ int pagefault_disabled;
+
+ struct task_struct *oom_reaper_list;
+
+
+
+
+
+
+ refcount_t stack_refcount;
+# 1371 "./include/linux/sched.h"
+ struct llist_head kretprobe_instances;
+
+
+
+
+
+
+
+
+
+ struct thread_struct thread;
+
+
+
+
+
+
+
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid *task_pid(struct task_struct *task)
+{
+ return task->thread_pid;
+}
+# 1407 "./include/linux/sched.h"
+pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type, struct pid_namespace *ns);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pid_nr(struct task_struct *tsk)
+{
+ return tsk->pid;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
+{
+ return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pid_vnr(struct task_struct *tsk)
+{
+ return __task_pid_nr_ns(tsk, PIDTYPE_PID, ((void *)0));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_tgid_nr(struct task_struct *tsk)
+{
+ return tsk->tgid;
+}
+# 1440 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pid_alive(const struct task_struct *p)
+{
+ return p->thread_pid != ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
+{
+ return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pgrp_vnr(struct task_struct *tsk)
+{
+ return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ((void *)0));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
+{
+ return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_session_vnr(struct task_struct *tsk)
+{
+ return __task_pid_nr_ns(tsk, PIDTYPE_SID, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
+{
+ return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ns);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_tgid_vnr(struct task_struct *tsk)
+{
+ return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
+{
+ pid_t pid = 0;
+
+ rcu_read_lock();
+ if (pid_alive(tsk))
+  pid = task_tgid_nr_ns(({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ do { extern void __compiletime_assert_165(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((tsk->real_parent)) == sizeof(char) || sizeof((tsk->real_parent)) == sizeof(short) || sizeof((tsk->real_parent)) == sizeof(int) || sizeof((tsk->real_parent)) == sizeof(long)) || sizeof((tsk->real_parent)) == sizeof(long long))) __compiletime_assert_165(); } while (0); (*(const volatile typeof( _Generic(((tsk->real_parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tsk->real_parent)))) *)&((tsk->real_parent))); }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((0) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("include/linux/sched.h", 1482, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(tsk->real_parent)) *)(________p1)); }), ns);
+ rcu_read_unlock();
+
+ return pid;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_ppid_nr(const struct task_struct *tsk)
+{
+ return task_ppid_nr_ns(tsk, &init_pid_ns);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pid_t task_pgrp_nr(struct task_struct *tsk)
+{
+ return task_pgrp_nr_ns(tsk, &init_pid_ns);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int task_state_index(struct task_struct *tsk)
+{
+ unsigned int tsk_state = ({ do { extern void __compiletime_assert_166(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(tsk->state) == sizeof(char) || sizeof(tsk->state) == sizeof(short) || sizeof(tsk->state) == sizeof(int) || sizeof(tsk->state) == sizeof(long)) || sizeof(tsk->state) == sizeof(long long))) __compiletime_assert_166(); } while (0); (*(const volatile typeof( _Generic((tsk->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (tsk->state))) *)&(tsk->state)); });
+ unsigned int state = (tsk_state | tsk->exit_state) & (0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040);
+
+ do { extern void __compiletime_assert_167(void) __attribute__((__error__("BUILD_BUG_ON failed: " "((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0)"))); if (!(!(((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0)))) __compiletime_assert_167(); } while (0);
+
+ if (tsk_state == (0x0002 | 0x0400))
+  state = ((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1);
+
+ return fls(state);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char task_index_to_char(unsigned int state)
+{
+ static const char state_char[] = "RSDTtXZPI";
+
+ do { extern void __compiletime_assert_168(void) __attribute__((__error__("BUILD_BUG_ON failed: " "1 + ilog2(TASK_REPORT_MAX) != sizeof(state_char) - 1"))); if (!(!(1 + ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) < 2 ? 0 : 63 - __builtin_clzll((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1))) : (sizeof((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) <= 4) ? __ilog2_u32((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) : __ilog2_u64((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ) != sizeof(state_char) - 1))) __compiletime_assert_168(); } while (0);
+
+ return state_char[state];
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) char task_state_to_char(struct task_struct *tsk)
+{
+ return task_index_to_char(task_state_index(tsk));
+}
+# 1538 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_global_init(struct task_struct *tsk)
+{
+ return task_tgid_nr(tsk) == 1;
+}
+
+extern struct pid *cad_pid;
+# 1606 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_percpu_thread(void)
+{
+
+
+
+
+ return true;
+
+}
+# 1638 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_no_new_privs(struct task_struct *p) { return test_bit(0, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_no_new_privs(struct task_struct *p) { set_bit(0, &p->atomic_flags); }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spread_page(struct task_struct *p) { return test_bit(1, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spread_page(struct task_struct *p) { set_bit(1, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_clear_spread_page(struct task_struct *p) { clear_bit(1, &p->atomic_flags); }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spread_slab(struct task_struct *p) { return test_bit(2, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spread_slab(struct task_struct *p) { set_bit(2, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_clear_spread_slab(struct task_struct *p) { clear_bit(2, &p->atomic_flags); }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spec_ssb_disable(struct task_struct *p) { return test_bit(3, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spec_ssb_disable(struct task_struct *p) { set_bit(3, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_clear_spec_ssb_disable(struct task_struct *p) { clear_bit(3, &p->atomic_flags); }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spec_ssb_noexec(struct task_struct *p) { return test_bit(7, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spec_ssb_noexec(struct task_struct *p) { set_bit(7, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_clear_spec_ssb_noexec(struct task_struct *p) { clear_bit(7, &p->atomic_flags); }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spec_ssb_force_disable(struct task_struct *p) { return test_bit(4, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spec_ssb_force_disable(struct task_struct *p) { set_bit(4, &p->atomic_flags); }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spec_ib_disable(struct task_struct *p) { return test_bit(5, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spec_ib_disable(struct task_struct *p) { set_bit(5, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_clear_spec_ib_disable(struct task_struct *p) { clear_bit(5, &p->atomic_flags); }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_spec_ib_force_disable(struct task_struct *p) { return test_bit(6, &p->atomic_flags); }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_set_spec_ib_force_disable(struct task_struct *p) { set_bit(6, &p->atomic_flags); }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+current_restore_flags(unsigned long orig_flags, unsigned long flags)
+{
+ get_current()->flags &= ~flags;
+ get_current()->flags |= orig_flags & flags;
+}
+
+extern int cpuset_cpumask_can_shrink(const struct cpumask *cur, const struct cpumask *trial);
+extern int task_can_attach(struct task_struct *p, const struct cpumask *cs_cpus_allowed);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask)
+{
+ if (!cpumask_test_cpu(0, new_mask))
+  return -22;
+ return 0;
+}
+
+
+extern int yield_to(struct task_struct *p, bool preempt);
+extern void set_user_nice(struct task_struct *p, long nice);
+extern int task_prio(const struct task_struct *p);
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int task_nice(const struct task_struct *p)
+{
+ return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
+}
+
+extern int can_nice(const struct task_struct *p, const int nice);
+extern int task_curr(const struct task_struct *p);
+extern int idle_cpu(int cpu);
+extern int available_idle_cpu(int cpu);
+extern int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
+extern int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
+extern void sched_set_fifo(struct task_struct *p);
+extern void sched_set_fifo_low(struct task_struct *p);
+extern void sched_set_normal(struct task_struct *p, int nice);
+extern int sched_setattr(struct task_struct *, const struct sched_attr *);
+extern int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
+extern struct task_struct *idle_task(int cpu);
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool is_idle_task(const struct task_struct *p)
+{
+ return !!(p->flags & 0x00000002);
+}
+
+extern struct task_struct *curr_task(int cpu);
+extern void ia64_set_curr_task(int cpu, struct task_struct *p);
+
+void yield(void);
+
+union thread_union {
+
+ struct task_struct task;
+
+
+
+
+ unsigned long stack[(((1UL) << 12) << (2 + 1))/sizeof(long)];
+};
+
+
+
+
+
+extern unsigned long init_stack[(((1UL) << 12) << (2 + 1)) / sizeof(unsigned long)];
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct thread_info *task_thread_info(struct task_struct *task)
+{
+ return &task->thread_info;
+}
+# 1771 "./include/linux/sched.h"
+extern struct task_struct *find_task_by_vpid(pid_t nr);
+extern struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns);
+
+
+
+
+extern struct task_struct *find_get_task_by_vpid(pid_t nr);
+
+extern int wake_up_state(struct task_struct *tsk, unsigned int state);
+extern int wake_up_process(struct task_struct *tsk);
+extern void wake_up_new_task(struct task_struct *tsk);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kick_process(struct task_struct *tsk) { }
+
+
+extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_task_comm(struct task_struct *tsk, const char *from)
+{
+ __set_task_comm(tsk, from, false);
+}
+
+extern char *__get_task_comm(char *to, size_t len, struct task_struct *tsk);
+# 1814 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void scheduler_ipi(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long wait_task_inactive(struct task_struct *p, long match_state)
+{
+ return 1;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_tsk_thread_flag(struct task_struct *tsk, int flag)
+{
+ set_ti_thread_flag(task_thread_info(tsk), flag);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
+{
+ clear_ti_thread_flag(task_thread_info(tsk), flag);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_tsk_thread_flag(struct task_struct *tsk, int flag,
+       bool value)
+{
+ update_ti_thread_flag(task_thread_info(tsk), flag, value);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
+{
+ return test_and_set_ti_thread_flag(task_thread_info(tsk), flag);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
+{
+ return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_tsk_thread_flag(struct task_struct *tsk, int flag)
+{
+ return test_ti_thread_flag(task_thread_info(tsk), flag);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_tsk_need_resched(struct task_struct *tsk)
+{
+ set_tsk_thread_flag(tsk,3);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_tsk_need_resched(struct task_struct *tsk)
+{
+ clear_tsk_thread_flag(tsk,3);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int test_tsk_need_resched(struct task_struct *tsk)
+{
+ return __builtin_expect(!!(test_tsk_thread_flag(tsk,3)), 0);
+}
+# 1878 "./include/linux/sched.h"
+extern int __cond_resched(void);
+# 1891 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int _cond_resched(void)
+{
+ return __cond_resched();
+}
+# 1909 "./include/linux/sched.h"
+extern int __cond_resched_lock(spinlock_t *lock);
+extern int __cond_resched_rwlock_read(rwlock_t *lock);
+extern int __cond_resched_rwlock_write(rwlock_t *lock);
+# 1928 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void cond_resched_rcu(void)
+{
+
+ rcu_read_unlock();
+ ({ ___might_sleep("include/linux/sched.h", 1932, 0); _cond_resched(); });
+ rcu_read_lock();
+
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int spin_needbreak(spinlock_t *lock)
+{
+
+
+
+ return 0;
+
+}
+# 1959 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rwlock_needbreak(rwlock_t *lock)
+{
+
+
+
+ return 0;
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool need_resched(void)
+{
+ return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 3)), 0);
+}
+# 1991 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int task_cpu(const struct task_struct *p)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_task_cpu(struct task_struct *p, unsigned int cpu)
+{
+}
+# 2011 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vcpu_is_preempted(int cpu)
+{
+ return false;
+}
+
+
+extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
+extern long sched_getaffinity(pid_t pid, struct cpumask *mask);
+# 2111 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_set_notify_resume(struct task_struct *t)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_handle_notify_resume(struct ksignal *ksig,
+          struct pt_regs *regs)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_signal_deliver(struct ksignal *ksig,
+           struct pt_regs *regs)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_preempt(struct task_struct *t)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_migrate(struct task_struct *t)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_fork(struct task_struct *t, unsigned long clone_flags)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_execve(struct task_struct *t)
+{
+}
+# 2143 "./include/linux/sched.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rseq_syscall(struct pt_regs *regs)
+{
+}
+
+
+
+const struct sched_avg *sched_trace_cfs_rq_avg(struct cfs_rq *cfs_rq);
+char *sched_trace_cfs_rq_path(struct cfs_rq *cfs_rq, char *str, int len);
+int sched_trace_cfs_rq_cpu(struct cfs_rq *cfs_rq);
+
+const struct sched_avg *sched_trace_rq_avg_rt(struct rq *rq);
+const struct sched_avg *sched_trace_rq_avg_dl(struct rq *rq);
+const struct sched_avg *sched_trace_rq_avg_irq(struct rq *rq);
+
+int sched_trace_rq_cpu(struct rq *rq);
+int sched_trace_rq_cpu_capacity(struct rq *rq);
+int sched_trace_rq_nr_running(struct rq *rq);
+
+const struct cpumask *sched_trace_rd_span(struct root_domain *rd);
+# 7 "./include/linux/ratelimit.h" 2
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ratelimit_state_init(struct ratelimit_state *rs,
+     int interval, int burst)
+{
+ memset(rs, 0, sizeof(*rs));
+
+ do { static struct lock_class_key __key; __raw_spin_lock_init((&rs->lock), "&rs->lock", &__key, LD_WAIT_SPIN); } while (0);
+ rs->interval = interval;
+ rs->burst = burst;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ratelimit_default_init(struct ratelimit_state *rs)
+{
+ return ratelimit_state_init(rs, (5 * 250),
+     10);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ratelimit_state_exit(struct ratelimit_state *rs)
+{
+ if (!(rs->flags & ((((1UL))) << (0))))
+  return;
+
+ if (rs->missed) {
+  printk("\001" "4" "%s: %d output lines suppressed due to ratelimiting\n", get_current()->comm, rs->missed)
+                             ;
+  rs->missed = 0;
+ }
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+ratelimit_set_flags(struct ratelimit_state *rs, unsigned long flags)
+{
+ rs->flags = flags;
+}
+
+extern struct ratelimit_state printk_ratelimit_state;
+# 17 "./include/linux/dev_printk.h" 2
+
+
+
+
+
+struct device;
+
+
+
+
+struct dev_printk_info {
+ char subsystem[16];
+ char device[48];
+};
+
+
+
+__attribute__((__format__(printf, 3, 0))) __attribute__((__cold__))
+int dev_vprintk_emit(int level, const struct device *dev,
+       const char *fmt, va_list args);
+__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
+int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...);
+
+__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
+void dev_printk(const char *level, const struct device *dev,
+  const char *fmt, ...);
+__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
+void _dev_emerg(const struct device *dev, const char *fmt, ...);
+__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
+void _dev_alert(const struct device *dev, const char *fmt, ...);
+__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
+void _dev_crit(const struct device *dev, const char *fmt, ...);
+__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
+void _dev_err(const struct device *dev, const char *fmt, ...);
+__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
+void _dev_warn(const struct device *dev, const char *fmt, ...);
+__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
+void _dev_notice(const struct device *dev, const char *fmt, ...);
+__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
+void _dev_info(const struct device *dev, const char *fmt, ...);
+# 16 "./include/linux/device.h" 2
+# 1 "./include/linux/energy_model.h" 1
+
+
+
+
+# 1 "./include/linux/device.h" 1
+# 6 "./include/linux/energy_model.h" 2
+
+
+
+# 1 "./include/linux/sched/cpufreq.h" 1
+# 10 "./include/linux/energy_model.h" 2
+# 1 "./include/linux/sched/topology.h" 1
+
+
+
+
+
+
+# 1 "./include/linux/sched/idle.h" 1
+
+
+
+
+
+
+enum cpu_idle_type {
+ CPU_IDLE,
+ CPU_NOT_IDLE,
+ CPU_NEWLY_IDLE,
+ CPU_MAX_IDLE_TYPES
+};
+
+extern void wake_up_if_idle(int cpu);
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __current_set_polling(void)
+{
+ set_ti_thread_flag(((struct thread_info *)get_current()), 21);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) current_set_polling_and_test(void)
+{
+ __current_set_polling();
+
+
+
+
+
+ __asm__ __volatile__("": : :"memory");
+
+ return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 3)), 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __current_clr_polling(void)
+{
+ clear_ti_thread_flag(((struct thread_info *)get_current()), 21);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) current_clr_polling_and_test(void)
+{
+ __current_clr_polling();
+
+
+
+
+
+ __asm__ __volatile__("": : :"memory");
+
+ return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 3)), 0);
+}
+# 72 "./include/linux/sched/idle.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void current_clr_polling(void)
+{
+ __current_clr_polling();
+
+
+
+
+
+
+
+ __asm__ __volatile__("": : :"memory");
+
+ do { if (test_ti_thread_flag(((struct thread_info *)get_current()), 3)) set_preempt_need_resched(); } while (0);
+}
+# 8 "./include/linux/sched/topology.h" 2
+# 207 "./include/linux/sched/topology.h"
+struct sched_domain_attr;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+partition_sched_domains_locked(int ndoms_new, cpumask_var_t doms_new[],
+          struct sched_domain_attr *dattr_new)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],
+   struct sched_domain_attr *dattr_new)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cpus_share_cache(int this_cpu, int that_cpu)
+{
+ return true;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rebuild_sched_domains_energy(void)
+{
+}
+# 247 "./include/linux/sched/topology.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
+unsigned long arch_scale_cpu_capacity(int cpu)
+{
+ return (1L << 10);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
+unsigned long arch_scale_thermal_pressure(int cpu)
+{
+ return 0;
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__))
+void arch_set_thermal_pressure(const struct cpumask *cpus,
+          unsigned long th_pressure)
+{ }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int task_node(const struct task_struct *p)
+{
+ return ((void)(task_cpu(p)),0);
+}
+# 11 "./include/linux/energy_model.h" 2
+# 21 "./include/linux/energy_model.h"
+struct em_perf_state {
+ unsigned long frequency;
+ unsigned long power;
+ unsigned long cost;
+};
+# 44 "./include/linux/energy_model.h"
+struct em_perf_domain {
+ struct em_perf_state *table;
+ int nr_perf_states;
+ int milliwatts;
+ unsigned long cpus[];
+};
+# 190 "./include/linux/energy_model.h"
+struct em_data_callback {};
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
+int em_dev_register_perf_domain(struct device *dev, unsigned int nr_states,
+    struct em_data_callback *cb, cpumask_t *span,
+    bool milliwatts)
+{
+ return -22;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void em_dev_unregister_perf_domain(struct device *dev)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct em_perf_domain *em_cpu_get(int cpu)
+{
+ return ((void *)0);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct em_perf_domain *em_pd_get(struct device *dev)
+{
+ return ((void *)0);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long em_cpu_energy(struct em_perf_domain *pd,
+   unsigned long max_util, unsigned long sum_util)
+{
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int em_pd_nr_perf_states(struct em_perf_domain *pd)
+{
+ return 0;
+}
+# 17 "./include/linux/device.h" 2
+# 1 "./include/linux/ioport.h" 1
+# 21 "./include/linux/ioport.h"
+struct resource {
+ resource_size_t start;
+ resource_size_t end;
+ const char *name;
+ unsigned long flags;
+ unsigned long desc;
+ struct resource *parent, *sibling, *child;
+};
+# 133 "./include/linux/ioport.h"
+enum {
+ IORES_DESC_NONE = 0,
+ IORES_DESC_CRASH_KERNEL = 1,
+ IORES_DESC_ACPI_TABLES = 2,
+ IORES_DESC_ACPI_NV_STORAGE = 3,
+ IORES_DESC_PERSISTENT_MEMORY = 4,
+ IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
+ IORES_DESC_DEVICE_PRIVATE_MEMORY = 6,
+ IORES_DESC_RESERVED = 7,
+ IORES_DESC_SOFT_RESERVED = 8,
+};
+
+
+
+
+enum {
+ IORES_MAP_SYSTEM_RAM = ((((1UL))) << (0)),
+ IORES_MAP_ENCRYPTED = ((((1UL))) << (1)),
+};
+# 184 "./include/linux/ioport.h"
+extern struct resource ioport_resource;
+extern struct resource iomem_resource;
+
+extern struct resource *request_resource_conflict(struct resource *root, struct resource *new);
+extern int request_resource(struct resource *root, struct resource *new);
+extern int release_resource(struct resource *new);
+void release_child_resources(struct resource *new);
+extern void reserve_region_with_split(struct resource *root,
+        resource_size_t start, resource_size_t end,
+        const char *name);
+extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *new);
+extern int insert_resource(struct resource *parent, struct resource *new);
+extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
+extern int remove_resource(struct resource *old);
+extern void arch_remove_reservations(struct resource *avail);
+extern int allocate_resource(struct resource *root, struct resource *new,
+        resource_size_t size, resource_size_t min,
+        resource_size_t max, resource_size_t align,
+        resource_size_t (*alignf)(void *,
+             const struct resource *,
+             resource_size_t,
+             resource_size_t),
+        void *alignf_data);
+struct resource *lookup_resource(struct resource *root, resource_size_t start);
+int adjust_resource(struct resource *res, resource_size_t start,
+      resource_size_t size);
+resource_size_t resource_alignment(struct resource *res);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) resource_size_t resource_size(const struct resource *res)
+{
+ return res->end - res->start + 1;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long resource_type(const struct resource *res)
+{
+ return res->flags & 0x00001f00;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long resource_ext_type(const struct resource *res)
+{
+ return res->flags & 0x01000000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool resource_contains(struct resource *r1, struct resource *r2)
+{
+ if (resource_type(r1) != resource_type(r2))
+  return false;
+ if (r1->flags & 0x20000000 || r2->flags & 0x20000000)
+  return false;
+ return r1->start <= r2->start && r1->end >= r2->end;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool resource_overlaps(struct resource *r1, struct resource *r2)
+{
+       return r1->start <= r2->end && r1->end >= r2->start;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
+resource_intersection(struct resource *r1, struct resource *r2, struct resource *r)
+{
+ if (!resource_overlaps(r1, r2))
+  return false;
+ r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) > (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID___x169 = (r1->start); typeof(r2->start) __UNIQUE_ID___y170 = (r2->start); ((__UNIQUE_ID___x169) > (__UNIQUE_ID___y170) ? (__UNIQUE_ID___x169) : (__UNIQUE_ID___y170)); }));
+ r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) < (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID___x171 = (r1->end); typeof(r2->end) __UNIQUE_ID___y172 = (r2->end); ((__UNIQUE_ID___x171) < (__UNIQUE_ID___y172) ? (__UNIQUE_ID___x171) : (__UNIQUE_ID___y172)); }));
+ return true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
+resource_union(struct resource *r1, struct resource *r2, struct resource *r)
+{
+ if (!resource_overlaps(r1, r2))
+  return false;
+ r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) < (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID___x173 = (r1->start); typeof(r2->start) __UNIQUE_ID___y174 = (r2->start); ((__UNIQUE_ID___x173) < (__UNIQUE_ID___y174) ? (__UNIQUE_ID___x173) : (__UNIQUE_ID___y174)); }));
+ r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) > (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID___x175 = (r1->end); typeof(r2->end) __UNIQUE_ID___y176 = (r2->end); ((__UNIQUE_ID___x175) > (__UNIQUE_ID___y176) ? (__UNIQUE_ID___x175) : (__UNIQUE_ID___y176)); }));
+ return true;
+}
+# 268 "./include/linux/ioport.h"
+extern struct resource * __request_region(struct resource *,
+     resource_size_t start,
+     resource_size_t n,
+     const char *name, int flags);
+
+
+
+
+
+extern void __release_region(struct resource *, resource_size_t,
+    resource_size_t);
+# 287 "./include/linux/ioport.h"
+struct device;
+
+extern int devm_request_resource(struct device *dev, struct resource *root,
+     struct resource *new);
+extern void devm_release_resource(struct device *dev, struct resource *new);
+
+
+
+
+
+
+extern struct resource * __devm_request_region(struct device *dev,
+    struct resource *parent, resource_size_t start,
+    resource_size_t n, const char *name);
+
+
+
+
+
+
+extern void __devm_release_region(struct device *dev, struct resource *parent,
+      resource_size_t start, resource_size_t n);
+extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
+extern bool iomem_is_exclusive(u64 addr);
+
+extern int
+walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
+  void *arg, int (*func)(unsigned long, unsigned long, void *));
+extern int
+walk_mem_res(u64 start, u64 end, void *arg,
+      int (*func)(struct resource *, void *));
+extern int
+walk_system_ram_res(u64 start, u64 end, void *arg,
+      int (*func)(struct resource *, void *));
+extern int
+walk_iomem_res_desc(unsigned long desc, unsigned long flags, u64 start, u64 end,
+      void *arg, int (*func)(struct resource *, void *));
+
+struct resource *devm_request_free_mem_region(struct device *dev,
+  struct resource *base, unsigned long size);
+struct resource *request_free_mem_region(struct resource *base,
+  unsigned long size, const char *name);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqresource_disabled(struct resource *res, u32 irq)
+{
+ res->start = irq;
+ res->end = irq;
+ res->flags = 0x00000400 | 0x10000000 | 0x20000000;
+}
+
+extern struct address_space *iomem_get_mapping(void);
+# 18 "./include/linux/device.h" 2
+
+# 1 "./include/linux/klist.h" 1
+# 17 "./include/linux/klist.h"
+struct klist_node;
+struct klist {
+ spinlock_t k_lock;
+ struct list_head k_list;
+ void (*get)(struct klist_node *);
+ void (*put)(struct klist_node *);
+} __attribute__ ((aligned (sizeof(void *))));
+# 34 "./include/linux/klist.h"
+extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
+         void (*put)(struct klist_node *));
+
+struct klist_node {
+ void *n_klist;
+ struct list_head n_node;
+ struct kref n_ref;
+};
+
+extern void klist_add_tail(struct klist_node *n, struct klist *k);
+extern void klist_add_head(struct klist_node *n, struct klist *k);
+extern void klist_add_behind(struct klist_node *n, struct klist_node *pos);
+extern void klist_add_before(struct klist_node *n, struct klist_node *pos);
+
+extern void klist_del(struct klist_node *n);
+extern void klist_remove(struct klist_node *n);
+
+extern int klist_node_attached(struct klist_node *n);
+
+
+struct klist_iter {
+ struct klist *i_klist;
+ struct klist_node *i_cur;
+};
+
+
+extern void klist_iter_init(struct klist *k, struct klist_iter *i);
+extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
+     struct klist_node *n);
+extern void klist_iter_exit(struct klist_iter *i);
+extern struct klist_node *klist_prev(struct klist_iter *i);
+extern struct klist_node *klist_next(struct klist_iter *i);
+# 20 "./include/linux/device.h" 2
+
+
+
+
+
+# 1 "./include/linux/pm.h" 1
+# 22 "./include/linux/pm.h"
+extern void (*pm_power_off)(void);
+extern void (*pm_power_off_prepare)(void);
+
+struct device;
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_vt_switch_required(struct device *dev, bool required)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_vt_switch_unregister(struct device *dev)
+{
+}
+
+
+
+
+
+
+struct device;
+
+
+
+
+
+
+
+typedef struct pm_message {
+ int event;
+} pm_message_t;
+# 278 "./include/linux/pm.h"
+struct dev_pm_ops {
+ int (*prepare)(struct device *dev);
+ void (*complete)(struct device *dev);
+ int (*suspend)(struct device *dev);
+ int (*resume)(struct device *dev);
+ int (*freeze)(struct device *dev);
+ int (*thaw)(struct device *dev);
+ int (*poweroff)(struct device *dev);
+ int (*restore)(struct device *dev);
+ int (*suspend_late)(struct device *dev);
+ int (*resume_early)(struct device *dev);
+ int (*freeze_late)(struct device *dev);
+ int (*thaw_early)(struct device *dev);
+ int (*poweroff_late)(struct device *dev);
+ int (*restore_early)(struct device *dev);
+ int (*suspend_noirq)(struct device *dev);
+ int (*resume_noirq)(struct device *dev);
+ int (*freeze_noirq)(struct device *dev);
+ int (*thaw_noirq)(struct device *dev);
+ int (*poweroff_noirq)(struct device *dev);
+ int (*restore_noirq)(struct device *dev);
+ int (*runtime_suspend)(struct device *dev);
+ int (*runtime_resume)(struct device *dev);
+ int (*runtime_idle)(struct device *dev);
+};
+# 502 "./include/linux/pm.h"
+enum rpm_status {
+ RPM_ACTIVE = 0,
+ RPM_RESUMING,
+ RPM_SUSPENDED,
+ RPM_SUSPENDING,
+};
+# 524 "./include/linux/pm.h"
+enum rpm_request {
+ RPM_REQ_NONE = 0,
+ RPM_REQ_IDLE,
+ RPM_REQ_SUSPEND,
+ RPM_REQ_AUTOSUSPEND,
+ RPM_REQ_RESUME,
+};
+
+struct wakeup_source;
+struct wake_irq;
+struct pm_domain_data;
+
+struct pm_subsys_data {
+ spinlock_t lock;
+ unsigned int refcount;
+# 547 "./include/linux/pm.h"
+};
+# 567 "./include/linux/pm.h"
+struct dev_pm_info {
+ pm_message_t power_state;
+ unsigned int can_wakeup:1;
+ unsigned int async_suspend:1;
+ bool in_dpm_list:1;
+ bool is_prepared:1;
+ bool is_suspended:1;
+ bool is_noirq_suspended:1;
+ bool is_late_suspended:1;
+ bool no_pm:1;
+ bool early_init:1;
+ bool direct_complete:1;
+ u32 driver_flags;
+ spinlock_t lock;
+# 591 "./include/linux/pm.h"
+ unsigned int should_wakeup:1;
+# 622 "./include/linux/pm.h"
+ struct pm_subsys_data *subsys_data;
+ void (*set_latency_tolerance)(struct device *, s32);
+ struct dev_pm_qos *qos;
+};
+
+extern int dev_pm_get_subsys_data(struct device *dev);
+extern void dev_pm_put_subsys_data(struct device *dev);
+# 644 "./include/linux/pm.h"
+struct dev_pm_domain {
+ struct dev_pm_ops ops;
+ int (*start)(struct device *dev);
+ void (*detach)(struct device *dev, bool power_off);
+ int (*activate)(struct device *dev);
+ void (*sync)(struct device *dev);
+ void (*dismiss)(struct device *dev);
+};
+# 763 "./include/linux/pm.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int dpm_suspend_start(pm_message_t state)
+{
+ return 0;
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_pm_wait_for_dev(struct device *a, struct device *b)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *))
+{
+}
+# 802 "./include/linux/pm.h"
+enum dpm_order {
+ DPM_ORDER_NONE,
+ DPM_ORDER_DEV_AFTER_PARENT,
+ DPM_ORDER_PARENT_BEFORE_DEV,
+ DPM_ORDER_DEV_LAST,
+};
+# 26 "./include/linux/device.h" 2
+
+
+
+# 1 "./include/linux/overflow.h" 1
+# 52 "./include/linux/overflow.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) __must_check_overflow(bool overflow)
+{
+ return __builtin_expect(!!(overflow), 0);
+}
+# 263 "./include/linux/overflow.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) size_t array_size(size_t a, size_t b)
+{
+ size_t bytes;
+
+ if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
+  return (~(size_t)0);
+
+ return bytes;
+}
+# 285 "./include/linux/overflow.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) size_t array3_size(size_t a, size_t b, size_t c)
+{
+ size_t bytes;
+
+ if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
+  return (~(size_t)0);
+ if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
+  return (~(size_t)0);
+
+ return bytes;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__warn_unused_result__)) size_t __ab_c_size(size_t a, size_t b, size_t c)
+{
+ size_t bytes;
+
+ if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
+  return (~(size_t)0);
+ if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_add_overflow(__a, __b, __d); })))
+  return (~(size_t)0);
+
+ return bytes;
+}
+# 30 "./include/linux/device.h" 2
+# 1 "./include/linux/device/bus.h" 1
+# 21 "./include/linux/device/bus.h"
+struct device_driver;
+struct fwnode_handle;
+# 82 "./include/linux/device/bus.h"
+struct bus_type {
+ const char *name;
+ const char *dev_name;
+ struct device *dev_root;
+ const struct attribute_group **bus_groups;
+ const struct attribute_group **dev_groups;
+ const struct attribute_group **drv_groups;
+
+ int (*match)(struct device *dev, struct device_driver *drv);
+ int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
+ int (*probe)(struct device *dev);
+ void (*sync_state)(struct device *dev);
+ int (*remove)(struct device *dev);
+ void (*shutdown)(struct device *dev);
+
+ int (*online)(struct device *dev);
+ int (*offline)(struct device *dev);
+
+ int (*suspend)(struct device *dev, pm_message_t state);
+ int (*resume)(struct device *dev);
+
+ int (*num_vf)(struct device *dev);
+
+ int (*dma_configure)(struct device *dev);
+
+ const struct dev_pm_ops *pm;
+
+ const struct iommu_ops *iommu_ops;
+
+ struct subsys_private *p;
+ struct lock_class_key lock_key;
+
+ bool need_parent_lock;
+};
+
+extern int __attribute__((__warn_unused_result__)) bus_register(struct bus_type *bus);
+
+extern void bus_unregister(struct bus_type *bus);
+
+extern int __attribute__((__warn_unused_result__)) bus_rescan_devices(struct bus_type *bus);
+
+struct bus_attribute {
+ struct attribute attr;
+ ssize_t (*show)(struct bus_type *bus, char *buf);
+ ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count);
+};
+# 136 "./include/linux/device/bus.h"
+extern int __attribute__((__warn_unused_result__)) bus_create_file(struct bus_type *,
+     struct bus_attribute *);
+extern void bus_remove_file(struct bus_type *, struct bus_attribute *);
+
+
+int device_match_name(struct device *dev, const void *name);
+int device_match_of_node(struct device *dev, const void *np);
+int device_match_fwnode(struct device *dev, const void *fwnode);
+int device_match_devt(struct device *dev, const void *pdevt);
+int device_match_acpi_dev(struct device *dev, const void *adev);
+int device_match_any(struct device *dev, const void *unused);
+
+
+struct subsys_dev_iter {
+ struct klist_iter ki;
+ const struct device_type *type;
+};
+void subsys_dev_iter_init(struct subsys_dev_iter *iter,
+    struct bus_type *subsys,
+    struct device *start,
+    const struct device_type *type);
+struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
+void subsys_dev_iter_exit(struct subsys_dev_iter *iter);
+
+int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
+       int (*fn)(struct device *dev, void *data));
+struct device *bus_find_device(struct bus_type *bus, struct device *start,
+          const void *data,
+          int (*match)(struct device *dev, const void *data));
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *bus_find_device_by_name(struct bus_type *bus,
+           struct device *start,
+           const char *name)
+{
+ return bus_find_device(bus, start, name, device_match_name);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
+bus_find_device_by_of_node(struct bus_type *bus, const struct device_node *np)
+{
+ return bus_find_device(bus, ((void *)0), np, device_match_of_node);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
+bus_find_device_by_fwnode(struct bus_type *bus, const struct fwnode_handle *fwnode)
+{
+ return bus_find_device(bus, ((void *)0), fwnode, device_match_fwnode);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *bus_find_device_by_devt(struct bus_type *bus,
+           dev_t devt)
+{
+ return bus_find_device(bus, ((void *)0), &devt, device_match_devt);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
+bus_find_next_device(struct bus_type *bus,struct device *cur)
+{
+ return bus_find_device(bus, cur, ((void *)0), device_match_any);
+}
+# 242 "./include/linux/device/bus.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
+bus_find_device_by_acpi_dev(struct bus_type *bus, const void *adev)
+{
+ return ((void *)0);
+}
+
+
+struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
+     struct device *hint);
+int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
+       void *data, int (*fn)(struct device_driver *, void *));
+void bus_sort_breadthfirst(struct bus_type *bus,
+      int (*compare)(const struct device *a,
+       const struct device *b));
+
+
+
+
+
+
+struct notifier_block;
+
+extern int bus_register_notifier(struct bus_type *bus,
+     struct notifier_block *nb);
+extern int bus_unregister_notifier(struct bus_type *bus,
+       struct notifier_block *nb);
+# 285 "./include/linux/device/bus.h"
+extern struct kset *bus_get_kset(struct bus_type *bus);
+extern struct klist *bus_get_device_klist(struct bus_type *bus);
+# 31 "./include/linux/device.h" 2
+# 1 "./include/linux/device/class.h" 1
+# 22 "./include/linux/device/class.h"
+struct device;
+struct fwnode_handle;
+# 54 "./include/linux/device/class.h"
+struct class {
+ const char *name;
+ struct module *owner;
+
+ const struct attribute_group **class_groups;
+ const struct attribute_group **dev_groups;
+ struct kobject *dev_kobj;
+
+ int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
+ char *(*devnode)(struct device *dev, umode_t *mode);
+
+ void (*class_release)(struct class *class);
+ void (*dev_release)(struct device *dev);
+
+ int (*shutdown_pre)(struct device *dev);
+
+ const struct kobj_ns_type_operations *ns_type;
+ const void *(*namespace)(struct device *dev);
+
+ void (*get_ownership)(struct device *dev, kuid_t *uid, kgid_t *gid);
+
+ const struct dev_pm_ops *pm;
+
+ struct subsys_private *p;
+};
+
+struct class_dev_iter {
+ struct klist_iter ki;
+ const struct device_type *type;
+};
+
+extern struct kobject *sysfs_dev_block_kobj;
+extern struct kobject *sysfs_dev_char_kobj;
+extern int __attribute__((__warn_unused_result__)) __class_register(struct class *class,
+      struct lock_class_key *key);
+extern void class_unregister(struct class *class);
+# 99 "./include/linux/device/class.h"
+struct class_compat;
+struct class_compat *class_compat_register(const char *name);
+void class_compat_unregister(struct class_compat *cls);
+int class_compat_create_link(struct class_compat *cls, struct device *dev,
+        struct device *device_link);
+void class_compat_remove_link(struct class_compat *cls, struct device *dev,
+         struct device *device_link);
+
+extern void class_dev_iter_init(struct class_dev_iter *iter,
+    struct class *class,
+    struct device *start,
+    const struct device_type *type);
+extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
+extern void class_dev_iter_exit(struct class_dev_iter *iter);
+
+extern int class_for_each_device(struct class *class, struct device *start,
+     void *data,
+     int (*fn)(struct device *dev, void *data));
+extern struct device *class_find_device(struct class *class,
+     struct device *start, const void *data,
+     int (*match)(struct device *, const void *));
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *class_find_device_by_name(struct class *class,
+             const char *name)
+{
+ return class_find_device(class, ((void *)0), name, device_match_name);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
+class_find_device_by_of_node(struct class *class, const struct device_node *np)
+{
+ return class_find_device(class, ((void *)0), np, device_match_of_node);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
+class_find_device_by_fwnode(struct class *class,
+       const struct fwnode_handle *fwnode)
+{
+ return class_find_device(class, ((void *)0), fwnode, device_match_fwnode);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *class_find_device_by_devt(struct class *class,
+             dev_t devt)
+{
+ return class_find_device(class, ((void *)0), &devt, device_match_devt);
+}
+# 184 "./include/linux/device/class.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
+class_find_device_by_acpi_dev(struct class *class, const void *adev)
+{
+ return ((void *)0);
+}
+
+
+struct class_attribute {
+ struct attribute attr;
+ ssize_t (*show)(struct class *class, struct class_attribute *attr,
+   char *buf);
+ ssize_t (*store)(struct class *class, struct class_attribute *attr,
+   const char *buf, size_t count);
+};
+# 206 "./include/linux/device/class.h"
+extern int __attribute__((__warn_unused_result__)) class_create_file_ns(struct class *class,
+          const struct class_attribute *attr,
+          const void *ns);
+extern void class_remove_file_ns(struct class *class,
+     const struct class_attribute *attr,
+     const void *ns);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) class_create_file(struct class *class,
+     const struct class_attribute *attr)
+{
+ return class_create_file_ns(class, attr, ((void *)0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void class_remove_file(struct class *class,
+         const struct class_attribute *attr)
+{
+ return class_remove_file_ns(class, attr, ((void *)0));
+}
+
+
+struct class_attribute_string {
+ struct class_attribute attr;
+ char *str;
+};
+# 238 "./include/linux/device/class.h"
+extern ssize_t show_class_attr_string(struct class *class, struct class_attribute *attr,
+                        char *buf);
+
+struct class_interface {
+ struct list_head node;
+ struct class *class;
+
+ int (*add_dev) (struct device *, struct class_interface *);
+ void (*remove_dev) (struct device *, struct class_interface *);
+};
+
+extern int __attribute__((__warn_unused_result__)) class_interface_register(struct class_interface *);
+extern void class_interface_unregister(struct class_interface *);
+
+extern struct class * __attribute__((__warn_unused_result__)) __class_create(struct module *owner,
+        const char *name,
+        struct lock_class_key *key);
+extern void class_destroy(struct class *cls);
+# 32 "./include/linux/device.h" 2
+# 1 "./include/linux/device/driver.h" 1
+# 44 "./include/linux/device/driver.h"
+enum probe_type {
+ PROBE_DEFAULT_STRATEGY,
+ PROBE_PREFER_ASYNCHRONOUS,
+ PROBE_FORCE_SYNCHRONOUS,
+};
+# 95 "./include/linux/device/driver.h"
+struct device_driver {
+ const char *name;
+ struct bus_type *bus;
+
+ struct module *owner;
+ const char *mod_name;
+
+ bool suppress_bind_attrs;
+ enum probe_type probe_type;
+
+ const struct of_device_id *of_match_table;
+ const struct acpi_device_id *acpi_match_table;
+
+ int (*probe) (struct device *dev);
+ void (*sync_state)(struct device *dev);
+ int (*remove) (struct device *dev);
+ void (*shutdown) (struct device *dev);
+ int (*suspend) (struct device *dev, pm_message_t state);
+ int (*resume) (struct device *dev);
+ const struct attribute_group **groups;
+ const struct attribute_group **dev_groups;
+
+ const struct dev_pm_ops *pm;
+ void (*coredump) (struct device *dev);
+
+ struct driver_private *p;
+};
+
+
+extern int __attribute__((__warn_unused_result__)) driver_register(struct device_driver *drv);
+extern void driver_unregister(struct device_driver *drv);
+
+extern struct device_driver *driver_find(const char *name,
+      struct bus_type *bus);
+extern int driver_probe_done(void);
+extern void wait_for_device_probe(void);
+
+
+
+struct driver_attribute {
+ struct attribute attr;
+ ssize_t (*show)(struct device_driver *driver, char *buf);
+ ssize_t (*store)(struct device_driver *driver, const char *buf,
+    size_t count);
+};
+# 148 "./include/linux/device/driver.h"
+extern int __attribute__((__warn_unused_result__)) driver_create_file(struct device_driver *driver,
+     const struct driver_attribute *attr);
+extern void driver_remove_file(struct device_driver *driver,
+          const struct driver_attribute *attr);
+
+extern int __attribute__((__warn_unused_result__)) driver_for_each_device(struct device_driver *drv,
+            struct device *start,
+            void *data,
+            int (*fn)(struct device *dev,
+        void *));
+struct device *driver_find_device(struct device_driver *drv,
+      struct device *start, const void *data,
+      int (*match)(struct device *dev, const void *data));
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *driver_find_device_by_name(struct device_driver *drv,
+       const char *name)
+{
+ return driver_find_device(drv, ((void *)0), name, device_match_name);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
+driver_find_device_by_of_node(struct device_driver *drv,
+         const struct device_node *np)
+{
+ return driver_find_device(drv, ((void *)0), np, device_match_of_node);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
+driver_find_device_by_fwnode(struct device_driver *drv,
+        const struct fwnode_handle *fwnode)
+{
+ return driver_find_device(drv, ((void *)0), fwnode, device_match_fwnode);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *driver_find_device_by_devt(struct device_driver *drv,
+       dev_t devt)
+{
+ return driver_find_device(drv, ((void *)0), &devt, device_match_devt);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *driver_find_next_device(struct device_driver *drv,
+           struct device *start)
+{
+ return driver_find_device(drv, start, ((void *)0), device_match_any);
+}
+# 232 "./include/linux/device/driver.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *
+driver_find_device_by_acpi_dev(struct device_driver *drv, const void *adev)
+{
+ return ((void *)0);
+}
+
+
+extern int driver_deferred_probe_timeout;
+void driver_deferred_probe_add(struct device *dev);
+int driver_deferred_probe_check_state(struct device *dev);
+void driver_init(void);
+# 33 "./include/linux/device.h" 2
+# 1 "./arch/x86/include/asm/device.h" 1
+
+
+
+
+struct dev_archdata {
+};
+
+struct pdev_archdata {
+};
+# 34 "./include/linux/device.h" 2
+
+struct device;
+struct device_private;
+struct device_driver;
+struct driver_private;
+struct module;
+struct class;
+struct subsys_private;
+struct device_node;
+struct fwnode_handle;
+struct iommu_ops;
+struct iommu_group;
+struct dev_pin_info;
+struct dev_iommu;
+# 62 "./include/linux/device.h"
+struct subsys_interface {
+ const char *name;
+ struct bus_type *subsys;
+ struct list_head node;
+ int (*add_dev)(struct device *dev, struct subsys_interface *sif);
+ void (*remove_dev)(struct device *dev, struct subsys_interface *sif);
+};
+
+int subsys_interface_register(struct subsys_interface *sif);
+void subsys_interface_unregister(struct subsys_interface *sif);
+
+int subsys_system_register(struct bus_type *subsys,
+      const struct attribute_group **groups);
+int subsys_virtual_register(struct bus_type *subsys,
+       const struct attribute_group **groups);
+# 87 "./include/linux/device.h"
+struct device_type {
+ const char *name;
+ const struct attribute_group **groups;
+ int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
+ char *(*devnode)(struct device *dev, umode_t *mode,
+    kuid_t *uid, kgid_t *gid);
+ void (*release)(struct device *dev);
+
+ const struct dev_pm_ops *pm;
+};
+
+
+struct device_attribute {
+ struct attribute attr;
+ ssize_t (*show)(struct device *dev, struct device_attribute *attr,
+   char *buf);
+ ssize_t (*store)(struct device *dev, struct device_attribute *attr,
+    const char *buf, size_t count);
+};
+
+struct dev_ext_attribute {
+ struct device_attribute attr;
+ void *var;
+};
+
+ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
+     char *buf);
+ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
+      const char *buf, size_t count);
+ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
+   char *buf);
+ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
+    const char *buf, size_t count);
+ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
+   char *buf);
+ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
+    const char *buf, size_t count);
+# 153 "./include/linux/device.h"
+int device_create_file(struct device *device,
+         const struct device_attribute *entry);
+void device_remove_file(struct device *dev,
+   const struct device_attribute *attr);
+bool device_remove_file_self(struct device *dev,
+        const struct device_attribute *attr);
+int __attribute__((__warn_unused_result__)) device_create_bin_file(struct device *dev,
+     const struct bin_attribute *attr);
+void device_remove_bin_file(struct device *dev,
+       const struct bin_attribute *attr);
+
+
+typedef void (*dr_release_t)(struct device *dev, void *res);
+typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);
+# 176 "./include/linux/device.h"
+void *devres_alloc_node(dr_release_t release, size_t size,
+   gfp_t gfp, int nid) __attribute__((__malloc__));
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *devres_alloc(dr_release_t release, size_t size, gfp_t gfp)
+{
+ return devres_alloc_node(release, size, gfp, (-1));
+}
+
+
+void devres_for_each_res(struct device *dev, dr_release_t release,
+    dr_match_t match, void *match_data,
+    void (*fn)(struct device *, void *, void *),
+    void *data);
+void devres_free(void *res);
+void devres_add(struct device *dev, void *res);
+void *devres_find(struct device *dev, dr_release_t release,
+    dr_match_t match, void *match_data);
+void *devres_get(struct device *dev, void *new_res,
+   dr_match_t match, void *match_data);
+void *devres_remove(struct device *dev, dr_release_t release,
+      dr_match_t match, void *match_data);
+int devres_destroy(struct device *dev, dr_release_t release,
+     dr_match_t match, void *match_data);
+int devres_release(struct device *dev, dr_release_t release,
+     dr_match_t match, void *match_data);
+
+
+void * __attribute__((__warn_unused_result__)) devres_open_group(struct device *dev, void *id, gfp_t gfp);
+void devres_close_group(struct device *dev, void *id);
+void devres_remove_group(struct device *dev, void *id);
+int devres_release_group(struct device *dev, void *id);
+
+
+void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __attribute__((__malloc__));
+void *devm_krealloc(struct device *dev, void *ptr, size_t size,
+      gfp_t gfp) __attribute__((__warn_unused_result__));
+__attribute__((__format__(printf, 3, 0))) char *devm_kvasprintf(struct device *dev, gfp_t gfp,
+         const char *fmt, va_list ap) __attribute__((__malloc__));
+__attribute__((__format__(printf, 3, 4))) char *devm_kasprintf(struct device *dev, gfp_t gfp,
+        const char *fmt, ...) __attribute__((__malloc__));
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
+{
+ return devm_kmalloc(dev, size, gfp | (( gfp_t)0x100u));
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *devm_kmalloc_array(struct device *dev,
+           size_t n, size_t size, gfp_t flags)
+{
+ size_t bytes;
+
+ if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
+  return ((void *)0);
+
+ return devm_kmalloc(dev, bytes, flags);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *devm_kcalloc(struct device *dev,
+     size_t n, size_t size, gfp_t flags)
+{
+ return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x100u));
+}
+void devm_kfree(struct device *dev, const void *p);
+char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp) __attribute__((__malloc__));
+const char *devm_kstrdup_const(struct device *dev, const char *s, gfp_t gfp);
+void *devm_kmemdup(struct device *dev, const void *src, size_t len, gfp_t gfp);
+
+unsigned long devm_get_free_pages(struct device *dev,
+      gfp_t gfp_mask, unsigned int order);
+void devm_free_pages(struct device *dev, unsigned long addr);
+
+void *devm_ioremap_resource(struct device *dev,
+        const struct resource *res);
+void *devm_ioremap_resource_wc(struct device *dev,
+           const struct resource *res);
+
+void *devm_of_iomap(struct device *dev,
+       struct device_node *node, int index,
+       resource_size_t *size);
+
+
+int devm_add_action(struct device *dev, void (*action)(void *), void *data);
+void devm_remove_action(struct device *dev, void (*action)(void *), void *data);
+void devm_release_action(struct device *dev, void (*action)(void *), void *data);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int devm_add_action_or_reset(struct device *dev,
+        void (*action)(void *), void *data)
+{
+ int ret;
+
+ ret = devm_add_action(dev, action, data);
+ if (ret)
+  action(data);
+
+ return ret;
+}
+# 284 "./include/linux/device.h"
+void *__devm_alloc_percpu(struct device *dev, size_t size,
+       size_t align);
+void devm_free_percpu(struct device *dev, void *pdata);
+
+struct device_dma_parameters {
+
+
+
+
+ unsigned int max_segment_size;
+ unsigned int min_align_mask;
+ unsigned long segment_boundary_mask;
+};
+# 307 "./include/linux/device.h"
+enum device_link_state {
+ DL_STATE_NONE = -1,
+ DL_STATE_DORMANT = 0,
+ DL_STATE_AVAILABLE,
+ DL_STATE_CONSUMER_PROBE,
+ DL_STATE_ACTIVE,
+ DL_STATE_SUPPLIER_UNBIND,
+};
+# 346 "./include/linux/device.h"
+enum dl_dev_state {
+ DL_DEV_NO_DRIVER = 0,
+ DL_DEV_PROBING,
+ DL_DEV_DRIVER_BOUND,
+ DL_DEV_UNBINDING,
+};
+# 360 "./include/linux/device.h"
+struct dev_links_info {
+ struct list_head suppliers;
+ struct list_head consumers;
+ struct list_head defer_sync;
+ enum dl_dev_state status;
+};
+# 458 "./include/linux/device.h"
+struct device {
+ struct kobject kobj;
+ struct device *parent;
+
+ struct device_private *p;
+
+ const char *init_name;
+ const struct device_type *type;
+
+ struct bus_type *bus;
+ struct device_driver *driver;
+
+ void *platform_data;
+
+ void *driver_data;
+
+
+ struct mutex lockdep_mutex;
+
+ struct mutex mutex;
+
+
+
+ struct dev_links_info links;
+ struct dev_pm_info power;
+ struct dev_pm_domain *pm_domain;
+# 501 "./include/linux/device.h"
+ u64 *dma_mask;
+ u64 coherent_dma_mask;
+
+
+
+
+ u64 bus_dma_limit;
+ const struct bus_dma_region *dma_range_map;
+
+ struct device_dma_parameters *dma_parms;
+
+ struct list_head dma_pools;
+# 523 "./include/linux/device.h"
+ struct dev_archdata archdata;
+
+ struct device_node *of_node;
+ struct fwnode_handle *fwnode;
+
+
+
+
+ dev_t devt;
+ u32 id;
+
+ spinlock_t devres_lock;
+ struct list_head devres_head;
+
+ struct class *class;
+ const struct attribute_group **groups;
+
+ void (*release)(struct device *dev);
+ struct iommu_group *iommu_group;
+ struct dev_iommu *iommu;
+
+ bool offline_disabled:1;
+ bool offline:1;
+ bool of_node_reused:1;
+ bool state_synced:1;
+# 556 "./include/linux/device.h"
+};
+# 572 "./include/linux/device.h"
+struct device_link {
+ struct device *supplier;
+ struct list_head s_node;
+ struct device *consumer;
+ struct list_head c_node;
+ struct device link_dev;
+ enum device_link_state status;
+ u32 flags;
+ refcount_t rpm_active;
+ struct kref kref;
+
+ struct callback_head callback_head;
+
+ bool supplier_preactivated;
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device *kobj_to_dev(struct kobject *kobj)
+{
+ return ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_177(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct device *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_177(); } while (0); ((struct device *)(__mptr - __builtin_offsetof(struct device, kobj))); });
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_iommu_mapped(struct device *dev)
+{
+ return (dev->iommu_group != ((void *)0));
+}
+
+
+# 1 "./include/linux/pm_wakeup.h" 1
+# 18 "./include/linux/pm_wakeup.h"
+struct wake_irq;
+# 43 "./include/linux/pm_wakeup.h"
+struct wakeup_source {
+ const char *name;
+ int id;
+ struct list_head entry;
+ spinlock_t lock;
+ struct wake_irq *wakeirq;
+ struct timer_list timer;
+ unsigned long timer_expires;
+ ktime_t total_time;
+ ktime_t max_time;
+ ktime_t last_time;
+ ktime_t start_prevent_time;
+ ktime_t prevent_sleep_time;
+ unsigned long event_count;
+ unsigned long active_count;
+ unsigned long relax_count;
+ unsigned long expire_count;
+ unsigned long wakeup_count;
+ struct device *dev;
+ bool active:1;
+ bool autosleep_enabled:1;
+};
+# 123 "./include/linux/pm_wakeup.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_set_wakeup_capable(struct device *dev, bool capable)
+{
+ dev->power.can_wakeup = capable;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_can_wakeup(struct device *dev)
+{
+ return dev->power.can_wakeup;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct wakeup_source *wakeup_source_create(const char *name)
+{
+ return ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wakeup_source_destroy(struct wakeup_source *ws) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wakeup_source_add(struct wakeup_source *ws) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wakeup_source_remove(struct wakeup_source *ws) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct wakeup_source *wakeup_source_register(struct device *dev,
+          const char *name)
+{
+ return ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void wakeup_source_unregister(struct wakeup_source *ws) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_wakeup_enable(struct device *dev)
+{
+ dev->power.should_wakeup = true;
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_wakeup_disable(struct device *dev)
+{
+ dev->power.should_wakeup = false;
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_set_wakeup_enable(struct device *dev, bool enable)
+{
+ dev->power.should_wakeup = enable;
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_init_wakeup(struct device *dev, bool val)
+{
+ device_set_wakeup_capable(dev, val);
+ device_set_wakeup_enable(dev, val);
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_may_wakeup(struct device *dev)
+{
+ return dev->power.can_wakeup && dev->power.should_wakeup;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_wakeup_path(struct device *dev)
+{
+ return false;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_set_wakeup_path(struct device *dev) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __pm_stay_awake(struct wakeup_source *ws) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_stay_awake(struct device *dev) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __pm_relax(struct wakeup_source *ws) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_relax(struct device *dev) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_wakeup_ws_event(struct wakeup_source *ws,
+          unsigned int msec, bool hard) {}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_wakeup_dev_event(struct device *dev, unsigned int msec,
+           bool hard) {}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec)
+{
+ return pm_wakeup_ws_event(ws, msec, false);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_wakeup_event(struct device *dev, unsigned int msec)
+{
+ return pm_wakeup_dev_event(dev, msec, false);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pm_wakeup_hard_event(struct device *dev)
+{
+ return pm_wakeup_dev_event(dev, 0, true);
+}
+# 605 "./include/linux/device.h" 2
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *dev_name(const struct device *dev)
+{
+
+ if (dev->init_name)
+  return dev->init_name;
+
+ return kobject_name(&dev->kobj);
+}
+# 622 "./include/linux/device.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const char *dev_bus_name(const struct device *dev)
+{
+ return dev->bus ? dev->bus->name : (dev->class ? dev->class->name : "");
+}
+
+__attribute__((__format__(printf, 2, 3))) int dev_set_name(struct device *dev, const char *name, ...);
+# 639 "./include/linux/device.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int dev_to_node(struct device *dev)
+{
+ return (-1);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_dev_node(struct device *dev, int node)
+{
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_domain *dev_get_msi_domain(const struct device *dev)
+{
+
+
+
+ return ((void *)0);
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dev_set_msi_domain(struct device *dev, struct irq_domain *d)
+{
+
+
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *dev_get_drvdata(const struct device *dev)
+{
+ return dev->driver_data;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dev_set_drvdata(struct device *dev, void *data)
+{
+ dev->driver_data = data;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pm_subsys_data *dev_to_psd(struct device *dev)
+{
+ return dev ? dev->power.subsys_data : ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int dev_get_uevent_suppress(const struct device *dev)
+{
+ return dev->kobj.uevent_suppress;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dev_set_uevent_suppress(struct device *dev, int val)
+{
+ dev->kobj.uevent_suppress = val;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_is_registered(struct device *dev)
+{
+ return dev->kobj.state_in_sysfs;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_enable_async_suspend(struct device *dev)
+{
+ if (!dev->power.is_prepared)
+  dev->power.async_suspend = true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_disable_async_suspend(struct device *dev)
+{
+ if (!dev->power.is_prepared)
+  dev->power.async_suspend = false;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_async_suspend_enabled(struct device *dev)
+{
+ return !!dev->power.async_suspend;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_pm_not_required(struct device *dev)
+{
+ return dev->power.no_pm;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_set_pm_not_required(struct device *dev)
+{
+ dev->power.no_pm = true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dev_pm_syscore_device(struct device *dev, bool val)
+{
+
+
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dev_pm_set_driver_flags(struct device *dev, u32 flags)
+{
+ dev->power.driver_flags = flags;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dev_pm_test_driver_flags(struct device *dev, u32 flags)
+{
+ return !!(dev->power.driver_flags & flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_lock(struct device *dev)
+{
+ mutex_lock_nested(&dev->mutex, 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_lock_interruptible(struct device *dev)
+{
+ return mutex_lock_interruptible_nested(&dev->mutex, 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int device_trylock(struct device *dev)
+{
+ return mutex_trylock(&dev->mutex);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_unlock(struct device *dev)
+{
+ mutex_unlock(&dev->mutex);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_lock_assert(struct device *dev)
+{
+ do { ({ int __ret_warn_on = !!(debug_locks && !lock_is_held(&(&dev->mutex)->dep_map)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/device.h"), "i" (760), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (178)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct device_node *dev_of_node(struct device *dev)
+{
+ if (!0 || !dev)
+  return ((void *)0);
+ return dev->of_node;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dev_has_sync_state(struct device *dev)
+{
+ if (!dev)
+  return false;
+ if (dev->driver && dev->driver->sync_state)
+  return true;
+ if (dev->bus && dev->bus->sync_state)
+  return true;
+ return false;
+}
+
+
+
+
+int __attribute__((__warn_unused_result__)) device_register(struct device *dev);
+void device_unregister(struct device *dev);
+void device_initialize(struct device *dev);
+int __attribute__((__warn_unused_result__)) device_add(struct device *dev);
+void device_del(struct device *dev);
+int device_for_each_child(struct device *dev, void *data,
+     int (*fn)(struct device *dev, void *data));
+int device_for_each_child_reverse(struct device *dev, void *data,
+      int (*fn)(struct device *dev, void *data));
+struct device *device_find_child(struct device *dev, void *data,
+     int (*match)(struct device *dev, void *data));
+struct device *device_find_child_by_name(struct device *parent,
+      const char *name);
+int device_rename(struct device *dev, const char *new_name);
+int device_move(struct device *dev, struct device *new_parent,
+  enum dpm_order dpm_order);
+int device_change_owner(struct device *dev, kuid_t kuid, kgid_t kgid);
+const char *device_get_devnode(struct device *dev, umode_t *mode, kuid_t *uid,
+          kgid_t *gid, const char **tmp);
+int device_is_dependent(struct device *dev, void *target);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool device_supports_offline(struct device *dev)
+{
+ return dev->bus && dev->bus->offline && dev->bus->online;
+}
+
+void lock_device_hotplug(void);
+void unlock_device_hotplug(void);
+int lock_device_hotplug_sysfs(void);
+int device_offline(struct device *dev);
+int device_online(struct device *dev);
+void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
+void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
+void device_set_of_node_from_dev(struct device *dev, const struct device *dev2);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int dev_num_vf(struct device *dev)
+{
+ if (dev->bus && dev->bus->num_vf)
+  return dev->bus->num_vf(dev);
+ return 0;
+}
+
+
+
+
+struct device *__root_device_register(const char *name, struct module *owner);
+
+
+
+
+
+void root_device_unregister(struct device *root);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *dev_get_platdata(const struct device *dev)
+{
+ return dev->platform_data;
+}
+
+
+
+
+
+int __attribute__((__warn_unused_result__)) device_bind_driver(struct device *dev);
+void device_release_driver(struct device *dev);
+int __attribute__((__warn_unused_result__)) device_attach(struct device *dev);
+int __attribute__((__warn_unused_result__)) driver_attach(struct device_driver *drv);
+void device_initial_probe(struct device *dev);
+int __attribute__((__warn_unused_result__)) device_reprobe(struct device *dev);
+
+bool device_is_bound(struct device *dev);
+
+
+
+
+__attribute__((__format__(printf, 5, 6))) struct device *
+device_create(struct class *cls, struct device *parent, dev_t devt,
+       void *drvdata, const char *fmt, ...);
+__attribute__((__format__(printf, 6, 7))) struct device *
+device_create_with_groups(struct class *cls, struct device *parent, dev_t devt,
+     void *drvdata, const struct attribute_group **groups,
+     const char *fmt, ...);
+void device_destroy(struct class *cls, dev_t devt);
+
+int __attribute__((__warn_unused_result__)) device_add_groups(struct device *dev,
+       const struct attribute_group **groups);
+void device_remove_groups(struct device *dev,
+     const struct attribute_group **groups);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__)) device_add_group(struct device *dev,
+     const struct attribute_group *grp)
+{
+ const struct attribute_group *groups[] = { grp, ((void *)0) };
+
+ return device_add_groups(dev, groups);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void device_remove_group(struct device *dev,
+           const struct attribute_group *grp)
+{
+ const struct attribute_group *groups[] = { grp, ((void *)0) };
+
+ return device_remove_groups(dev, groups);
+}
+
+int __attribute__((__warn_unused_result__)) devm_device_add_groups(struct device *dev,
+     const struct attribute_group **groups);
+void devm_device_remove_groups(struct device *dev,
+          const struct attribute_group **groups);
+int __attribute__((__warn_unused_result__)) devm_device_add_group(struct device *dev,
+           const struct attribute_group *grp);
+void devm_device_remove_group(struct device *dev,
+         const struct attribute_group *grp);
+
+
+
+
+
+
+
+extern int (*platform_notify)(struct device *dev);
+
+extern int (*platform_notify_remove)(struct device *dev);
+
+
+
+
+
+
+struct device *get_device(struct device *dev);
+void put_device(struct device *dev);
+bool kill_device(struct device *dev);
+
+
+int devtmpfs_mount(void);
+
+
+
+
+
+void device_shutdown(void);
+
+
+const char *dev_driver_string(const struct device *dev);
+
+
+struct device_link *device_link_add(struct device *consumer,
+        struct device *supplier, u32 flags);
+void device_link_del(struct device_link *link);
+void device_link_remove(void *consumer, struct device *supplier);
+void device_links_supplier_sync_state_pause(void);
+void device_links_supplier_sync_state_resume(void);
+
+extern __attribute__((__format__(printf, 3, 4)))
+int dev_err_probe(const struct device *dev, int err, const char *fmt, ...);
+# 9 "./include/linux/cdev.h" 2
+
+struct file_operations;
+struct inode;
+struct module;
+
+struct cdev {
+ struct kobject kobj;
+ struct module *owner;
+ const struct file_operations *ops;
+ struct list_head list;
+ dev_t dev;
+ unsigned int count;
+} __attribute__((__designated_init__));
+
+void cdev_init(struct cdev *, const struct file_operations *);
+
+struct cdev *cdev_alloc(void);
+
+void cdev_put(struct cdev *p);
+
+int cdev_add(struct cdev *, dev_t, unsigned);
+
+void cdev_set_parent(struct cdev *p, struct kobject *kobj);
+int cdev_device_add(struct cdev *cdev, struct device *dev);
+void cdev_device_del(struct cdev *cdev, struct device *dev);
+
+void cdev_del(struct cdev *);
+
+void cd_forget(struct inode *);
+# 4 "./rust/kernel/bindings_helper.h" 2
+# 1 "./include/linux/fs.h" 1
+
+
+
+
+
+# 1 "./include/linux/wait_bit.h" 1
+# 10 "./include/linux/wait_bit.h"
+struct wait_bit_key {
+ void *flags;
+ int bit_nr;
+ unsigned long timeout;
+};
+
+struct wait_bit_queue_entry {
+ struct wait_bit_key key;
+ struct wait_queue_entry wq_entry;
+};
+
+
+
+
+typedef int wait_bit_action_f(struct wait_bit_key *key, int mode);
+
+void __wake_up_bit(struct wait_queue_head *wq_head, void *word, int bit);
+int __wait_on_bit(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
+int __wait_on_bit_lock(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
+void wake_up_bit(void *word, int bit);
+int out_of_line_wait_on_bit(void *word, int, wait_bit_action_f *action, unsigned int mode);
+int out_of_line_wait_on_bit_timeout(void *word, int, wait_bit_action_f *action, unsigned int mode, unsigned long timeout);
+int out_of_line_wait_on_bit_lock(void *word, int, wait_bit_action_f *action, unsigned int mode);
+struct wait_queue_head *bit_waitqueue(void *word, int bit);
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) wait_bit_init(void);
+
+int wake_bit_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
+# 49 "./include/linux/wait_bit.h"
+extern int bit_wait(struct wait_bit_key *key, int mode);
+extern int bit_wait_io(struct wait_bit_key *key, int mode);
+extern int bit_wait_timeout(struct wait_bit_key *key, int mode);
+extern int bit_wait_io_timeout(struct wait_bit_key *key, int mode);
+# 70 "./include/linux/wait_bit.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+wait_on_bit(unsigned long *word, int bit, unsigned mode)
+{
+ do { do { } while (0); } while (0);
+ if (!test_bit(bit, word))
+  return 0;
+ return out_of_line_wait_on_bit(word, bit,
+           bit_wait,
+           mode);
+}
+# 95 "./include/linux/wait_bit.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+wait_on_bit_io(unsigned long *word, int bit, unsigned mode)
+{
+ do { do { } while (0); } while (0);
+ if (!test_bit(bit, word))
+  return 0;
+ return out_of_line_wait_on_bit(word, bit,
+           bit_wait_io,
+           mode);
+}
+# 121 "./include/linux/wait_bit.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+wait_on_bit_timeout(unsigned long *word, int bit, unsigned mode,
+      unsigned long timeout)
+{
+ do { do { } while (0); } while (0);
+ if (!test_bit(bit, word))
+  return 0;
+ return out_of_line_wait_on_bit_timeout(word, bit,
+            bit_wait_timeout,
+            mode, timeout);
+}
+# 149 "./include/linux/wait_bit.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+wait_on_bit_action(unsigned long *word, int bit, wait_bit_action_f *action,
+     unsigned mode)
+{
+ do { do { } while (0); } while (0);
+ if (!test_bit(bit, word))
+  return 0;
+ return out_of_line_wait_on_bit(word, bit, action, mode);
+}
+# 178 "./include/linux/wait_bit.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+wait_on_bit_lock(unsigned long *word, int bit, unsigned mode)
+{
+ do { do { } while (0); } while (0);
+ if (!test_and_set_bit(bit, word))
+  return 0;
+ return out_of_line_wait_on_bit_lock(word, bit, bit_wait, mode);
+}
+# 202 "./include/linux/wait_bit.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+wait_on_bit_lock_io(unsigned long *word, int bit, unsigned mode)
+{
+ do { do { } while (0); } while (0);
+ if (!test_and_set_bit(bit, word))
+  return 0;
+ return out_of_line_wait_on_bit_lock(word, bit, bit_wait_io, mode);
+}
+# 228 "./include/linux/wait_bit.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+wait_on_bit_lock_action(unsigned long *word, int bit, wait_bit_action_f *action,
+   unsigned mode)
+{
+ do { do { } while (0); } while (0);
+ if (!test_and_set_bit(bit, word))
+  return 0;
+ return out_of_line_wait_on_bit_lock(word, bit, action, mode);
+}
+
+extern void init_wait_var_entry(struct wait_bit_queue_entry *wbq_entry, void *var, int flags);
+extern void wake_up_var(void *var);
+extern wait_queue_head_t *__var_waitqueue(void *p);
+# 330 "./include/linux/wait_bit.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_and_wake_up_bit(int bit, void *word)
+{
+ clear_bit_unlock(bit, word);
+
+ __asm__ __volatile__("": : :"memory");
+ wake_up_bit(word, bit);
+}
+# 7 "./include/linux/fs.h" 2
+
+# 1 "./include/linux/dcache.h" 1
+# 9 "./include/linux/dcache.h"
+# 1 "./include/linux/rculist_bl.h" 1
+
+
+
+
+
+
+
+# 1 "./include/linux/list_bl.h" 1
+
+
+
+
+
+# 1 "./include/linux/bit_spinlock.h" 1
+# 16 "./include/linux/bit_spinlock.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bit_spin_lock(int bitnum, unsigned long *addr)
+{
+
+
+
+
+
+
+
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+
+ while (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
+  do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+  do {
+   cpu_relax();
+  } while (test_bit(bitnum, addr));
+  do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ }
+
+ (void)0;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bit_spin_trylock(int bitnum, unsigned long *addr)
+{
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+
+ if (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
+  do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+  return 0;
+ }
+
+ (void)0;
+ return 1;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void bit_spin_unlock(int bitnum, unsigned long *addr)
+{
+
+ do { if (__builtin_expect(!!(!test_bit(bitnum, addr)), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/bit_spinlock.h"), "i" (60), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (179)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0); } while (0);
+
+
+ clear_bit_unlock(bitnum, addr);
+
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+ (void)0;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __bit_spin_unlock(int bitnum, unsigned long *addr)
+{
+
+ do { if (__builtin_expect(!!(!test_bit(bitnum, addr)), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/bit_spinlock.h"), "i" (77), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (180)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0); } while (0);
+
+
+ __clear_bit_unlock(bitnum, addr);
+
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+ (void)0;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bit_spin_is_locked(int bitnum, unsigned long *addr)
+{
+
+ return test_bit(bitnum, addr);
+
+
+
+
+
+}
+# 7 "./include/linux/list_bl.h" 2
+# 34 "./include/linux/list_bl.h"
+struct hlist_bl_head {
+ struct hlist_bl_node *first;
+};
+
+struct hlist_bl_node {
+ struct hlist_bl_node *next, **pprev;
+};
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
+{
+ h->next = ((void *)0);
+ h->pprev = ((void *)0);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hlist_bl_unhashed(const struct hlist_bl_node *h)
+{
+ return !h->pprev;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
+{
+ return (struct hlist_bl_node *)
+  ((unsigned long)h->first & ~1UL);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_set_first(struct hlist_bl_head *h,
+     struct hlist_bl_node *n)
+{
+ do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/list_bl.h"), "i" (66), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (181)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0); } while (0);
+ do { if (__builtin_expect(!!(((unsigned long)h->first & 1UL) != 1UL), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/list_bl.h"), "i" (67), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (182)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0); } while (0)
+                        ;
+ h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hlist_bl_empty(const struct hlist_bl_head *h)
+{
+ return !((unsigned long)({ do { extern void __compiletime_assert_183(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_183(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); }) & ~1UL);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_add_head(struct hlist_bl_node *n,
+     struct hlist_bl_head *h)
+{
+ struct hlist_bl_node *first = hlist_bl_first(h);
+
+ n->next = first;
+ if (first)
+  first->pprev = &n->next;
+ n->pprev = &h->first;
+ hlist_bl_set_first(h, n);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_add_before(struct hlist_bl_node *n,
+           struct hlist_bl_node *next)
+{
+ struct hlist_bl_node **pprev = next->pprev;
+
+ n->pprev = pprev;
+ n->next = next;
+ next->pprev = &n->next;
+
+
+ do { do { extern void __compiletime_assert_184(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_184(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((uintptr_t)n | ((uintptr_t)*pprev & 1UL))); } while (0); } while (0)
+
+                                                           ;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_add_behind(struct hlist_bl_node *n,
+           struct hlist_bl_node *prev)
+{
+ n->next = prev->next;
+ n->pprev = &prev->next;
+ prev->next = n;
+
+ if (n->next)
+  n->next->pprev = &n->next;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __hlist_bl_del(struct hlist_bl_node *n)
+{
+ struct hlist_bl_node *next = n->next;
+ struct hlist_bl_node **pprev = n->pprev;
+
+ do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/list_bl.h"), "i" (120), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (185)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0); } while (0);
+
+
+ do { do { extern void __compiletime_assert_186(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_186(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((unsigned long)next | ((unsigned long)*pprev & 1UL))); } while (0); } while (0)
+
+
+                                                ;
+ if (next)
+  next->pprev = pprev;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_del(struct hlist_bl_node *n)
+{
+ __hlist_bl_del(n);
+ n->next = ((void *) 0x100 + (0xdead000000000000UL));
+ n->pprev = ((void *) 0x122 + (0xdead000000000000UL));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_del_init(struct hlist_bl_node *n)
+{
+ if (!hlist_bl_unhashed(n)) {
+  __hlist_bl_del(n);
+  INIT_HLIST_BL_NODE(n);
+ }
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_lock(struct hlist_bl_head *b)
+{
+ bit_spin_lock(0, (unsigned long *)b);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_unlock(struct hlist_bl_head *b)
+{
+ __bit_spin_unlock(0, (unsigned long *)b);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool hlist_bl_is_locked(struct hlist_bl_head *b)
+{
+ return bit_spin_is_locked(0, (unsigned long *)b);
+}
+# 9 "./include/linux/rculist_bl.h" 2
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
+     struct hlist_bl_node *n)
+{
+ do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/rculist_bl.h"), "i" (14), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (187)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0); } while (0);
+ do { if (__builtin_expect(!!(((unsigned long)h->first & 1UL) != 1UL), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/rculist_bl.h"), "i" (15), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (188)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0); } while (0)
+                        ;
+ do { uintptr_t _r_a_p__v = (uintptr_t)((struct hlist_bl_node *)((unsigned long)n | 1UL)); ; if (__builtin_constant_p((struct hlist_bl_node *)((unsigned long)n | 1UL)) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_189(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((h->first)) == sizeof(char) || sizeof((h->first)) == sizeof(short) || sizeof((h->first)) == sizeof(int) || sizeof((h->first)) == sizeof(long)) || sizeof((h->first)) == sizeof(long long))) __compiletime_assert_189(); } while (0); do { *(volatile typeof((h->first)) *)&((h->first)) = ((typeof(h->first))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_190(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)))) __compiletime_assert_190(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_191(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)) || sizeof(*&h->first) == sizeof(long long))) __compiletime_assert_191(); } while (0); do { *(volatile typeof(*&h->first) *)&(*&h->first) = ((typeof(*((typeof(h->first))_r_a_p__v)) *)((typeof(h->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0)
+                                                                ;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
+{
+ return (struct hlist_bl_node *)
+  ((unsigned long)({ typeof(*(h->first)) *________p1 = (typeof(*(h->first)) *)({ do { extern void __compiletime_assert_192(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((h->first)) == sizeof(char) || sizeof((h->first)) == sizeof(short) || sizeof((h->first)) == sizeof(int) || sizeof((h->first)) == sizeof(long)) || sizeof((h->first)) == sizeof(long long))) __compiletime_assert_192(); } while (0); (*(const volatile typeof( _Generic(((h->first)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((h->first)))) *)&((h->first))); }); do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((hlist_bl_is_locked(h)) || rcu_read_lock_held()))) { __warned = true; lockdep_rcu_suspicious("include/linux/rculist_bl.h", 24, "suspicious rcu_dereference_check() usage"); } } while (0); ; ((typeof(*(h->first)) *)(________p1)); }) & ~1UL);
+}
+# 46 "./include/linux/rculist_bl.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_del_rcu(struct hlist_bl_node *n)
+{
+ __hlist_bl_del(n);
+ n->pprev = ((void *) 0x122 + (0xdead000000000000UL));
+}
+# 71 "./include/linux/rculist_bl.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
+     struct hlist_bl_head *h)
+{
+ struct hlist_bl_node *first;
+
+
+ first = hlist_bl_first(h);
+
+ n->next = first;
+ if (first)
+  first->pprev = &n->next;
+ n->pprev = &h->first;
+
+
+ hlist_bl_set_first_rcu(h, n);
+}
+# 10 "./include/linux/dcache.h" 2
+
+
+
+
+# 1 "./include/linux/lockref.h" 1
+# 25 "./include/linux/lockref.h"
+struct lockref {
+ union {
+
+
+
+  struct {
+   spinlock_t lock;
+   int count;
+  };
+ };
+};
+
+extern void lockref_get(struct lockref *);
+extern int lockref_put_return(struct lockref *);
+extern int lockref_get_not_zero(struct lockref *);
+extern int lockref_put_not_zero(struct lockref *);
+extern int lockref_get_or_lock(struct lockref *);
+extern int lockref_put_or_lock(struct lockref *);
+
+extern void lockref_mark_dead(struct lockref *);
+extern int lockref_get_not_dead(struct lockref *);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __lockref_is_dead(const struct lockref *l)
+{
+ return ((int)l->count < 0);
+}
+# 15 "./include/linux/dcache.h" 2
+# 1 "./include/linux/stringhash.h" 1
+
+
+
+
+
+
+# 1 "./include/linux/hash.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
+# 7 "./include/linux/hash.h" 2
+# 60 "./include/linux/hash.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 __hash_32_generic(u32 val)
+{
+ return val * 0x61C88647;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 hash_32_generic(u32 val, unsigned int bits)
+{
+
+ return __hash_32_generic(val) >> (32 - bits);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) u32 hash_64_generic(u64 val, unsigned int bits)
+{
+
+
+ return val * 0x61C8864680B583EBull >> (64 - bits);
+
+
+
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 hash_ptr(const void *ptr, unsigned int bits)
+{
+ return hash_64_generic((unsigned long)ptr, bits);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 hash32_ptr(const void *ptr)
+{
+ unsigned long val = (unsigned long)ptr;
+
+
+ val ^= (val >> 32);
+
+ return (u32)val;
+}
+# 8 "./include/linux/stringhash.h" 2
+# 42 "./include/linux/stringhash.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
+partial_name_hash(unsigned long c, unsigned long prevhash)
+{
+ return (prevhash + (c << 4) + (c >> 4)) * 11;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int end_name_hash(unsigned long hash)
+{
+ return hash_64_generic(hash, 32);
+}
+# 66 "./include/linux/stringhash.h"
+extern unsigned int __attribute__((__pure__)) full_name_hash(const void *salt, const char *, unsigned int);
+# 77 "./include/linux/stringhash.h"
+extern u64 __attribute__((__pure__)) hashlen_string(const void *salt, const char *name);
+# 16 "./include/linux/dcache.h" 2
+
+
+struct path;
+struct vfsmount;
+# 48 "./include/linux/dcache.h"
+struct qstr {
+ union {
+  struct {
+   u32 hash; u32 len;
+  };
+  u64 hash_len;
+ };
+ const unsigned char *name;
+};
+
+
+
+extern const struct qstr empty_name;
+extern const struct qstr slash_name;
+
+struct dentry_stat_t {
+ long nr_dentry;
+ long nr_unused;
+ long age_limit;
+ long want_pages;
+ long nr_negative;
+ long dummy;
+};
+extern struct dentry_stat_t dentry_stat;
+# 90 "./include/linux/dcache.h"
+struct dentry {
+
+ unsigned int d_flags;
+ seqcount_spinlock_t d_seq;
+ struct hlist_bl_node d_hash;
+ struct dentry *d_parent;
+ struct qstr d_name;
+ struct inode *d_inode;
+
+ unsigned char d_iname[32];
+
+
+ struct lockref d_lockref;
+ const struct dentry_operations *d_op;
+ struct super_block *d_sb;
+ unsigned long d_time;
+ void *d_fsdata;
+
+ union {
+  struct list_head d_lru;
+  wait_queue_head_t *d_wait;
+ };
+ struct list_head d_child;
+ struct list_head d_subdirs;
+
+
+
+ union {
+  struct hlist_node d_alias;
+  struct hlist_bl_node d_in_lookup_hash;
+   struct callback_head d_rcu;
+ } d_u;
+} __attribute__((__designated_init__));
+
+
+
+
+
+
+
+enum dentry_d_lock_class
+{
+ DENTRY_D_LOCK_NORMAL,
+ DENTRY_D_LOCK_NESTED
+};
+
+struct dentry_operations {
+ int (*d_revalidate)(struct dentry *, unsigned int);
+ int (*d_weak_revalidate)(struct dentry *, unsigned int);
+ int (*d_hash)(const struct dentry *, struct qstr *);
+ int (*d_compare)(const struct dentry *,
+   unsigned int, const char *, const struct qstr *);
+ int (*d_delete)(const struct dentry *);
+ int (*d_init)(struct dentry *);
+ void (*d_release)(struct dentry *);
+ void (*d_prune)(struct dentry *);
+ void (*d_iput)(struct dentry *, struct inode *);
+ char *(*d_dname)(struct dentry *, char *, int);
+ struct vfsmount *(*d_automount)(struct path *);
+ int (*d_manage)(const struct path *, bool);
+ struct dentry *(*d_real)(struct dentry *, const struct inode *);
+} __attribute__((__aligned__((1 << (6)))));
+# 224 "./include/linux/dcache.h"
+extern seqlock_t rename_lock;
+
+
+
+
+extern void d_instantiate(struct dentry *, struct inode *);
+extern void d_instantiate_new(struct dentry *, struct inode *);
+extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
+extern struct dentry * d_instantiate_anon(struct dentry *, struct inode *);
+extern void __d_drop(struct dentry *dentry);
+extern void d_drop(struct dentry *dentry);
+extern void d_delete(struct dentry *);
+extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);
+
+
+extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
+extern struct dentry * d_alloc_anon(struct super_block *);
+extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
+     wait_queue_head_t *);
+extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
+extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
+extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
+extern struct dentry *d_find_any_alias(struct inode *inode);
+extern struct dentry * d_obtain_alias(struct inode *);
+extern struct dentry * d_obtain_root(struct inode *);
+extern void shrink_dcache_sb(struct super_block *);
+extern void shrink_dcache_parent(struct dentry *);
+extern void shrink_dcache_for_umount(struct super_block *);
+extern void d_invalidate(struct dentry *);
+
+
+extern struct dentry * d_make_root(struct inode *);
+
+
+extern void d_genocide(struct dentry *);
+
+extern void d_tmpfile(struct dentry *, struct inode *);
+
+extern struct dentry *d_find_alias(struct inode *);
+extern void d_prune_aliases(struct inode *);
+
+extern struct dentry *d_find_alias_rcu(struct inode *);
+
+
+extern int path_has_submounts(const struct path *);
+
+
+
+
+extern void d_rehash(struct dentry *);
+
+extern void d_add(struct dentry *, struct inode *);
+
+
+extern void d_move(struct dentry *, struct dentry *);
+extern void d_exchange(struct dentry *, struct dentry *);
+extern struct dentry *d_ancestor(struct dentry *, struct dentry *);
+
+
+extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
+extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
+extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
+extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
+    const struct qstr *name, unsigned *seq);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned d_count(const struct dentry *dentry)
+{
+ return dentry->d_lockref.count;
+}
+
+
+
+
+extern __attribute__((__format__(printf, 4, 5)))
+char *dynamic_dname(struct dentry *, char *, int, const char *, ...);
+
+extern char *__d_path(const struct path *, const struct path *, char *, int);
+extern char *d_absolute_path(const struct path *, char *, int);
+extern char *d_path(const struct path *, char *, int);
+extern char *dentry_path_raw(struct dentry *, char *, int);
+extern char *dentry_path(struct dentry *, char *, int);
+# 316 "./include/linux/dcache.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct dentry *dget_dlock(struct dentry *dentry)
+{
+ if (dentry)
+  dentry->d_lockref.count++;
+ return dentry;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct dentry *dget(struct dentry *dentry)
+{
+ if (dentry)
+  lockref_get(&dentry->d_lockref);
+ return dentry;
+}
+
+extern struct dentry *dget_parent(struct dentry *dentry);
+# 339 "./include/linux/dcache.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int d_unhashed(const struct dentry *dentry)
+{
+ return hlist_bl_unhashed(&dentry->d_hash);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int d_unlinked(const struct dentry *dentry)
+{
+ return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int cant_mount(const struct dentry *dentry)
+{
+ return (dentry->d_flags & 0x00000100);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dont_mount(struct dentry *dentry)
+{
+ spin_lock(&dentry->d_lockref.lock);
+ dentry->d_flags |= 0x00000100;
+ spin_unlock(&dentry->d_lockref.lock);
+}
+
+extern void __d_lookup_done(struct dentry *);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int d_in_lookup(const struct dentry *dentry)
+{
+ return dentry->d_flags & 0x10000000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void d_lookup_done(struct dentry *dentry)
+{
+ if (__builtin_expect(!!(d_in_lookup(dentry)), 0)) {
+  spin_lock(&dentry->d_lockref.lock);
+  __d_lookup_done(dentry);
+  spin_unlock(&dentry->d_lockref.lock);
+ }
+}
+
+extern void dput(struct dentry *);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_managed(const struct dentry *dentry)
+{
+ return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_mountpoint(const struct dentry *dentry)
+{
+ return dentry->d_flags & 0x00010000;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned __d_entry_type(const struct dentry *dentry)
+{
+ return dentry->d_flags & 0x00700000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_miss(const struct dentry *dentry)
+{
+ return __d_entry_type(dentry) == 0x00000000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_whiteout(const struct dentry *dentry)
+{
+ return __d_entry_type(dentry) == 0x00100000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_can_lookup(const struct dentry *dentry)
+{
+ return __d_entry_type(dentry) == 0x00200000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_autodir(const struct dentry *dentry)
+{
+ return __d_entry_type(dentry) == 0x00300000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_dir(const struct dentry *dentry)
+{
+ return d_can_lookup(dentry) || d_is_autodir(dentry);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_symlink(const struct dentry *dentry)
+{
+ return __d_entry_type(dentry) == 0x00600000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_reg(const struct dentry *dentry)
+{
+ return __d_entry_type(dentry) == 0x00400000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_special(const struct dentry *dentry)
+{
+ return __d_entry_type(dentry) == 0x00500000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_file(const struct dentry *dentry)
+{
+ return d_is_reg(dentry) || d_is_special(dentry);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_negative(const struct dentry *dentry)
+{
+
+ return d_is_miss(dentry);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_flags_negative(unsigned flags)
+{
+ return (flags & 0x00700000) == 0x00000000;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_positive(const struct dentry *dentry)
+{
+ return !d_is_negative(dentry);
+}
+# 473 "./include/linux/dcache.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_really_is_negative(const struct dentry *dentry)
+{
+ return dentry->d_inode == ((void *)0);
+}
+# 491 "./include/linux/dcache.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_really_is_positive(const struct dentry *dentry)
+{
+ return dentry->d_inode != ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int simple_positive(const struct dentry *dentry)
+{
+ return d_really_is_positive(dentry) && !d_unhashed(dentry);
+}
+
+extern void d_set_fallthru(struct dentry *dentry);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool d_is_fallthru(const struct dentry *dentry)
+{
+ return dentry->d_flags & 0x01000000;
+}
+
+
+extern int sysctl_vfs_cache_pressure;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long vfs_pressure_ratio(unsigned long val)
+{
+ return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
+}
+# 523 "./include/linux/dcache.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct inode *d_inode(const struct dentry *dentry)
+{
+ return dentry->d_inode;
+}
+# 535 "./include/linux/dcache.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct inode *d_inode_rcu(const struct dentry *dentry)
+{
+ return ({ do { extern void __compiletime_assert_193(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(dentry->d_inode) == sizeof(char) || sizeof(dentry->d_inode) == sizeof(short) || sizeof(dentry->d_inode) == sizeof(int) || sizeof(dentry->d_inode) == sizeof(long)) || sizeof(dentry->d_inode) == sizeof(long long))) __compiletime_assert_193(); } while (0); (*(const volatile typeof( _Generic((dentry->d_inode), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dentry->d_inode))) *)&(dentry->d_inode)); });
+}
+# 550 "./include/linux/dcache.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct inode *d_backing_inode(const struct dentry *upper)
+{
+ struct inode *inode = upper->d_inode;
+
+ return inode;
+}
+# 567 "./include/linux/dcache.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct dentry *d_backing_dentry(struct dentry *upper)
+{
+ return upper;
+}
+# 582 "./include/linux/dcache.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct dentry *d_real(struct dentry *dentry,
+        const struct inode *inode)
+{
+ if (__builtin_expect(!!(dentry->d_flags & 0x04000000), 0))
+  return dentry->d_op->d_real(dentry, inode);
+ else
+  return dentry;
+}
+# 598 "./include/linux/dcache.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct inode *d_real_inode(const struct dentry *dentry)
+{
+
+ return d_backing_inode(d_real((struct dentry *) dentry, ((void *)0)));
+}
+
+struct name_snapshot {
+ struct qstr name;
+ unsigned char inline_name[32];
+};
+void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
+void release_dentry_name_snapshot(struct name_snapshot *);
+# 9 "./include/linux/fs.h" 2
+# 1 "./include/linux/path.h" 1
+
+
+
+
+struct dentry;
+struct vfsmount;
+
+struct path {
+ struct vfsmount *mnt;
+ struct dentry *dentry;
+} __attribute__((__designated_init__));
+
+extern void path_get(const struct path *);
+extern void path_put(const struct path *);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int path_equal(const struct path *path1, const struct path *path2)
+{
+ return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void path_put_init(struct path *path)
+{
+ path_put(path);
+ *path = (struct path) { };
+}
+# 10 "./include/linux/fs.h" 2
+
+
+
+# 1 "./include/linux/list_lru.h" 1
+# 13 "./include/linux/list_lru.h"
+# 1 "./include/linux/shrinker.h" 1
+# 12 "./include/linux/shrinker.h"
+struct shrink_control {
+ gfp_t gfp_mask;
+
+
+ int nid;
+
+
+
+
+
+
+ unsigned long nr_to_scan;
+
+
+
+
+
+
+ unsigned long nr_scanned;
+
+
+ struct mem_cgroup *memcg;
+};
+# 60 "./include/linux/shrinker.h"
+struct shrinker {
+ unsigned long (*count_objects)(struct shrinker *,
+           struct shrink_control *sc);
+ unsigned long (*scan_objects)(struct shrinker *,
+          struct shrink_control *sc);
+
+ long batch;
+ int seeks;
+ unsigned flags;
+
+
+ struct list_head list;
+
+
+
+
+
+ atomic_long_t *nr_deferred;
+};
+# 90 "./include/linux/shrinker.h"
+extern int prealloc_shrinker(struct shrinker *shrinker);
+extern void register_shrinker_prepared(struct shrinker *shrinker);
+extern int register_shrinker(struct shrinker *shrinker);
+extern void unregister_shrinker(struct shrinker *shrinker);
+extern void free_prealloced_shrinker(struct shrinker *shrinker);
+# 14 "./include/linux/list_lru.h" 2
+
+struct mem_cgroup;
+
+
+enum lru_status {
+ LRU_REMOVED,
+ LRU_REMOVED_RETRY,
+
+ LRU_ROTATE,
+ LRU_SKIP,
+ LRU_RETRY,
+
+};
+
+struct list_lru_one {
+ struct list_head list;
+
+ long nr_items;
+};
+
+struct list_lru_memcg {
+ struct callback_head rcu;
+
+ struct list_lru_one *lru[];
+};
+
+struct list_lru_node {
+
+ spinlock_t lock;
+
+ struct list_lru_one lru;
+
+
+
+
+ long nr_items;
+} ;
+
+struct list_lru {
+ struct list_lru_node *node;
+
+
+
+
+
+};
+
+void list_lru_destroy(struct list_lru *lru);
+int __list_lru_init(struct list_lru *lru, bool memcg_aware,
+      struct lock_class_key *key, struct shrinker *shrinker);
+# 72 "./include/linux/list_lru.h"
+int memcg_update_all_list_lrus(int num_memcgs);
+void memcg_drain_all_list_lrus(int src_idx, struct mem_cgroup *dst_memcg);
+# 91 "./include/linux/list_lru.h"
+bool list_lru_add(struct list_lru *lru, struct list_head *item);
+# 104 "./include/linux/list_lru.h"
+bool list_lru_del(struct list_lru *lru, struct list_head *item);
+# 116 "./include/linux/list_lru.h"
+unsigned long list_lru_count_one(struct list_lru *lru,
+     int nid, struct mem_cgroup *memcg);
+unsigned long list_lru_count_node(struct list_lru *lru, int nid);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long list_lru_shrink_count(struct list_lru *lru,
+        struct shrink_control *sc)
+{
+ return list_lru_count_one(lru, sc->nid, sc->memcg);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long list_lru_count(struct list_lru *lru)
+{
+ long count = 0;
+ int nid;
+
+ for ( (nid) = 0; (nid) == 0; (nid) = 1)
+  count += list_lru_count_node(lru, nid);
+
+ return count;
+}
+
+void list_lru_isolate(struct list_lru_one *list, struct list_head *item);
+void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,
+      struct list_head *head);
+
+typedef enum lru_status (*list_lru_walk_cb)(struct list_head *item,
+  struct list_lru_one *list, spinlock_t *lock, void *cb_arg);
+# 166 "./include/linux/list_lru.h"
+unsigned long list_lru_walk_one(struct list_lru *lru,
+    int nid, struct mem_cgroup *memcg,
+    list_lru_walk_cb isolate, void *cb_arg,
+    unsigned long *nr_to_walk);
+# 183 "./include/linux/list_lru.h"
+unsigned long list_lru_walk_one_irq(struct list_lru *lru,
+        int nid, struct mem_cgroup *memcg,
+        list_lru_walk_cb isolate, void *cb_arg,
+        unsigned long *nr_to_walk);
+unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
+     list_lru_walk_cb isolate, void *cb_arg,
+     unsigned long *nr_to_walk);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
+list_lru_shrink_walk(struct list_lru *lru, struct shrink_control *sc,
+       list_lru_walk_cb isolate, void *cb_arg)
+{
+ return list_lru_walk_one(lru, sc->nid, sc->memcg, isolate, cb_arg,
+     &sc->nr_to_scan);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
+list_lru_shrink_walk_irq(struct list_lru *lru, struct shrink_control *sc,
+    list_lru_walk_cb isolate, void *cb_arg)
+{
+ return list_lru_walk_one_irq(lru, sc->nid, sc->memcg, isolate, cb_arg,
+         &sc->nr_to_scan);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long
+list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
+       void *cb_arg, unsigned long nr_to_walk)
+{
+ long isolated = 0;
+ int nid;
+
+ for ( (nid) = 0; (nid) == 0; (nid) = 1) {
+  isolated += list_lru_walk_node(lru, nid, isolate,
+            cb_arg, &nr_to_walk);
+  if (nr_to_walk <= 0)
+   break;
+ }
+ return isolated;
+}
+# 14 "./include/linux/fs.h" 2
+# 24 "./include/linux/fs.h"
+# 1 "./include/linux/capability.h" 1
+# 16 "./include/linux/capability.h"
+# 1 "./include/uapi/linux/capability.h" 1
+# 39 "./include/uapi/linux/capability.h"
+typedef struct __user_cap_header_struct {
+ __u32 version;
+ int pid;
+} *cap_user_header_t;
+
+typedef struct __user_cap_data_struct {
+        __u32 effective;
+        __u32 permitted;
+        __u32 inheritable;
+} *cap_user_data_t;
+# 72 "./include/uapi/linux/capability.h"
+struct vfs_cap_data {
+ __le32 magic_etc;
+ struct {
+  __le32 permitted;
+  __le32 inheritable;
+ } data[2];
+};
+
+
+
+
+struct vfs_ns_cap_data {
+ __le32 magic_etc;
+ struct {
+  __le32 permitted;
+  __le32 inheritable;
+ } data[2];
+ __le32 rootid;
+};
+# 17 "./include/linux/capability.h" 2
+
+
+
+
+
+extern int file_caps_enabled;
+
+typedef struct kernel_cap_struct {
+ __u32 cap[2];
+} kernel_cap_t;
+
+
+struct cpu_vfs_cap_data {
+ __u32 magic_etc;
+ kernel_cap_t permitted;
+ kernel_cap_t inheritable;
+ kuid_t rootid;
+};
+
+
+
+
+
+struct file;
+struct inode;
+struct dentry;
+struct task_struct;
+struct user_namespace;
+
+extern const kernel_cap_t __cap_empty_set;
+extern const kernel_cap_t __cap_init_eff_set;
+# 118 "./include/linux/capability.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_combine(const kernel_cap_t a,
+           const kernel_cap_t b)
+{
+ kernel_cap_t dest;
+ do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] | b.cap[__capi]; } } while (0);
+ return dest;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_intersect(const kernel_cap_t a,
+      const kernel_cap_t b)
+{
+ kernel_cap_t dest;
+ do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] & b.cap[__capi]; } } while (0);
+ return dest;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop(const kernel_cap_t a,
+        const kernel_cap_t drop)
+{
+ kernel_cap_t dest;
+ do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] &~ drop.cap[__capi]; } } while (0);
+ return dest;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_invert(const kernel_cap_t c)
+{
+ kernel_cap_t dest;
+ do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ c.cap[__capi]; } } while (0);
+ return dest;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cap_isclear(const kernel_cap_t a)
+{
+ unsigned __capi;
+ for (__capi = 0; __capi < 2; ++__capi) {
+  if (a.cap[__capi] != 0)
+   return false;
+ }
+ return true;
+}
+# 166 "./include/linux/capability.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cap_issubset(const kernel_cap_t a, const kernel_cap_t set)
+{
+ kernel_cap_t dest;
+ dest = cap_drop(a, set);
+ return cap_isclear(dest);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
+{
+ const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
+ return cap_drop(a, __cap_fs_set);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,
+         const kernel_cap_t permitted)
+{
+ const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
+ return cap_combine(a,
+      cap_intersect(permitted, __cap_fs_set));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
+{
+ const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
+ return cap_drop(a, __cap_fs_set);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,
+           const kernel_cap_t permitted)
+{
+ const kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
+ return cap_combine(a,
+      cap_intersect(permitted, __cap_nfsd_set));
+}
+# 215 "./include/linux/capability.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool has_capability(struct task_struct *t, int cap)
+{
+ return true;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool has_ns_capability(struct task_struct *t,
+         struct user_namespace *ns, int cap)
+{
+ return true;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool has_capability_noaudit(struct task_struct *t, int cap)
+{
+ return true;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool has_ns_capability_noaudit(struct task_struct *t,
+          struct user_namespace *ns, int cap)
+{
+ return true;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool capable(int cap)
+{
+ return true;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ns_capable(struct user_namespace *ns, int cap)
+{
+ return true;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ns_capable_noaudit(struct user_namespace *ns, int cap)
+{
+ return true;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool ns_capable_setid(struct user_namespace *ns, int cap)
+{
+ return true;
+}
+
+bool privileged_wrt_inode_uidgid(struct user_namespace *ns,
+     struct user_namespace *mnt_userns,
+     const struct inode *inode);
+bool capable_wrt_inode_uidgid(struct user_namespace *mnt_userns,
+         const struct inode *inode, int cap);
+extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
+extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool perfmon_capable(void)
+{
+ return capable(38) || capable(21);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool bpf_capable(void)
+{
+ return capable(39) || capable(21);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool checkpoint_restore_ns_capable(struct user_namespace *ns)
+{
+ return ns_capable(ns, 40) ||
+  ns_capable(ns, 21);
+}
+
+
+int get_vfs_caps_from_disk(struct user_namespace *mnt_userns,
+      const struct dentry *dentry,
+      struct cpu_vfs_cap_data *cpu_caps);
+
+int cap_convert_nscap(struct user_namespace *mnt_userns, struct dentry *dentry,
+        const void **ivalue, size_t size);
+# 25 "./include/linux/fs.h" 2
+# 1 "./include/linux/semaphore.h" 1
+# 15 "./include/linux/semaphore.h"
+struct semaphore {
+ raw_spinlock_t lock;
+ unsigned int count;
+ struct list_head wait_list;
+};
+# 31 "./include/linux/semaphore.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sema_init(struct semaphore *sem, int val)
+{
+ static struct lock_class_key __key;
+ *sem = (struct semaphore) { .lock = (raw_spinlock_t) { .raw_lock = { 1 }, .magic = 0xdead4ead, .owner_cpu = -1, .owner = ((void *)-1L), .dep_map = { .name = "(*sem).lock", .wait_type_inner = LD_WAIT_SPIN, } }, .count = val, .wait_list = { &((*sem).wait_list), &((*sem).wait_list) }, };
+ lockdep_init_map(&sem->lock.dep_map, "semaphore->lock", &__key, 0);
+}
+
+extern void down(struct semaphore *sem);
+extern int __attribute__((__warn_unused_result__)) down_interruptible(struct semaphore *sem);
+extern int __attribute__((__warn_unused_result__)) down_killable(struct semaphore *sem);
+extern int __attribute__((__warn_unused_result__)) down_trylock(struct semaphore *sem);
+extern int __attribute__((__warn_unused_result__)) down_timeout(struct semaphore *sem, long jiffies);
+extern void up(struct semaphore *sem);
+# 26 "./include/linux/fs.h" 2
+# 1 "./include/linux/fcntl.h" 1
+
+
+
+
+
+# 1 "./include/uapi/linux/fcntl.h" 1
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/fcntl.h" 1
+# 1 "./include/uapi/asm-generic/fcntl.h" 1
+# 156 "./include/uapi/asm-generic/fcntl.h"
+struct f_owner_ex {
+ int type;
+ __kernel_pid_t pid;
+};
+# 196 "./include/uapi/asm-generic/fcntl.h"
+struct flock {
+ short l_type;
+ short l_whence;
+ __kernel_off_t l_start;
+ __kernel_off_t l_len;
+ __kernel_pid_t l_pid;
+
+};
+
+
+
+
+
+
+
+struct flock64 {
+ short l_type;
+ short l_whence;
+ __kernel_loff_t l_start;
+ __kernel_loff_t l_len;
+ __kernel_pid_t l_pid;
+
+};
+# 2 "./arch/x86/include/generated/uapi/asm/fcntl.h" 2
+# 6 "./include/uapi/linux/fcntl.h" 2
+# 1 "./include/uapi/linux/openat2.h" 1
+# 19 "./include/uapi/linux/openat2.h"
+struct open_how {
+ __u64 flags;
+ __u64 mode;
+ __u64 resolve;
+};
+# 7 "./include/uapi/linux/fcntl.h" 2
+# 7 "./include/linux/fcntl.h" 2
+# 27 "./include/linux/fs.h" 2
+
+
+
+# 1 "./include/linux/migrate_mode.h" 1
+# 15 "./include/linux/migrate_mode.h"
+enum migrate_mode {
+ MIGRATE_ASYNC,
+ MIGRATE_SYNC_LIGHT,
+ MIGRATE_SYNC,
+ MIGRATE_SYNC_NO_COPY,
+};
+# 31 "./include/linux/fs.h" 2
+
+
+# 1 "./include/linux/percpu-rwsem.h" 1
+
+
+
+
+
+
+# 1 "./include/linux/rcuwait.h" 1
+
+
+
+
+
+# 1 "./include/linux/sched/signal.h" 1
+
+
+
+
+
+# 1 "./include/linux/signal.h" 1
+# 9 "./include/linux/signal.h"
+struct task_struct;
+
+
+extern int print_fatal_signals;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void copy_siginfo(kernel_siginfo_t *to,
+    const kernel_siginfo_t *from)
+{
+ memcpy(to, from, sizeof(*to));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_siginfo(kernel_siginfo_t *info)
+{
+ memset(info, 0, sizeof(*info));
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void copy_siginfo_to_external(siginfo_t *to,
+         const kernel_siginfo_t *from)
+{
+ memcpy(to, from, sizeof(*from));
+ memset(((char *)to) + sizeof(struct kernel_siginfo), 0,
+  (sizeof(struct siginfo) - sizeof(struct kernel_siginfo)));
+}
+
+int copy_siginfo_to_user(siginfo_t *to, const kernel_siginfo_t *from);
+int copy_siginfo_from_user(kernel_siginfo_t *to, const siginfo_t *from);
+
+enum siginfo_layout {
+ SIL_KILL,
+ SIL_TIMER,
+ SIL_POLL,
+ SIL_FAULT,
+ SIL_FAULT_MCEERR,
+ SIL_FAULT_BNDERR,
+ SIL_FAULT_PKUERR,
+ SIL_CHLD,
+ SIL_RT,
+ SIL_SYS,
+};
+
+enum siginfo_layout siginfo_layout(unsigned sig, int si_code);
+# 62 "./include/linux/signal.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigaddset(sigset_t *set, int _sig)
+{
+ unsigned long sig = _sig - 1;
+ if ((64 / 64) == 1)
+  set->sig[0] |= 1UL << sig;
+ else
+  set->sig[sig / 64] |= 1UL << (sig % 64);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigdelset(sigset_t *set, int _sig)
+{
+ unsigned long sig = _sig - 1;
+ if ((64 / 64) == 1)
+  set->sig[0] &= ~(1UL << sig);
+ else
+  set->sig[sig / 64] &= ~(1UL << (sig % 64));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sigismember(sigset_t *set, int _sig)
+{
+ unsigned long sig = _sig - 1;
+ if ((64 / 64) == 1)
+  return 1 & (set->sig[0] >> sig);
+ else
+  return 1 & (set->sig[sig / 64] >> (sig % 64));
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sigisemptyset(sigset_t *set)
+{
+ switch ((64 / 64)) {
+ case 4:
+  return (set->sig[3] | set->sig[2] |
+   set->sig[1] | set->sig[0]) == 0;
+ case 2:
+  return (set->sig[1] | set->sig[0]) == 0;
+ case 1:
+  return set->sig[0] == 0;
+ default:
+  do { extern void __compiletime_assert_194(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_194(); } while (0);
+  return 0;
+ }
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sigequalsets(const sigset_t *set1, const sigset_t *set2)
+{
+ switch ((64 / 64)) {
+ case 4:
+  return (set1->sig[3] == set2->sig[3]) &&
+   (set1->sig[2] == set2->sig[2]) &&
+   (set1->sig[1] == set2->sig[1]) &&
+   (set1->sig[0] == set2->sig[0]);
+ case 2:
+  return (set1->sig[1] == set2->sig[1]) &&
+   (set1->sig[0] == set2->sig[0]);
+ case 1:
+  return set1->sig[0] == set2->sig[0];
+ }
+ return 0;
+}
+# 155 "./include/linux/signal.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigorsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) | (b3)); r->sig[2] = ((a2) | (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) | (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) | (b0)); break; default: do { extern void __compiletime_assert_195(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_195(); } while (0); } }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigandsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & (b3)); r->sig[2] = ((a2) & (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & (b0)); break; default: do { extern void __compiletime_assert_196(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_196(); } while (0); } }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigandnsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & ~(b3)); r->sig[2] = ((a2) & ~(b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & ~(b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & ~(b0)); break; default: do { extern void __compiletime_assert_197(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_197(); } while (0); } }
+# 185 "./include/linux/signal.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void signotset(sigset_t *set) { switch ((64 / 64)) { case 4: set->sig[3] = (~(set->sig[3])); set->sig[2] = (~(set->sig[2])); __attribute__((__fallthrough__)); case 2: set->sig[1] = (~(set->sig[1])); __attribute__((__fallthrough__)); case 1: set->sig[0] = (~(set->sig[0])); break; default: do { extern void __compiletime_assert_198(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_198(); } while (0); } }
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigemptyset(sigset_t *set)
+{
+ switch ((64 / 64)) {
+ default:
+  memset(set, 0, sizeof(sigset_t));
+  break;
+ case 2: set->sig[1] = 0;
+  __attribute__((__fallthrough__));
+ case 1: set->sig[0] = 0;
+  break;
+ }
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigfillset(sigset_t *set)
+{
+ switch ((64 / 64)) {
+ default:
+  memset(set, -1, sizeof(sigset_t));
+  break;
+ case 2: set->sig[1] = -1;
+  __attribute__((__fallthrough__));
+ case 1: set->sig[0] = -1;
+  break;
+ }
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigaddsetmask(sigset_t *set, unsigned long mask)
+{
+ set->sig[0] |= mask;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sigdelsetmask(sigset_t *set, unsigned long mask)
+{
+ set->sig[0] &= ~mask;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sigtestsetmask(sigset_t *set, unsigned long mask)
+{
+ return (set->sig[0] & mask) != 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void siginitset(sigset_t *set, unsigned long mask)
+{
+ set->sig[0] = mask;
+ switch ((64 / 64)) {
+ default:
+  memset(&set->sig[1], 0, sizeof(long)*((64 / 64)-1));
+  break;
+ case 2: set->sig[1] = 0;
+  break;
+ case 1: ;
+ }
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void siginitsetinv(sigset_t *set, unsigned long mask)
+{
+ set->sig[0] = ~mask;
+ switch ((64 / 64)) {
+ default:
+  memset(&set->sig[1], -1, sizeof(long)*((64 / 64)-1));
+  break;
+ case 2: set->sig[1] = -1;
+  break;
+ case 1: ;
+ }
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_sigpending(struct sigpending *sig)
+{
+ sigemptyset(&sig->signal);
+ INIT_LIST_HEAD(&sig->list);
+}
+
+extern void flush_sigqueue(struct sigpending *queue);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int valid_signal(unsigned long sig)
+{
+ return sig <= 64 ? 1 : 0;
+}
+
+struct timespec;
+struct pt_regs;
+enum pid_type;
+
+extern int next_signal(struct sigpending *pending, sigset_t *mask);
+extern int do_send_sig_info(int sig, struct kernel_siginfo *info,
+    struct task_struct *p, enum pid_type type);
+extern int group_send_sig_info(int sig, struct kernel_siginfo *info,
+          struct task_struct *p, enum pid_type type);
+extern int __group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
+extern int sigprocmask(int, sigset_t *, sigset_t *);
+extern void set_current_blocked(sigset_t *);
+extern void __set_current_blocked(const sigset_t *);
+extern int show_unhandled_signals;
+
+extern bool get_signal(struct ksignal *ksig);
+extern void signal_setup_done(int failed, struct ksignal *ksig, int stepping);
+extern void exit_signals(struct task_struct *tsk);
+extern void kernel_sigaction(int, __sighandler_t);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void allow_signal(int sig)
+{
+
+
+
+
+
+ kernel_sigaction(sig, (( __sighandler_t)2));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void allow_kernel_signal(int sig)
+{
+
+
+
+
+
+ kernel_sigaction(sig, (( __sighandler_t)3));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void disallow_signal(int sig)
+{
+ kernel_sigaction(sig, (( __sighandler_t)1));
+}
+
+extern struct kmem_cache *sighand_cachep;
+
+extern bool unhandled_signal(struct task_struct *tsk, int sig);
+# 452 "./include/linux/signal.h"
+void signals_init(void);
+
+int restore_altstack(const stack_t *);
+int __save_altstack(stack_t *, unsigned long);
+# 468 "./include/linux/signal.h"
+struct seq_file;
+extern void render_sigset_t(struct seq_file *, const char *, sigset_t *);
+# 478 "./include/linux/signal.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *arch_untagged_si_addr(void *addr,
+       unsigned long sig,
+       unsigned long si_code)
+{
+ return addr;
+}
+# 7 "./include/linux/sched/signal.h" 2
+
+# 1 "./include/linux/sched/jobctl.h" 1
+
+
+
+
+
+
+struct task_struct;
+# 35 "./include/linux/sched/jobctl.h"
+extern bool task_set_jobctl_pending(struct task_struct *task, unsigned long mask);
+extern void task_clear_jobctl_trapping(struct task_struct *task);
+extern void task_clear_jobctl_pending(struct task_struct *task, unsigned long mask);
+# 9 "./include/linux/sched/signal.h" 2
+# 1 "./include/linux/sched/task.h" 1
+# 11 "./include/linux/sched/task.h"
+# 1 "./include/linux/uaccess.h" 1
+
+
+
+
+# 1 "./include/linux/fault-inject-usercopy.h" 1
+# 18 "./include/linux/fault-inject-usercopy.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool should_fail_usercopy(void) { return false; }
+# 6 "./include/linux/uaccess.h" 2
+
+
+
+
+
+# 1 "./arch/x86/include/asm/uaccess.h" 1
+# 12 "./arch/x86/include/asm/uaccess.h"
+# 1 "./arch/x86/include/asm/smap.h" 1
+# 84 "./arch/x86/include/asm/smap.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clac(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void stac(void) { }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long smap_save(void) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void smap_restore(unsigned long flags) { }
+# 13 "./arch/x86/include/asm/uaccess.h" 2
+# 1 "./arch/x86/include/asm/extable.h" 1
+# 17 "./arch/x86/include/asm/extable.h"
+struct exception_table_entry {
+ int insn, fixup, handler;
+};
+struct pt_regs;
+# 32 "./arch/x86/include/asm/extable.h"
+enum handler_type {
+ EX_HANDLER_NONE,
+ EX_HANDLER_FAULT,
+ EX_HANDLER_UACCESS,
+ EX_HANDLER_OTHER
+};
+
+extern int fixup_exception(struct pt_regs *regs, int trapnr,
+      unsigned long error_code, unsigned long fault_addr);
+extern int fixup_bug(struct pt_regs *regs, int trapnr);
+extern enum handler_type ex_get_fault_handler_type(unsigned long ip);
+extern void early_fixup_exception(struct pt_regs *regs, int trapnr);
+# 14 "./arch/x86/include/asm/uaccess.h" 2
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __chk_range_not_ok(unsigned long addr, unsigned long size, unsigned long limit)
+{
+
+
+
+
+
+
+
+ if (__builtin_constant_p(size))
+  return __builtin_expect(!!(addr > limit - size), 0);
+
+
+ addr += size;
+ if (__builtin_expect(!!(addr < size), 0))
+  return true;
+ return __builtin_expect(!!(addr > limit), 0);
+}
+# 75 "./arch/x86/include/asm/uaccess.h"
+extern int __get_user_1(void);
+extern int __get_user_2(void);
+extern int __get_user_4(void);
+extern int __get_user_8(void);
+extern int __get_user_nocheck_1(void);
+extern int __get_user_nocheck_2(void);
+extern int __get_user_nocheck_4(void);
+extern int __get_user_nocheck_8(void);
+extern int __get_user_bad(void);
+# 196 "./arch/x86/include/asm/uaccess.h"
+extern void __put_user_bad(void);
+
+
+
+
+
+extern void __put_user_1(void);
+extern void __put_user_2(void);
+extern void __put_user_4(void);
+extern void __put_user_8(void);
+extern void __put_user_nocheck_1(void);
+extern void __put_user_nocheck_2(void);
+extern void __put_user_nocheck_4(void);
+extern void __put_user_nocheck_8(void);
+# 417 "./arch/x86/include/asm/uaccess.h"
+struct __large_struct { unsigned long buf[100]; };
+# 432 "./arch/x86/include/asm/uaccess.h"
+extern unsigned long
+copy_from_user_nmi(void *to, const void *from, unsigned long n);
+extern __attribute__((__warn_unused_result__)) long
+strncpy_from_user(char *dst, const char *src, long count);
+
+extern __attribute__((__warn_unused_result__)) long strnlen_user(const char *str, long n);
+
+unsigned long __attribute__((__warn_unused_result__)) clear_user(void *mem, unsigned long len);
+unsigned long __attribute__((__warn_unused_result__)) __clear_user(void *mem, unsigned long len);
+
+
+unsigned long __attribute__((__warn_unused_result__))
+copy_mc_to_kernel(void *to, const void *from, unsigned len);
+
+
+unsigned long __attribute__((__warn_unused_result__))
+copy_mc_to_user(void *to, const void *from, unsigned len);
+# 465 "./arch/x86/include/asm/uaccess.h"
+# 1 "./arch/x86/include/asm/uaccess_64.h" 1
+# 20 "./arch/x86/include/asm/uaccess_64.h"
+__attribute__((__warn_unused_result__)) unsigned long
+copy_user_enhanced_fast_string(void *to, const void *from, unsigned len);
+__attribute__((__warn_unused_result__)) unsigned long
+copy_user_generic_string(void *to, const void *from, unsigned len);
+__attribute__((__warn_unused_result__)) unsigned long
+copy_user_generic_unrolled(void *to, const void *from, unsigned len);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
+copy_user_generic(void *to, const void *from, unsigned len)
+{
+ unsigned ret;
+
+
+
+
+
+
+ asm __inline volatile ("# ALT: oldinstr2\n" "661:\n\t" "call %P[old]" "\n662:\n" "# ALT: padding2\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+16)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 9*32+ 9)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "call %P[new1]" "\n" "665""1" ":\n" "# ALT: replacement " "2" "\n" "664""2"":\n\t" "call %P[new2]" "\n" "665""2" ":\n" ".popsection\n" : "=a" (ret), "=D" (to), "=S" (from), "=d" (len), "+r" (current_stack_pointer) : [old] "i" (copy_user_generic_unrolled), [new1] "i" (copy_user_generic_string), [new2] "i" (copy_user_enhanced_fast_string), "1" (to), "2" (from), "3" (len) : "memory", "rcx", "r8", "r9", "r10", "r11")
+
+
+
+
+
+
+
+                                                ;
+ return ret;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
+raw_copy_from_user(void *dst, const void *src, unsigned long size)
+{
+ return copy_user_generic(dst, ( void *)src, size);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
+raw_copy_to_user(void *dst, const void *src, unsigned long size)
+{
+ return copy_user_generic(( void *)dst, src, size);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
+unsigned long raw_copy_in_user(void *dst, const void *src, unsigned long size)
+{
+ return copy_user_generic(( void *)dst,
+     ( void *)src, size);
+}
+
+extern long __copy_user_nocache(void *dst, const void *src,
+    unsigned size, int zerorest);
+
+extern long __copy_user_flushcache(void *dst, const void *src, unsigned size);
+extern void memcpy_page_flushcache(char *to, struct page *page, size_t offset,
+      size_t len);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+__copy_from_user_inatomic_nocache(void *dst, const void *src,
+      unsigned size)
+{
+ __kasan_check_write(dst, size);
+ return __copy_user_nocache(dst, src, size, 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+__copy_from_user_flushcache(void *dst, const void *src, unsigned size)
+{
+ __kasan_check_write(dst, size);
+ return __copy_user_flushcache(dst, src, size);
+}
+# 466 "./arch/x86/include/asm/uaccess.h" 2
+# 474 "./arch/x86/include/asm/uaccess.h"
+static __attribute__((__warn_unused_result__)) inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool user_access_begin(const void *ptr, size_t len)
+{
+ if (__builtin_expect(!!(!({ ; __builtin_expect(!!(!({ (void)0; __chk_range_not_ok((unsigned long )(ptr), len, (((1UL) << ((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )) ? 56 : 47)) - ((1UL) << 12))); })), 1); })), 0))
+  return 0;
+ ({ stac(); asm __inline volatile ("# ALT: oldnstr\n" "661:\n\t" "" "\n662:\n" "# ALT: padding\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "# ALT: replacement " "1" "\n" "664""1"":\n\t" "lfence" "\n" "665""1" ":\n" ".popsection\n" : : : "memory"); });
+ return 1;
+}
+# 12 "./include/linux/uaccess.h" 2
+# 32 "./include/linux/uaccess.h"
+typedef struct {
+
+} mm_segment_t;
+# 43 "./include/linux/uaccess.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) mm_segment_t force_uaccess_begin(void)
+{
+ return (mm_segment_t) { };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void force_uaccess_end(mm_segment_t oldfs)
+{
+}
+# 98 "./include/linux/uaccess.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
+__copy_from_user_inatomic(void *to, const void *from, unsigned long n)
+{
+ instrument_copy_from_user(to, from, n);
+ check_object_size(to, n, false);
+ return raw_copy_from_user(to, from, n);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
+__copy_from_user(void *to, const void *from, unsigned long n)
+{
+ __might_fault("include/linux/uaccess.h", 109);
+ if (should_fail_usercopy())
+  return n;
+ instrument_copy_from_user(to, from, n);
+ check_object_size(to, n, false);
+ return raw_copy_from_user(to, from, n);
+}
+# 130 "./include/linux/uaccess.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
+__copy_to_user_inatomic(void *to, const void *from, unsigned long n)
+{
+ if (should_fail_usercopy())
+  return n;
+ instrument_copy_to_user(to, from, n);
+ check_object_size(from, n, true);
+ return raw_copy_to_user(to, from, n);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
+__copy_to_user(void *to, const void *from, unsigned long n)
+{
+ __might_fault("include/linux/uaccess.h", 143);
+ if (should_fail_usercopy())
+  return n;
+ instrument_copy_to_user(to, from, n);
+ check_object_size(from, n, true);
+ return raw_copy_to_user(to, from, n);
+}
+# 166 "./include/linux/uaccess.h"
+extern __attribute__((__warn_unused_result__)) unsigned long
+_copy_from_user(void *, const void *, unsigned long);
+# 184 "./include/linux/uaccess.h"
+extern __attribute__((__warn_unused_result__)) unsigned long
+_copy_to_user(void *, const void *, unsigned long);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
+copy_from_user(void *to, const void *from, unsigned long n)
+{
+ if (__builtin_expect(!!(check_copy_size(to, n, false)), 1))
+  n = _copy_from_user(to, from, n);
+ return n;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
+copy_to_user(void *to, const void *from, unsigned long n)
+{
+ if (__builtin_expect(!!(check_copy_size(from, n, true)), 1))
+  n = _copy_to_user(to, from, n);
+ return n;
+}
+# 227 "./include/linux/uaccess.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void pagefault_disabled_inc(void)
+{
+ get_current()->pagefault_disabled++;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void pagefault_disabled_dec(void)
+{
+ get_current()->pagefault_disabled--;
+}
+# 244 "./include/linux/uaccess.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pagefault_disable(void)
+{
+ pagefault_disabled_inc();
+
+
+
+
+ __asm__ __volatile__("": : :"memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pagefault_enable(void)
+{
+
+
+
+
+ __asm__ __volatile__("": : :"memory");
+ pagefault_disabled_dec();
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pagefault_disabled(void)
+{
+ return get_current()->pagefault_disabled != 0;
+}
+# 295 "./include/linux/uaccess.h"
+extern __attribute__((__warn_unused_result__)) int check_zeroed_user(const void *from, size_t size);
+# 344 "./include/linux/uaccess.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) int
+copy_struct_from_user(void *dst, size_t ksize, const void *src,
+        size_t usize)
+{
+ size_t size = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) < (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x199 = (ksize); typeof(usize) __UNIQUE_ID___y200 = (usize); ((__UNIQUE_ID___x199) < (__UNIQUE_ID___y200) ? (__UNIQUE_ID___x199) : (__UNIQUE_ID___y200)); }));
+ size_t rest = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) > (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x201 = (ksize); typeof(usize) __UNIQUE_ID___y202 = (usize); ((__UNIQUE_ID___x201) > (__UNIQUE_ID___y202) ? (__UNIQUE_ID___x201) : (__UNIQUE_ID___y202)); })) - size;
+
+
+ if (usize < ksize) {
+  memset(dst + size, 0, rest);
+ } else if (usize > ksize) {
+  int ret = check_zeroed_user(src + size, rest);
+  if (ret <= 0)
+   return ret ?: -7;
+ }
+
+ if (copy_from_user(dst, src, size))
+  return -14;
+ return 0;
+}
+
+bool copy_from_kernel_nofault_allowed(const void *unsafe_src, size_t size);
+
+long copy_from_kernel_nofault(void *dst, const void *src, size_t size);
+long __attribute__((no_instrument_function)) copy_to_kernel_nofault(void *dst, const void *src, size_t size);
+
+long copy_from_user_nofault(void *dst, const void *src, size_t size);
+long __attribute__((no_instrument_function)) copy_to_user_nofault(void *dst, const void *src,
+  size_t size);
+
+long strncpy_from_kernel_nofault(char *dst, const void *unsafe_addr,
+  long count);
+
+long strncpy_from_user_nofault(char *dst, const void *unsafe_addr,
+  long count);
+long strnlen_user_nofault(const void *unsafe_addr, long count);
+# 12 "./include/linux/sched/task.h" 2
+
+struct task_struct;
+struct rusage;
+union thread_union;
+struct css_set;
+
+
+
+
+struct kernel_clone_args {
+ u64 flags;
+ int *pidfd;
+ int *child_tid;
+ int *parent_tid;
+ int exit_signal;
+ unsigned long stack;
+ unsigned long stack_size;
+ unsigned long tls;
+ pid_t *set_tid;
+
+ size_t set_tid_size;
+ int cgroup;
+ int io_thread;
+ struct cgroup *cgrp;
+ struct css_set *cset;
+};
+
+
+
+
+
+
+
+extern rwlock_t tasklist_lock;
+extern spinlock_t mmlist_lock;
+
+extern union thread_union init_thread_union;
+extern struct task_struct init_task;
+
+extern int lockdep_tasklist_lock_is_held(void);
+
+extern void schedule_tail(struct task_struct *prev);
+extern void init_idle(struct task_struct *idle, int cpu);
+
+extern int sched_fork(unsigned long clone_flags, struct task_struct *p);
+extern void sched_post_fork(struct task_struct *p);
+extern void sched_dead(struct task_struct *p);
+
+void __attribute__((__noreturn__)) do_task_dead(void);
+
+extern void proc_caches_init(void);
+
+extern void fork_init(void);
+
+extern void release_task(struct task_struct * p);
+
+extern int copy_thread(unsigned long, unsigned long, unsigned long,
+         struct task_struct *, unsigned long);
+
+extern void flush_thread(void);
+
+
+extern void exit_thread(struct task_struct *tsk);
+
+
+
+
+
+extern void do_group_exit(int);
+
+extern void exit_files(struct task_struct *);
+extern void exit_itimers(struct signal_struct *);
+
+extern pid_t kernel_clone(struct kernel_clone_args *kargs);
+struct task_struct *create_io_thread(int (*fn)(void *), void *arg, int node);
+struct task_struct *fork_idle(int);
+struct mm_struct *copy_init_mm(void);
+extern pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);
+extern long kernel_wait4(pid_t, int *, int, struct rusage *);
+int kernel_wait(pid_t pid, int *stat);
+
+extern void free_task(struct task_struct *tsk);
+# 102 "./include/linux/sched/task.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct task_struct *get_task_struct(struct task_struct *t)
+{
+ refcount_inc(&t->usage);
+ return t;
+}
+
+extern void __put_task_struct(struct task_struct *t);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_task_struct(struct task_struct *t)
+{
+ if (refcount_dec_and_test(&t->usage))
+  __put_task_struct(t);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_task_struct_many(struct task_struct *t, int nr)
+{
+ if (refcount_sub_and_test(nr, &t->usage))
+  __put_task_struct(t);
+}
+
+void put_task_struct_rcu_user(struct task_struct *task);
+
+
+extern int arch_task_struct_size __attribute__((__section__(".data..read_mostly")));
+# 150 "./include/linux/sched/task.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct vm_struct *task_stack_vm_area(const struct task_struct *t)
+{
+ return ((void *)0);
+}
+# 166 "./include/linux/sched/task.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_lock(struct task_struct *p)
+{
+ spin_lock(&p->alloc_lock);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void task_unlock(struct task_struct *p)
+{
+ spin_unlock(&p->alloc_lock);
+}
+# 10 "./include/linux/sched/signal.h" 2
+# 1 "./include/linux/cred.h" 1
+# 13 "./include/linux/cred.h"
+# 1 "./include/linux/key.h" 1
+# 17 "./include/linux/key.h"
+# 1 "./include/linux/sysctl.h" 1
+# 30 "./include/linux/sysctl.h"
+# 1 "./include/uapi/linux/sysctl.h" 1
+# 35 "./include/uapi/linux/sysctl.h"
+struct __sysctl_args {
+ int *name;
+ int nlen;
+ void *oldval;
+ size_t *oldlenp;
+ void *newval;
+ size_t newlen;
+ unsigned long __unused[4];
+};
+
+
+
+
+
+enum
+{
+ CTL_KERN=1,
+ CTL_VM=2,
+ CTL_NET=3,
+ CTL_PROC=4,
+ CTL_FS=5,
+ CTL_DEBUG=6,
+ CTL_DEV=7,
+ CTL_BUS=8,
+ CTL_ABI=9,
+ CTL_CPU=10,
+ CTL_ARLAN=254,
+ CTL_S390DBF=5677,
+ CTL_SUNRPC=7249,
+ CTL_PM=9899,
+ CTL_FRV=9898,
+};
+
+
+enum
+{
+ CTL_BUS_ISA=1
+};
+
+
+enum
+{
+ INOTIFY_MAX_USER_INSTANCES=1,
+ INOTIFY_MAX_USER_WATCHES=2,
+ INOTIFY_MAX_QUEUED_EVENTS=3
+};
+
+
+enum
+{
+ KERN_OSTYPE=1,
+ KERN_OSRELEASE=2,
+ KERN_OSREV=3,
+ KERN_VERSION=4,
+ KERN_SECUREMASK=5,
+ KERN_PROF=6,
+ KERN_NODENAME=7,
+ KERN_DOMAINNAME=8,
+
+ KERN_PANIC=15,
+ KERN_REALROOTDEV=16,
+
+ KERN_SPARC_REBOOT=21,
+ KERN_CTLALTDEL=22,
+ KERN_PRINTK=23,
+ KERN_NAMETRANS=24,
+ KERN_PPC_HTABRECLAIM=25,
+ KERN_PPC_ZEROPAGED=26,
+ KERN_PPC_POWERSAVE_NAP=27,
+ KERN_MODPROBE=28,
+ KERN_SG_BIG_BUFF=29,
+ KERN_ACCT=30,
+ KERN_PPC_L2CR=31,
+
+ KERN_RTSIGNR=32,
+ KERN_RTSIGMAX=33,
+
+ KERN_SHMMAX=34,
+ KERN_MSGMAX=35,
+ KERN_MSGMNB=36,
+ KERN_MSGPOOL=37,
+ KERN_SYSRQ=38,
+ KERN_MAX_THREADS=39,
+  KERN_RANDOM=40,
+  KERN_SHMALL=41,
+  KERN_MSGMNI=42,
+  KERN_SEM=43,
+  KERN_SPARC_STOP_A=44,
+  KERN_SHMMNI=45,
+ KERN_OVERFLOWUID=46,
+ KERN_OVERFLOWGID=47,
+ KERN_SHMPATH=48,
+ KERN_HOTPLUG=49,
+ KERN_IEEE_EMULATION_WARNINGS=50,
+ KERN_S390_USER_DEBUG_LOGGING=51,
+ KERN_CORE_USES_PID=52,
+ KERN_TAINTED=53,
+ KERN_CADPID=54,
+ KERN_PIDMAX=55,
+   KERN_CORE_PATTERN=56,
+ KERN_PANIC_ON_OOPS=57,
+ KERN_HPPA_PWRSW=58,
+ KERN_HPPA_UNALIGNED=59,
+ KERN_PRINTK_RATELIMIT=60,
+ KERN_PRINTK_RATELIMIT_BURST=61,
+ KERN_PTY=62,
+ KERN_NGROUPS_MAX=63,
+ KERN_SPARC_SCONS_PWROFF=64,
+ KERN_HZ_TIMER=65,
+ KERN_UNKNOWN_NMI_PANIC=66,
+ KERN_BOOTLOADER_TYPE=67,
+ KERN_RANDOMIZE=68,
+ KERN_SETUID_DUMPABLE=69,
+ KERN_SPIN_RETRY=70,
+ KERN_ACPI_VIDEO_FLAGS=71,
+ KERN_IA64_UNALIGNED=72,
+ KERN_COMPAT_LOG=73,
+ KERN_MAX_LOCK_DEPTH=74,
+ KERN_NMI_WATCHDOG=75,
+ KERN_PANIC_ON_NMI=76,
+ KERN_PANIC_ON_WARN=77,
+ KERN_PANIC_PRINT=78,
+};
+
+
+
+
+enum
+{
+ VM_UNUSED1=1,
+ VM_UNUSED2=2,
+ VM_UNUSED3=3,
+ VM_UNUSED4=4,
+ VM_OVERCOMMIT_MEMORY=5,
+ VM_UNUSED5=6,
+ VM_UNUSED7=7,
+ VM_UNUSED8=8,
+ VM_UNUSED9=9,
+ VM_PAGE_CLUSTER=10,
+ VM_DIRTY_BACKGROUND=11,
+ VM_DIRTY_RATIO=12,
+ VM_DIRTY_WB_CS=13,
+ VM_DIRTY_EXPIRE_CS=14,
+ VM_NR_PDFLUSH_THREADS=15,
+ VM_OVERCOMMIT_RATIO=16,
+ VM_PAGEBUF=17,
+ VM_HUGETLB_PAGES=18,
+ VM_SWAPPINESS=19,
+ VM_LOWMEM_RESERVE_RATIO=20,
+ VM_MIN_FREE_KBYTES=21,
+ VM_MAX_MAP_COUNT=22,
+ VM_LAPTOP_MODE=23,
+ VM_BLOCK_DUMP=24,
+ VM_HUGETLB_GROUP=25,
+ VM_VFS_CACHE_PRESSURE=26,
+ VM_LEGACY_VA_LAYOUT=27,
+ VM_SWAP_TOKEN_TIMEOUT=28,
+ VM_DROP_PAGECACHE=29,
+ VM_PERCPU_PAGELIST_FRACTION=30,
+ VM_ZONE_RECLAIM_MODE=31,
+ VM_MIN_UNMAPPED=32,
+ VM_PANIC_ON_OOM=33,
+ VM_VDSO_ENABLED=34,
+ VM_MIN_SLAB=35,
+};
+
+
+
+enum
+{
+ NET_CORE=1,
+ NET_ETHER=2,
+ NET_802=3,
+ NET_UNIX=4,
+ NET_IPV4=5,
+ NET_IPX=6,
+ NET_ATALK=7,
+ NET_NETROM=8,
+ NET_AX25=9,
+ NET_BRIDGE=10,
+ NET_ROSE=11,
+ NET_IPV6=12,
+ NET_X25=13,
+ NET_TR=14,
+ NET_DECNET=15,
+ NET_ECONET=16,
+ NET_SCTP=17,
+ NET_LLC=18,
+ NET_NETFILTER=19,
+ NET_DCCP=20,
+ NET_IRDA=412,
+};
+
+
+enum
+{
+ RANDOM_POOLSIZE=1,
+ RANDOM_ENTROPY_COUNT=2,
+ RANDOM_READ_THRESH=3,
+ RANDOM_WRITE_THRESH=4,
+ RANDOM_BOOT_ID=5,
+ RANDOM_UUID=6
+};
+
+
+enum
+{
+ PTY_MAX=1,
+ PTY_NR=2
+};
+
+
+enum
+{
+ BUS_ISA_MEM_BASE=1,
+ BUS_ISA_PORT_BASE=2,
+ BUS_ISA_PORT_SHIFT=3
+};
+
+
+enum
+{
+ NET_CORE_WMEM_MAX=1,
+ NET_CORE_RMEM_MAX=2,
+ NET_CORE_WMEM_DEFAULT=3,
+ NET_CORE_RMEM_DEFAULT=4,
+
+ NET_CORE_MAX_BACKLOG=6,
+ NET_CORE_FASTROUTE=7,
+ NET_CORE_MSG_COST=8,
+ NET_CORE_MSG_BURST=9,
+ NET_CORE_OPTMEM_MAX=10,
+ NET_CORE_HOT_LIST_LENGTH=11,
+ NET_CORE_DIVERT_VERSION=12,
+ NET_CORE_NO_CONG_THRESH=13,
+ NET_CORE_NO_CONG=14,
+ NET_CORE_LO_CONG=15,
+ NET_CORE_MOD_CONG=16,
+ NET_CORE_DEV_WEIGHT=17,
+ NET_CORE_SOMAXCONN=18,
+ NET_CORE_BUDGET=19,
+ NET_CORE_AEVENT_ETIME=20,
+ NET_CORE_AEVENT_RSEQTH=21,
+ NET_CORE_WARNINGS=22,
+};
+
+
+
+
+
+
+
+enum
+{
+ NET_UNIX_DESTROY_DELAY=1,
+ NET_UNIX_DELETE_DELAY=2,
+ NET_UNIX_MAX_DGRAM_QLEN=3,
+};
+
+
+enum
+{
+ NET_NF_CONNTRACK_MAX=1,
+ NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
+ NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
+ NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
+ NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
+ NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
+ NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
+ NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
+ NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
+ NET_NF_CONNTRACK_UDP_TIMEOUT=10,
+ NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
+ NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
+ NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
+ NET_NF_CONNTRACK_BUCKETS=14,
+ NET_NF_CONNTRACK_LOG_INVALID=15,
+ NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
+ NET_NF_CONNTRACK_TCP_LOOSE=17,
+ NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
+ NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
+ NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
+ NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
+ NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
+ NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
+ NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
+ NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
+ NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
+ NET_NF_CONNTRACK_COUNT=27,
+ NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
+ NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
+ NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
+ NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
+ NET_NF_CONNTRACK_CHECKSUM=32,
+};
+
+
+enum
+{
+
+ NET_IPV4_FORWARD=8,
+ NET_IPV4_DYNADDR=9,
+
+ NET_IPV4_CONF=16,
+ NET_IPV4_NEIGH=17,
+ NET_IPV4_ROUTE=18,
+ NET_IPV4_FIB_HASH=19,
+ NET_IPV4_NETFILTER=20,
+
+ NET_IPV4_TCP_TIMESTAMPS=33,
+ NET_IPV4_TCP_WINDOW_SCALING=34,
+ NET_IPV4_TCP_SACK=35,
+ NET_IPV4_TCP_RETRANS_COLLAPSE=36,
+ NET_IPV4_DEFAULT_TTL=37,
+ NET_IPV4_AUTOCONFIG=38,
+ NET_IPV4_NO_PMTU_DISC=39,
+ NET_IPV4_TCP_SYN_RETRIES=40,
+ NET_IPV4_IPFRAG_HIGH_THRESH=41,
+ NET_IPV4_IPFRAG_LOW_THRESH=42,
+ NET_IPV4_IPFRAG_TIME=43,
+ NET_IPV4_TCP_MAX_KA_PROBES=44,
+ NET_IPV4_TCP_KEEPALIVE_TIME=45,
+ NET_IPV4_TCP_KEEPALIVE_PROBES=46,
+ NET_IPV4_TCP_RETRIES1=47,
+ NET_IPV4_TCP_RETRIES2=48,
+ NET_IPV4_TCP_FIN_TIMEOUT=49,
+ NET_IPV4_IP_MASQ_DEBUG=50,
+ NET_TCP_SYNCOOKIES=51,
+ NET_TCP_STDURG=52,
+ NET_TCP_RFC1337=53,
+ NET_TCP_SYN_TAILDROP=54,
+ NET_TCP_MAX_SYN_BACKLOG=55,
+ NET_IPV4_LOCAL_PORT_RANGE=56,
+ NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
+ NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
+ NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
+ NET_IPV4_ICMP_DESTUNREACH_RATE=60,
+ NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
+ NET_IPV4_ICMP_PARAMPROB_RATE=62,
+ NET_IPV4_ICMP_ECHOREPLY_RATE=63,
+ NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
+ NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
+ NET_TCP_TW_RECYCLE=66,
+ NET_IPV4_ALWAYS_DEFRAG=67,
+ NET_IPV4_TCP_KEEPALIVE_INTVL=68,
+ NET_IPV4_INET_PEER_THRESHOLD=69,
+ NET_IPV4_INET_PEER_MINTTL=70,
+ NET_IPV4_INET_PEER_MAXTTL=71,
+ NET_IPV4_INET_PEER_GC_MINTIME=72,
+ NET_IPV4_INET_PEER_GC_MAXTIME=73,
+ NET_TCP_ORPHAN_RETRIES=74,
+ NET_TCP_ABORT_ON_OVERFLOW=75,
+ NET_TCP_SYNACK_RETRIES=76,
+ NET_TCP_MAX_ORPHANS=77,
+ NET_TCP_MAX_TW_BUCKETS=78,
+ NET_TCP_FACK=79,
+ NET_TCP_REORDERING=80,
+ NET_TCP_ECN=81,
+ NET_TCP_DSACK=82,
+ NET_TCP_MEM=83,
+ NET_TCP_WMEM=84,
+ NET_TCP_RMEM=85,
+ NET_TCP_APP_WIN=86,
+ NET_TCP_ADV_WIN_SCALE=87,
+ NET_IPV4_NONLOCAL_BIND=88,
+ NET_IPV4_ICMP_RATELIMIT=89,
+ NET_IPV4_ICMP_RATEMASK=90,
+ NET_TCP_TW_REUSE=91,
+ NET_TCP_FRTO=92,
+ NET_TCP_LOW_LATENCY=93,
+ NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
+ NET_IPV4_IGMP_MAX_MSF=96,
+ NET_TCP_NO_METRICS_SAVE=97,
+ NET_TCP_DEFAULT_WIN_SCALE=105,
+ NET_TCP_MODERATE_RCVBUF=106,
+ NET_TCP_TSO_WIN_DIVISOR=107,
+ NET_TCP_BIC_BETA=108,
+ NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
+ NET_TCP_CONG_CONTROL=110,
+ NET_TCP_ABC=111,
+ NET_IPV4_IPFRAG_MAX_DIST=112,
+  NET_TCP_MTU_PROBING=113,
+ NET_TCP_BASE_MSS=114,
+ NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
+ NET_TCP_DMA_COPYBREAK=116,
+ NET_TCP_SLOW_START_AFTER_IDLE=117,
+ NET_CIPSOV4_CACHE_ENABLE=118,
+ NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
+ NET_CIPSOV4_RBM_OPTFMT=120,
+ NET_CIPSOV4_RBM_STRICTVALID=121,
+ NET_TCP_AVAIL_CONG_CONTROL=122,
+ NET_TCP_ALLOWED_CONG_CONTROL=123,
+ NET_TCP_MAX_SSTHRESH=124,
+ NET_TCP_FRTO_RESPONSE=125,
+};
+
+enum {
+ NET_IPV4_ROUTE_FLUSH=1,
+ NET_IPV4_ROUTE_MIN_DELAY=2,
+ NET_IPV4_ROUTE_MAX_DELAY=3,
+ NET_IPV4_ROUTE_GC_THRESH=4,
+ NET_IPV4_ROUTE_MAX_SIZE=5,
+ NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
+ NET_IPV4_ROUTE_GC_TIMEOUT=7,
+ NET_IPV4_ROUTE_GC_INTERVAL=8,
+ NET_IPV4_ROUTE_REDIRECT_LOAD=9,
+ NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
+ NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
+ NET_IPV4_ROUTE_ERROR_COST=12,
+ NET_IPV4_ROUTE_ERROR_BURST=13,
+ NET_IPV4_ROUTE_GC_ELASTICITY=14,
+ NET_IPV4_ROUTE_MTU_EXPIRES=15,
+ NET_IPV4_ROUTE_MIN_PMTU=16,
+ NET_IPV4_ROUTE_MIN_ADVMSS=17,
+ NET_IPV4_ROUTE_SECRET_INTERVAL=18,
+ NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
+};
+
+enum
+{
+ NET_PROTO_CONF_ALL=-2,
+ NET_PROTO_CONF_DEFAULT=-3
+
+
+};
+
+enum
+{
+ NET_IPV4_CONF_FORWARDING=1,
+ NET_IPV4_CONF_MC_FORWARDING=2,
+ NET_IPV4_CONF_PROXY_ARP=3,
+ NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
+ NET_IPV4_CONF_SECURE_REDIRECTS=5,
+ NET_IPV4_CONF_SEND_REDIRECTS=6,
+ NET_IPV4_CONF_SHARED_MEDIA=7,
+ NET_IPV4_CONF_RP_FILTER=8,
+ NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
+ NET_IPV4_CONF_BOOTP_RELAY=10,
+ NET_IPV4_CONF_LOG_MARTIANS=11,
+ NET_IPV4_CONF_TAG=12,
+ NET_IPV4_CONF_ARPFILTER=13,
+ NET_IPV4_CONF_MEDIUM_ID=14,
+ NET_IPV4_CONF_NOXFRM=15,
+ NET_IPV4_CONF_NOPOLICY=16,
+ NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
+ NET_IPV4_CONF_ARP_ANNOUNCE=18,
+ NET_IPV4_CONF_ARP_IGNORE=19,
+ NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
+ NET_IPV4_CONF_ARP_ACCEPT=21,
+ NET_IPV4_CONF_ARP_NOTIFY=22,
+};
+
+
+enum
+{
+ NET_IPV4_NF_CONNTRACK_MAX=1,
+ NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
+ NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
+ NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
+ NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
+ NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
+ NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
+ NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
+ NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
+ NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
+ NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
+ NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
+ NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
+ NET_IPV4_NF_CONNTRACK_BUCKETS=14,
+ NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
+ NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
+ NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
+ NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
+ NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
+  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
+  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
+  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
+  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
+  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
+  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
+  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
+ NET_IPV4_NF_CONNTRACK_COUNT=27,
+ NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
+};
+
+
+enum {
+ NET_IPV6_CONF=16,
+ NET_IPV6_NEIGH=17,
+ NET_IPV6_ROUTE=18,
+ NET_IPV6_ICMP=19,
+ NET_IPV6_BINDV6ONLY=20,
+ NET_IPV6_IP6FRAG_HIGH_THRESH=21,
+ NET_IPV6_IP6FRAG_LOW_THRESH=22,
+ NET_IPV6_IP6FRAG_TIME=23,
+ NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
+ NET_IPV6_MLD_MAX_MSF=25,
+};
+
+enum {
+ NET_IPV6_ROUTE_FLUSH=1,
+ NET_IPV6_ROUTE_GC_THRESH=2,
+ NET_IPV6_ROUTE_MAX_SIZE=3,
+ NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
+ NET_IPV6_ROUTE_GC_TIMEOUT=5,
+ NET_IPV6_ROUTE_GC_INTERVAL=6,
+ NET_IPV6_ROUTE_GC_ELASTICITY=7,
+ NET_IPV6_ROUTE_MTU_EXPIRES=8,
+ NET_IPV6_ROUTE_MIN_ADVMSS=9,
+ NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
+};
+
+enum {
+ NET_IPV6_FORWARDING=1,
+ NET_IPV6_HOP_LIMIT=2,
+ NET_IPV6_MTU=3,
+ NET_IPV6_ACCEPT_RA=4,
+ NET_IPV6_ACCEPT_REDIRECTS=5,
+ NET_IPV6_AUTOCONF=6,
+ NET_IPV6_DAD_TRANSMITS=7,
+ NET_IPV6_RTR_SOLICITS=8,
+ NET_IPV6_RTR_SOLICIT_INTERVAL=9,
+ NET_IPV6_RTR_SOLICIT_DELAY=10,
+ NET_IPV6_USE_TEMPADDR=11,
+ NET_IPV6_TEMP_VALID_LFT=12,
+ NET_IPV6_TEMP_PREFERED_LFT=13,
+ NET_IPV6_REGEN_MAX_RETRY=14,
+ NET_IPV6_MAX_DESYNC_FACTOR=15,
+ NET_IPV6_MAX_ADDRESSES=16,
+ NET_IPV6_FORCE_MLD_VERSION=17,
+ NET_IPV6_ACCEPT_RA_DEFRTR=18,
+ NET_IPV6_ACCEPT_RA_PINFO=19,
+ NET_IPV6_ACCEPT_RA_RTR_PREF=20,
+ NET_IPV6_RTR_PROBE_INTERVAL=21,
+ NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
+ NET_IPV6_PROXY_NDP=23,
+ NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
+ NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
+ NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
+ NET_IPV6_RA_DEFRTR_METRIC=28,
+ __NET_IPV6_MAX
+};
+
+
+enum {
+ NET_IPV6_ICMP_RATELIMIT = 1,
+ NET_IPV6_ICMP_ECHO_IGNORE_ALL = 2
+};
+
+
+enum {
+ NET_NEIGH_MCAST_SOLICIT=1,
+ NET_NEIGH_UCAST_SOLICIT=2,
+ NET_NEIGH_APP_SOLICIT=3,
+ NET_NEIGH_RETRANS_TIME=4,
+ NET_NEIGH_REACHABLE_TIME=5,
+ NET_NEIGH_DELAY_PROBE_TIME=6,
+ NET_NEIGH_GC_STALE_TIME=7,
+ NET_NEIGH_UNRES_QLEN=8,
+ NET_NEIGH_PROXY_QLEN=9,
+ NET_NEIGH_ANYCAST_DELAY=10,
+ NET_NEIGH_PROXY_DELAY=11,
+ NET_NEIGH_LOCKTIME=12,
+ NET_NEIGH_GC_INTERVAL=13,
+ NET_NEIGH_GC_THRESH1=14,
+ NET_NEIGH_GC_THRESH2=15,
+ NET_NEIGH_GC_THRESH3=16,
+ NET_NEIGH_RETRANS_TIME_MS=17,
+ NET_NEIGH_REACHABLE_TIME_MS=18,
+};
+
+
+enum {
+ NET_DCCP_DEFAULT=1,
+};
+
+
+enum {
+ NET_IPX_PPROP_BROADCASTING=1,
+ NET_IPX_FORWARDING=2
+};
+
+
+enum {
+ NET_LLC2=1,
+ NET_LLC_STATION=2,
+};
+
+
+enum {
+ NET_LLC2_TIMEOUT=1,
+};
+
+
+enum {
+ NET_LLC_STATION_ACK_TIMEOUT=1,
+};
+
+
+enum {
+ NET_LLC2_ACK_TIMEOUT=1,
+ NET_LLC2_P_TIMEOUT=2,
+ NET_LLC2_REJ_TIMEOUT=3,
+ NET_LLC2_BUSY_TIMEOUT=4,
+};
+
+
+enum {
+ NET_ATALK_AARP_EXPIRY_TIME=1,
+ NET_ATALK_AARP_TICK_TIME=2,
+ NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
+ NET_ATALK_AARP_RESOLVE_TIME=4
+};
+
+
+
+enum {
+ NET_NETROM_DEFAULT_PATH_QUALITY=1,
+ NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
+ NET_NETROM_NETWORK_TTL_INITIALISER=3,
+ NET_NETROM_TRANSPORT_TIMEOUT=4,
+ NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
+ NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
+ NET_NETROM_TRANSPORT_BUSY_DELAY=7,
+ NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
+ NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
+ NET_NETROM_ROUTING_CONTROL=10,
+ NET_NETROM_LINK_FAILS_COUNT=11,
+ NET_NETROM_RESET=12
+};
+
+
+enum {
+ NET_AX25_IP_DEFAULT_MODE=1,
+ NET_AX25_DEFAULT_MODE=2,
+ NET_AX25_BACKOFF_TYPE=3,
+ NET_AX25_CONNECT_MODE=4,
+ NET_AX25_STANDARD_WINDOW=5,
+ NET_AX25_EXTENDED_WINDOW=6,
+ NET_AX25_T1_TIMEOUT=7,
+ NET_AX25_T2_TIMEOUT=8,
+ NET_AX25_T3_TIMEOUT=9,
+ NET_AX25_IDLE_TIMEOUT=10,
+ NET_AX25_N2=11,
+ NET_AX25_PACLEN=12,
+ NET_AX25_PROTOCOL=13,
+ NET_AX25_DAMA_SLAVE_TIMEOUT=14
+};
+
+
+enum {
+ NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
+ NET_ROSE_CALL_REQUEST_TIMEOUT=2,
+ NET_ROSE_RESET_REQUEST_TIMEOUT=3,
+ NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
+ NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
+ NET_ROSE_ROUTING_CONTROL=6,
+ NET_ROSE_LINK_FAIL_TIMEOUT=7,
+ NET_ROSE_MAX_VCS=8,
+ NET_ROSE_WINDOW_SIZE=9,
+ NET_ROSE_NO_ACTIVITY_TIMEOUT=10
+};
+
+
+enum {
+ NET_X25_RESTART_REQUEST_TIMEOUT=1,
+ NET_X25_CALL_REQUEST_TIMEOUT=2,
+ NET_X25_RESET_REQUEST_TIMEOUT=3,
+ NET_X25_CLEAR_REQUEST_TIMEOUT=4,
+ NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
+ NET_X25_FORWARD=6
+};
+
+
+enum
+{
+ NET_TR_RIF_TIMEOUT=1
+};
+
+
+enum {
+ NET_DECNET_NODE_TYPE = 1,
+ NET_DECNET_NODE_ADDRESS = 2,
+ NET_DECNET_NODE_NAME = 3,
+ NET_DECNET_DEFAULT_DEVICE = 4,
+ NET_DECNET_TIME_WAIT = 5,
+ NET_DECNET_DN_COUNT = 6,
+ NET_DECNET_DI_COUNT = 7,
+ NET_DECNET_DR_COUNT = 8,
+ NET_DECNET_DST_GC_INTERVAL = 9,
+ NET_DECNET_CONF = 10,
+ NET_DECNET_NO_FC_MAX_CWND = 11,
+ NET_DECNET_MEM = 12,
+ NET_DECNET_RMEM = 13,
+ NET_DECNET_WMEM = 14,
+ NET_DECNET_DEBUG_LEVEL = 255
+};
+
+
+enum {
+ NET_DECNET_CONF_LOOPBACK = -2,
+ NET_DECNET_CONF_DDCMP = -3,
+ NET_DECNET_CONF_PPP = -4,
+ NET_DECNET_CONF_X25 = -5,
+ NET_DECNET_CONF_GRE = -6,
+ NET_DECNET_CONF_ETHER = -7
+
+
+};
+
+
+enum {
+ NET_DECNET_CONF_DEV_PRIORITY = 1,
+ NET_DECNET_CONF_DEV_T1 = 2,
+ NET_DECNET_CONF_DEV_T2 = 3,
+ NET_DECNET_CONF_DEV_T3 = 4,
+ NET_DECNET_CONF_DEV_FORWARDING = 5,
+ NET_DECNET_CONF_DEV_BLKSIZE = 6,
+ NET_DECNET_CONF_DEV_STATE = 7
+};
+
+
+enum {
+ NET_SCTP_RTO_INITIAL = 1,
+ NET_SCTP_RTO_MIN = 2,
+ NET_SCTP_RTO_MAX = 3,
+ NET_SCTP_RTO_ALPHA = 4,
+ NET_SCTP_RTO_BETA = 5,
+ NET_SCTP_VALID_COOKIE_LIFE = 6,
+ NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
+ NET_SCTP_PATH_MAX_RETRANS = 8,
+ NET_SCTP_MAX_INIT_RETRANSMITS = 9,
+ NET_SCTP_HB_INTERVAL = 10,
+ NET_SCTP_PRESERVE_ENABLE = 11,
+ NET_SCTP_MAX_BURST = 12,
+ NET_SCTP_ADDIP_ENABLE = 13,
+ NET_SCTP_PRSCTP_ENABLE = 14,
+ NET_SCTP_SNDBUF_POLICY = 15,
+ NET_SCTP_SACK_TIMEOUT = 16,
+ NET_SCTP_RCVBUF_POLICY = 17,
+};
+
+
+enum {
+ NET_BRIDGE_NF_CALL_ARPTABLES = 1,
+ NET_BRIDGE_NF_CALL_IPTABLES = 2,
+ NET_BRIDGE_NF_CALL_IP6TABLES = 3,
+ NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
+ NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
+};
+
+
+
+enum
+{
+ FS_NRINODE=1,
+ FS_STATINODE=2,
+ FS_MAXINODE=3,
+ FS_NRDQUOT=4,
+ FS_MAXDQUOT=5,
+ FS_NRFILE=6,
+ FS_MAXFILE=7,
+ FS_DENTRY=8,
+ FS_NRSUPER=9,
+ FS_MAXSUPER=10,
+ FS_OVERFLOWUID=11,
+ FS_OVERFLOWGID=12,
+ FS_LEASES=13,
+ FS_DIR_NOTIFY=14,
+ FS_LEASE_TIME=15,
+ FS_DQSTATS=16,
+ FS_XFS=17,
+ FS_AIO_NR=18,
+ FS_AIO_MAX_NR=19,
+ FS_INOTIFY=20,
+ FS_OCFS2=988,
+};
+
+
+enum {
+ FS_DQ_LOOKUPS = 1,
+ FS_DQ_DROPS = 2,
+ FS_DQ_READS = 3,
+ FS_DQ_WRITES = 4,
+ FS_DQ_CACHE_HITS = 5,
+ FS_DQ_ALLOCATED = 6,
+ FS_DQ_FREE = 7,
+ FS_DQ_SYNCS = 8,
+ FS_DQ_WARNINGS = 9,
+};
+
+
+
+
+enum {
+ DEV_CDROM=1,
+ DEV_HWMON=2,
+ DEV_PARPORT=3,
+ DEV_RAID=4,
+ DEV_MAC_HID=5,
+ DEV_SCSI=6,
+ DEV_IPMI=7,
+};
+
+
+enum {
+ DEV_CDROM_INFO=1,
+ DEV_CDROM_AUTOCLOSE=2,
+ DEV_CDROM_AUTOEJECT=3,
+ DEV_CDROM_DEBUG=4,
+ DEV_CDROM_LOCK=5,
+ DEV_CDROM_CHECK_MEDIA=6
+};
+
+
+enum {
+ DEV_PARPORT_DEFAULT=-3
+};
+
+
+enum {
+ DEV_RAID_SPEED_LIMIT_MIN=1,
+ DEV_RAID_SPEED_LIMIT_MAX=2
+};
+
+
+enum {
+ DEV_PARPORT_DEFAULT_TIMESLICE=1,
+ DEV_PARPORT_DEFAULT_SPINTIME=2
+};
+
+
+enum {
+ DEV_PARPORT_SPINTIME=1,
+ DEV_PARPORT_BASE_ADDR=2,
+ DEV_PARPORT_IRQ=3,
+ DEV_PARPORT_DMA=4,
+ DEV_PARPORT_MODES=5,
+ DEV_PARPORT_DEVICES=6,
+ DEV_PARPORT_AUTOPROBE=16
+};
+
+
+enum {
+ DEV_PARPORT_DEVICES_ACTIVE=-3,
+};
+
+
+enum {
+ DEV_PARPORT_DEVICE_TIMESLICE=1,
+};
+
+
+enum {
+ DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
+ DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
+ DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
+ DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
+ DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
+ DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
+};
+
+
+enum {
+ DEV_SCSI_LOGGING_LEVEL=1,
+};
+
+
+enum {
+ DEV_IPMI_POWEROFF_POWERCYCLE=1,
+};
+
+
+enum
+{
+ ABI_DEFHANDLER_COFF=1,
+ ABI_DEFHANDLER_ELF=2,
+ ABI_DEFHANDLER_LCALL7=3,
+ ABI_DEFHANDLER_LIBCSO=4,
+ ABI_TRACE=5,
+ ABI_FAKE_UTSNAME=6,
+};
+# 31 "./include/linux/sysctl.h" 2
+
+
+struct completion;
+struct ctl_table;
+struct nsproxy;
+struct ctl_table_root;
+struct ctl_table_header;
+struct ctl_dir;
+
+
+
+
+
+
+extern const int sysctl_vals[];
+
+typedef int proc_handler(struct ctl_table *ctl, int write, void *buffer,
+  size_t *lenp, loff_t *ppos);
+
+int proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
+int proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
+int proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *);
+int proc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
+int proc_douintvec_minmax(struct ctl_table *table, int write, void *buffer,
+  size_t *lenp, loff_t *ppos);
+int proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
+int proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *,
+  loff_t *);
+int proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *,
+  loff_t *);
+int proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
+int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int, void *,
+  size_t *, loff_t *);
+int proc_do_large_bitmap(struct ctl_table *, int, void *, size_t *, loff_t *);
+int proc_do_static_key(struct ctl_table *table, int write, void *buffer,
+  size_t *lenp, loff_t *ppos);
+# 94 "./include/linux/sysctl.h"
+struct ctl_table_poll {
+ atomic_t event;
+ wait_queue_head_t wait;
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *proc_sys_poll_event(struct ctl_table_poll *poll)
+{
+ return (void *)(unsigned long)atomic_read(&poll->event);
+}
+# 112 "./include/linux/sysctl.h"
+struct ctl_table {
+ const char *procname;
+ void *data;
+ int maxlen;
+ umode_t mode;
+ struct ctl_table *child;
+ proc_handler *proc_handler;
+ struct ctl_table_poll *poll;
+ void *extra1;
+ void *extra2;
+} __attribute__((__designated_init__));
+
+struct ctl_node {
+ struct rb_node node;
+ struct ctl_table_header *header;
+};
+
+
+
+struct ctl_table_header {
+ union {
+  struct {
+   struct ctl_table *ctl_table;
+   int used;
+   int count;
+   int nreg;
+  };
+  struct callback_head rcu;
+ };
+ struct completion *unregistering;
+ struct ctl_table *ctl_table_arg;
+ struct ctl_table_root *root;
+ struct ctl_table_set *set;
+ struct ctl_dir *parent;
+ struct ctl_node *node;
+ struct hlist_head inodes;
+};
+
+struct ctl_dir {
+
+ struct ctl_table_header header;
+ struct rb_root root;
+};
+
+struct ctl_table_set {
+ int (*is_seen)(struct ctl_table_set *);
+ struct ctl_dir dir;
+};
+
+struct ctl_table_root {
+ struct ctl_table_set default_set;
+ struct ctl_table_set *(*lookup)(struct ctl_table_root *root);
+ void (*set_ownership)(struct ctl_table_header *head,
+         struct ctl_table *table,
+         kuid_t *uid, kgid_t *gid);
+ int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
+};
+
+
+struct ctl_path {
+ const char *procname;
+};
+
+
+
+void proc_sys_poll_notify(struct ctl_table_poll *poll);
+
+extern void setup_sysctl_set(struct ctl_table_set *p,
+ struct ctl_table_root *root,
+ int (*is_seen)(struct ctl_table_set *));
+extern void retire_sysctl_set(struct ctl_table_set *set);
+
+struct ctl_table_header *__register_sysctl_table(
+ struct ctl_table_set *set,
+ const char *path, struct ctl_table *table);
+struct ctl_table_header *__register_sysctl_paths(
+ struct ctl_table_set *set,
+ const struct ctl_path *path, struct ctl_table *table);
+struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
+struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
+struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
+      struct ctl_table *table);
+
+void unregister_sysctl_table(struct ctl_table_header * table);
+
+extern int sysctl_init(void);
+void do_sysctl_args(void);
+
+extern int pwrsw_enabled;
+extern int unaligned_enabled;
+extern int unaligned_dump_stack;
+extern int no_unaligned_warning;
+
+extern struct ctl_table sysctl_mount_point[];
+extern struct ctl_table random_table[];
+extern struct ctl_table firmware_config_table[];
+extern struct ctl_table epoll_table[];
+# 242 "./include/linux/sysctl.h"
+int sysctl_max_threads(struct ctl_table *table, int write, void *buffer,
+  size_t *lenp, loff_t *ppos);
+# 18 "./include/linux/key.h" 2
+
+
+# 1 "./include/linux/assoc_array.h" 1
+# 21 "./include/linux/key.h" 2
+
+
+
+
+
+
+
+typedef int32_t key_serial_t;
+
+
+typedef uint32_t key_perm_t;
+
+struct key;
+struct net;
+# 14 "./include/linux/cred.h" 2
+
+
+
+# 1 "./include/linux/sched/user.h" 1
+# 13 "./include/linux/sched/user.h"
+struct user_struct {
+ refcount_t __count;
+ atomic_t processes;
+ atomic_t sigpending;
+# 27 "./include/linux/sched/user.h"
+ unsigned long locked_shm;
+ unsigned long unix_inflight;
+ atomic_long_t pipe_bufs;
+
+
+ struct hlist_node uidhash_node;
+ kuid_t uid;
+
+
+
+ atomic_long_t locked_vm;
+
+
+
+
+
+
+ struct ratelimit_state ratelimit;
+};
+
+extern int uids_sysfs_init(void);
+
+extern struct user_struct *find_user(kuid_t);
+
+extern struct user_struct root_user;
+
+
+
+
+extern struct user_struct * alloc_uid(kuid_t);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct user_struct *get_uid(struct user_struct *u)
+{
+ refcount_inc(&u->__count);
+ return u;
+}
+extern void free_uid(struct user_struct *);
+# 18 "./include/linux/cred.h" 2
+
+struct cred;
+struct inode;
+
+
+
+
+struct group_info {
+ atomic_t usage;
+ int ngroups;
+ kgid_t gid[];
+} __attribute__((__designated_init__));
+# 40 "./include/linux/cred.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct group_info *get_group_info(struct group_info *gi)
+{
+ atomic_inc(&gi->usage);
+ return gi;
+}
+# 56 "./include/linux/cred.h"
+extern struct group_info init_groups;
+# 70 "./include/linux/cred.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void groups_free(struct group_info *group_info)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int in_group_p(kgid_t grp)
+{
+        return 1;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int in_egroup_p(kgid_t grp)
+{
+        return 1;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int groups_search(const struct group_info *group_info, kgid_t grp)
+{
+ return 1;
+}
+# 111 "./include/linux/cred.h"
+struct cred {
+ atomic_t usage;
+
+
+
+
+
+
+
+ kuid_t uid;
+ kgid_t gid;
+ kuid_t suid;
+ kgid_t sgid;
+ kuid_t euid;
+ kgid_t egid;
+ kuid_t fsuid;
+ kgid_t fsgid;
+ unsigned securebits;
+ kernel_cap_t cap_inheritable;
+ kernel_cap_t cap_permitted;
+ kernel_cap_t cap_effective;
+ kernel_cap_t cap_bset;
+ kernel_cap_t cap_ambient;
+# 145 "./include/linux/cred.h"
+ struct user_struct *user;
+ struct user_namespace *user_ns;
+ struct group_info *group_info;
+
+ union {
+  int non_rcu;
+  struct callback_head rcu;
+ };
+} __attribute__((__designated_init__));
+
+extern void __put_cred(struct cred *);
+extern void exit_creds(struct task_struct *);
+extern int copy_creds(struct task_struct *, unsigned long);
+extern const struct cred *get_task_cred(struct task_struct *);
+extern struct cred *cred_alloc_blank(void);
+extern struct cred *prepare_creds(void);
+extern struct cred *prepare_exec_creds(void);
+extern int commit_creds(struct cred *);
+extern void abort_creds(struct cred *);
+extern const struct cred *override_creds(const struct cred *);
+extern void revert_creds(const struct cred *);
+extern struct cred *prepare_kernel_cred(struct task_struct *);
+extern int change_create_files_as(struct cred *, struct inode *);
+extern int set_security_override(struct cred *, u32);
+extern int set_security_override_from_ctx(struct cred *, const char *);
+extern int set_create_files_as(struct cred *, struct inode *);
+extern int cred_fscmp(const struct cred *, const struct cred *);
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) cred_init(void);
+# 203 "./include/linux/cred.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void validate_creds(const struct cred *cred)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void validate_creds_for_do_exit(struct task_struct *tsk)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void validate_process_creds(void)
+{
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool cap_ambient_invariant_ok(const struct cred *cred)
+{
+ return cap_issubset(cred->cap_ambient,
+       cap_intersect(cred->cap_permitted,
+       cred->cap_inheritable));
+}
+# 228 "./include/linux/cred.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct cred *get_new_cred(struct cred *cred)
+{
+ atomic_inc(&cred->usage);
+ return cred;
+}
+# 247 "./include/linux/cred.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const struct cred *get_cred(const struct cred *cred)
+{
+ struct cred *nonconst_cred = (struct cred *) cred;
+ if (!cred)
+  return cred;
+ validate_creds(cred);
+ nonconst_cred->non_rcu = 0;
+ return get_new_cred(nonconst_cred);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) const struct cred *get_cred_rcu(const struct cred *cred)
+{
+ struct cred *nonconst_cred = (struct cred *) cred;
+ if (!cred)
+  return ((void *)0);
+ if (!atomic_inc_not_zero(&nonconst_cred->usage))
+  return ((void *)0);
+ validate_creds(cred);
+ nonconst_cred->non_rcu = 0;
+ return cred;
+}
+# 280 "./include/linux/cred.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_cred(const struct cred *_cred)
+{
+ struct cred *cred = (struct cred *) _cred;
+
+ if (cred) {
+  validate_creds(cred);
+  if (atomic_dec_and_test(&(cred)->usage))
+   __put_cred(cred);
+ }
+}
+# 390 "./include/linux/cred.h"
+extern struct user_namespace init_user_ns;
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct user_namespace *current_user_ns(void)
+{
+ return &init_user_ns;
+}
+# 11 "./include/linux/sched/signal.h" 2
+# 20 "./include/linux/sched/signal.h"
+struct sighand_struct {
+ spinlock_t siglock;
+ refcount_t count;
+ wait_queue_head_t signalfd_wqh;
+ struct k_sigaction action[64];
+};
+
+
+
+
+struct pacct_struct {
+ int ac_flag;
+ long ac_exitcode;
+ unsigned long ac_mem;
+ u64 ac_utime, ac_stime;
+ unsigned long ac_minflt, ac_majflt;
+};
+
+struct cpu_itimer {
+ u64 expires;
+ u64 incr;
+};
+
+
+
+
+
+struct task_cputime_atomic {
+ atomic64_t utime;
+ atomic64_t stime;
+ atomic64_t sum_exec_runtime;
+};
+# 66 "./include/linux/sched/signal.h"
+struct thread_group_cputimer {
+ struct task_cputime_atomic cputime_atomic;
+};
+
+struct multiprocess_signals {
+ sigset_t signal;
+ struct hlist_node node;
+};
+# 82 "./include/linux/sched/signal.h"
+struct signal_struct {
+ refcount_t sigcnt;
+ atomic_t live;
+ int nr_threads;
+ struct list_head thread_head;
+
+ wait_queue_head_t wait_chldexit;
+
+
+ struct task_struct *curr_target;
+
+
+ struct sigpending shared_pending;
+
+
+ struct hlist_head multiprocess;
+
+
+ int group_exit_code;
+
+
+
+
+
+ int notify_count;
+ struct task_struct *group_exit_task;
+
+
+ int group_stop_count;
+ unsigned int flags;
+# 122 "./include/linux/sched/signal.h"
+ unsigned int is_child_subreaper:1;
+ unsigned int has_child_subreaper:1;
+# 150 "./include/linux/sched/signal.h"
+ struct posix_cputimers posix_cputimers;
+
+
+ struct pid *pids[PIDTYPE_MAX];
+
+
+
+
+
+ struct pid *tty_old_pgrp;
+
+
+ int leader;
+
+ struct tty_struct *tty;
+# 175 "./include/linux/sched/signal.h"
+ seqlock_t stats_lock;
+ u64 utime, stime, cutime, cstime;
+ u64 gtime;
+ u64 cgtime;
+ struct prev_cputime prev_cputime;
+ unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw;
+ unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
+ unsigned long inblock, oublock, cinblock, coublock;
+ unsigned long maxrss, cmaxrss;
+ struct task_io_accounting ioac;
+
+
+
+
+
+
+
+ unsigned long long sum_sched_runtime;
+# 203 "./include/linux/sched/signal.h"
+ struct rlimit rlim[16];
+# 220 "./include/linux/sched/signal.h"
+ bool oom_flag_origin;
+ short oom_score_adj;
+ short oom_score_adj_min;
+
+ struct mm_struct *oom_mm;
+
+
+ struct mutex cred_guard_mutex;
+
+
+
+
+
+ struct rw_semaphore exec_update_lock;
+
+
+
+
+} __attribute__((__designated_init__));
+# 259 "./include/linux/sched/signal.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void signal_set_stop_flags(struct signal_struct *sig,
+      unsigned int flags)
+{
+ ({ int __ret_warn_on = !!(sig->flags & (0x00000004|0x00000008)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/sched/signal.h"), "i" (262), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (203)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ sig->flags = (sig->flags & ~((0x00000010|0x00000020) | 0x00000001 | 0x00000002)) | flags;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int signal_group_exit(const struct signal_struct *sig)
+{
+ return (sig->flags & 0x00000004) ||
+  (sig->group_exit_task != ((void *)0));
+}
+
+extern void flush_signals(struct task_struct *);
+extern void ignore_signals(struct task_struct *);
+extern void flush_signal_handlers(struct task_struct *, int force_default);
+extern int dequeue_signal(struct task_struct *task,
+     sigset_t *mask, kernel_siginfo_t *info);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kernel_dequeue_signal(void)
+{
+ struct task_struct *task = get_current();
+ kernel_siginfo_t __info;
+ int ret;
+
+ spin_lock_irq(&task->sighand->siglock);
+ ret = dequeue_signal(task, &task->blocked, &__info);
+ spin_unlock_irq(&task->sighand->siglock);
+
+ return ret;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kernel_signal_stop(void)
+{
+ spin_lock_irq(&get_current()->sighand->siglock);
+ if (get_current()->jobctl & (1UL << 16))
+  do { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(&get_current()->pi_lock); } while (0); get_current()->state = ((0x0100 | 0x0004)); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&get_current()->pi_lock, flags); } while (0); } while (0);
+ spin_unlock_irq(&get_current()->sighand->siglock);
+
+ schedule();
+}
+# 312 "./include/linux/sched/signal.h"
+int force_sig_fault_to_task(int sig, int code, void *addr
+
+
+ , struct task_struct *t);
+int force_sig_fault(int sig, int code, void *addr
+
+ );
+int send_sig_fault(int sig, int code, void *addr
+
+
+ , struct task_struct *t);
+
+int force_sig_mceerr(int code, void *, short);
+int send_sig_mceerr(int code, void *, short, struct task_struct *);
+
+int force_sig_bnderr(void *addr, void *lower, void *upper);
+int force_sig_pkuerr(void *addr, u32 pkey);
+
+int force_sig_ptrace_errno_trap(int errno, void *addr);
+
+extern int send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
+extern void force_sigsegv(int sig);
+extern int force_sig_info(struct kernel_siginfo *);
+extern int __kill_pgrp_info(int sig, struct kernel_siginfo *info, struct pid *pgrp);
+extern int kill_pid_info(int sig, struct kernel_siginfo *info, struct pid *pid);
+extern int kill_pid_usb_asyncio(int sig, int errno, sigval_t addr, struct pid *,
+    const struct cred *);
+extern int kill_pgrp(struct pid *pid, int sig, int priv);
+extern int kill_pid(struct pid *pid, int sig, int priv);
+extern __attribute__((__warn_unused_result__)) bool do_notify_parent(struct task_struct *, int);
+extern void __wake_up_parent(struct task_struct *p, struct task_struct *parent);
+extern void force_sig(int);
+extern int send_sig(int, struct task_struct *, int);
+extern int zap_other_threads(struct task_struct *p);
+extern struct sigqueue *sigqueue_alloc(void);
+extern void sigqueue_free(struct sigqueue *);
+extern int send_sigqueue(struct sigqueue *, struct pid *, enum pid_type);
+extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int restart_syscall(void)
+{
+ set_tsk_thread_flag(get_current(), 2);
+ return -513;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int task_sigpending(struct task_struct *p)
+{
+ return __builtin_expect(!!(test_tsk_thread_flag(p,2)), 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int signal_pending(struct task_struct *p)
+{
+
+
+
+
+
+ if (__builtin_expect(!!(test_tsk_thread_flag(p, 17)), 0))
+  return 1;
+ return task_sigpending(p);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __fatal_signal_pending(struct task_struct *p)
+{
+ return __builtin_expect(!!(sigismember(&p->pending.signal, 9)), 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fatal_signal_pending(struct task_struct *p)
+{
+ return task_sigpending(p) && __fatal_signal_pending(p);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int signal_pending_state(long state, struct task_struct *p)
+{
+ if (!(state & (0x0001 | 0x0100)))
+  return 0;
+ if (!signal_pending(p))
+  return 0;
+
+ return (state & 0x0001) || __fatal_signal_pending(p);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool fault_signal_pending(vm_fault_t fault_flags,
+     struct pt_regs *regs)
+{
+ return __builtin_expect(!!((fault_flags & VM_FAULT_RETRY) && (fatal_signal_pending(get_current()) || (user_mode(regs) && signal_pending(get_current())))), 0)
+
+                                                  ;
+}
+
+
+
+
+
+
+
+extern void recalc_sigpending_and_wake(struct task_struct *t);
+extern void recalc_sigpending(void);
+extern void calculate_sigpending(void);
+
+extern void signal_wake_up_state(struct task_struct *t, unsigned int state);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void signal_wake_up(struct task_struct *t, bool resume)
+{
+ signal_wake_up_state(t, resume ? 0x0100 : 0);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptrace_signal_wake_up(struct task_struct *t, bool resume)
+{
+ signal_wake_up_state(t, resume ? 0x0008 : 0);
+}
+
+void task_join_group_stop(struct task_struct *task);
+# 478 "./include/linux/sched/signal.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_restore_sigmask(void)
+{
+ get_current()->restore_sigmask = true;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_tsk_restore_sigmask(struct task_struct *task)
+{
+ task->restore_sigmask = false;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_restore_sigmask(void)
+{
+ get_current()->restore_sigmask = false;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_restore_sigmask(void)
+{
+ return get_current()->restore_sigmask;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_tsk_restore_sigmask(struct task_struct *task)
+{
+ return task->restore_sigmask;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool test_and_clear_restore_sigmask(void)
+{
+ if (!get_current()->restore_sigmask)
+  return false;
+ get_current()->restore_sigmask = false;
+ return true;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void restore_saved_sigmask(void)
+{
+ if (test_and_clear_restore_sigmask())
+  __set_current_blocked(&get_current()->saved_sigmask);
+}
+
+extern int set_user_sigmask(const sigset_t *umask, size_t sigsetsize);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void restore_saved_sigmask_unless(bool interrupted)
+{
+ if (interrupted)
+  ({ int __ret_warn_on = !!(!signal_pending(get_current())); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/sched/signal.h"), "i" (518), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (204)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ else
+  restore_saved_sigmask();
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) sigset_t *sigmask_to_save(void)
+{
+ sigset_t *res = &get_current()->blocked;
+ if (__builtin_expect(!!(test_restore_sigmask()), 0))
+  res = &get_current()->saved_sigmask;
+ return res;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kill_cad_pid(int sig, int priv)
+{
+ return kill_pid(cad_pid, sig, priv);
+}
+# 543 "./include/linux/sched/signal.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int on_sig_stack(unsigned long sp)
+{
+# 554 "./include/linux/sched/signal.h"
+ if (get_current()->sas_ss_flags & (1U << 31))
+  return 0;
+
+
+
+
+
+ return sp > get_current()->sas_ss_sp &&
+  sp - get_current()->sas_ss_sp <= get_current()->sas_ss_size;
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int sas_ss_flags(unsigned long sp)
+{
+ if (!get_current()->sas_ss_size)
+  return 2;
+
+ return on_sig_stack(sp) ? 1 : 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sas_ss_reset(struct task_struct *p)
+{
+ p->sas_ss_sp = 0;
+ p->sas_ss_size = 0;
+ p->sas_ss_flags = 2;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long sigsp(unsigned long sp, struct ksignal *ksig)
+{
+ if (__builtin_expect(!!((ksig->ka.sa.sa_flags & 0x08000000)), 0) && ! sas_ss_flags(sp))
+
+
+
+  return get_current()->sas_ss_sp + get_current()->sas_ss_size;
+
+ return sp;
+}
+
+extern void __cleanup_sighand(struct sighand_struct *);
+extern void flush_itimer_signals(void);
+# 604 "./include/linux/sched/signal.h"
+extern bool current_is_single_threaded(void);
+# 626 "./include/linux/sched/signal.h"
+typedef int (*proc_visitor)(struct task_struct *p, void *data);
+void walk_process_tree(struct task_struct *top, proc_visitor, void *);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
+struct pid *task_pid_type(struct task_struct *task, enum pid_type type)
+{
+ struct pid *pid;
+ if (type == PIDTYPE_PID)
+  pid = task_pid(task);
+ else
+  pid = task->signal->pids[type];
+ return pid;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid *task_tgid(struct task_struct *task)
+{
+ return task->signal->pids[PIDTYPE_TGID];
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid *task_pgrp(struct task_struct *task)
+{
+ return task->signal->pids[PIDTYPE_PGID];
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct pid *task_session(struct task_struct *task)
+{
+ return task->signal->pids[PIDTYPE_SID];
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_nr_threads(struct task_struct *task)
+{
+ return task->signal->nr_threads;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool thread_group_leader(struct task_struct *p)
+{
+ return p->exit_signal >= 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function))
+bool same_thread_group(struct task_struct *p1, struct task_struct *p2)
+{
+ return p1->signal == p2->signal;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct task_struct *next_thread(const struct task_struct *p)
+{
+ return ({ void *__mptr = (void *)(({ do { extern void __compiletime_assert_205(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_205(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); })); do { extern void __compiletime_assert_206(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(({ do { extern void __compiletime_assert_205(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_205(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); }))), typeof(((struct task_struct *)0)->thread_group)) && !__builtin_types_compatible_p(typeof(*(({ do { extern void __compiletime_assert_205(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_205(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); }))), typeof(void))))) __compiletime_assert_206(); } while (0); ((struct task_struct *)(__mptr - __builtin_offsetof(struct task_struct, thread_group))); })
+                                          ;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int thread_group_empty(struct task_struct *p)
+{
+ return list_empty(&p->thread_group);
+}
+
+
+
+
+extern bool thread_group_exited(struct pid *pid);
+
+extern struct sighand_struct *__lock_task_sighand(struct task_struct *task,
+       unsigned long *flags);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct sighand_struct *lock_task_sighand(struct task_struct *task,
+             unsigned long *flags)
+{
+ struct sighand_struct *ret;
+
+ ret = __lock_task_sighand(task, flags);
+ (void)(ret);
+ return ret;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void unlock_task_sighand(struct task_struct *task,
+      unsigned long *flags)
+{
+ spin_unlock_irqrestore(&task->sighand->siglock, *flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long task_rlimit(const struct task_struct *task,
+  unsigned int limit)
+{
+ return ({ do { extern void __compiletime_assert_207(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(char) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(short) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(int) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(long)) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(long long))) __compiletime_assert_207(); } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_cur), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_cur))) *)&(task->signal->rlim[limit].rlim_cur)); });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long task_rlimit_max(const struct task_struct *task,
+  unsigned int limit)
+{
+ return ({ do { extern void __compiletime_assert_208(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(task->signal->rlim[limit].rlim_max) == sizeof(char) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(short) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(int) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(long)) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(long long))) __compiletime_assert_208(); } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_max), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_max))) *)&(task->signal->rlim[limit].rlim_max)); });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long rlimit(unsigned int limit)
+{
+ return task_rlimit(get_current(), limit);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long rlimit_max(unsigned int limit)
+{
+ return task_rlimit_max(get_current(), limit);
+}
+# 7 "./include/linux/rcuwait.h" 2
+# 16 "./include/linux/rcuwait.h"
+struct rcuwait {
+ struct task_struct *task;
+};
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcuwait_init(struct rcuwait *w)
+{
+ w->task = ((void *)0);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rcuwait_active(struct rcuwait *w)
+{
+ return !!({ typeof(*(w->task)) *_________p1 = (typeof(*(w->task)) *)({ do { extern void __compiletime_assert_209(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_209(); } while (0); (*(const volatile typeof( _Generic(((w->task)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((w->task)))) *)&((w->task))); }); ; ((typeof(*(w->task)) *)(_________p1)); });
+}
+
+extern int rcuwait_wake_up(struct rcuwait *w);
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void prepare_to_rcuwait(struct rcuwait *w)
+{
+ do { uintptr_t _r_a_p__v = (uintptr_t)(get_current()); ; if (__builtin_constant_p(get_current()) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_210(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_210(); } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_211(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)))) __compiletime_assert_211(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_212(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)) || sizeof(*&w->task) == sizeof(long long))) __compiletime_assert_212(); } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void finish_rcuwait(struct rcuwait *w)
+{
+        do { uintptr_t _r_a_p__v = (uintptr_t)(((void *)0)); ; if (__builtin_constant_p(((void *)0)) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_213(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_213(); } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_214(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)))) __compiletime_assert_214(); } while (0); __asm__ __volatile__("": : :"memory"); do { do { extern void __compiletime_assert_215(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)) || sizeof(*&w->task) == sizeof(long long))) __compiletime_assert_215(); } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
+ get_current()->state = (0x0000);
+}
+# 8 "./include/linux/percpu-rwsem.h" 2
+
+# 1 "./include/linux/rcu_sync.h" 1
+# 17 "./include/linux/rcu_sync.h"
+struct rcu_sync {
+ int gp_state;
+ int gp_count;
+ wait_queue_head_t gp_wait;
+
+ struct callback_head cb_head;
+};
+# 32 "./include/linux/rcu_sync.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool rcu_sync_is_idle(struct rcu_sync *rsp)
+{
+ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!rcu_read_lock_any_held())) { __warned = true; lockdep_rcu_suspicious("include/linux/rcu_sync.h", 34, "suspicious rcu_sync_is_idle() usage"); } } while (0)
+                                          ;
+ return !({ do { extern void __compiletime_assert_216(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(rsp->gp_state) == sizeof(char) || sizeof(rsp->gp_state) == sizeof(short) || sizeof(rsp->gp_state) == sizeof(int) || sizeof(rsp->gp_state) == sizeof(long)) || sizeof(rsp->gp_state) == sizeof(long long))) __compiletime_assert_216(); } while (0); (*(const volatile typeof( _Generic((rsp->gp_state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rsp->gp_state))) *)&(rsp->gp_state)); });
+}
+
+extern void rcu_sync_init(struct rcu_sync *);
+extern void rcu_sync_enter_start(struct rcu_sync *);
+extern void rcu_sync_enter(struct rcu_sync *);
+extern void rcu_sync_exit(struct rcu_sync *);
+extern void rcu_sync_dtor(struct rcu_sync *);
+# 10 "./include/linux/percpu-rwsem.h" 2
+
+
+struct percpu_rw_semaphore {
+ struct rcu_sync rss;
+ unsigned int *read_count;
+ struct rcuwait writer;
+ wait_queue_head_t waiters;
+ atomic_t block;
+
+ struct lockdep_map dep_map;
+
+};
+# 45 "./include/linux/percpu-rwsem.h"
+extern bool __percpu_down_read(struct percpu_rw_semaphore *, bool);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_down_read(struct percpu_rw_semaphore *sem)
+{
+ do { do { } while (0); } while (0);
+
+ lock_acquire(&sem->dep_map, 0, 0, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+# 62 "./include/linux/percpu-rwsem.h"
+ if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
+  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) 1) & 0xff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) 1) & 0xffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) 1) & 0xffffffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u64 pto_val__ = ((u64)(1)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
+ else
+  __percpu_down_read(sem, false);
+
+
+
+
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_down_read_trylock(struct percpu_rw_semaphore *sem)
+{
+ bool ret = true;
+
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+
+
+
+ if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
+  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) 1) & 0xff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) 1) & 0xffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) 1) & 0xffffffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u64 pto_val__ = ((u64)(1)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
+ else
+  ret = __percpu_down_read(sem, true);
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+
+
+
+
+
+ if (ret)
+  lock_acquire(&sem->dep_map, 0, 1, 1, 1, ((void *)0), (unsigned long)__builtin_return_address(0));
+
+ return ret;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_up_read(struct percpu_rw_semaphore *sem)
+{
+ lock_release(&sem->dep_map, (unsigned long)__builtin_return_address(0));
+
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+
+
+
+ if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1)) {
+  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xffffffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u64 pto_val__ = ((u64)(-(typeof(*sem->read_count))(1))); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
+ } else {
+
+
+
+
+  __asm__ __volatile__("": : :"memory");
+
+
+
+
+
+  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) -(typeof(*sem->read_count))(1)) & 0xffffffff)); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { typeof((*sem->read_count)) pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*sem->read_count))); }); else do { u64 pto_val__ = ((u64)(-(typeof(*sem->read_count))(1))); if (0) { typeof((*sem->read_count)) pto_tmp__; pto_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*sem->read_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
+  rcuwait_wake_up(&sem->writer);
+ }
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+extern void percpu_down_write(struct percpu_rw_semaphore *);
+extern void percpu_up_write(struct percpu_rw_semaphore *);
+
+extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
+    const char *, struct lock_class_key *);
+
+extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
+# 141 "./include/linux/percpu-rwsem.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
+     bool read, unsigned long ip)
+{
+ lock_release(&sem->dep_map, ip);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_rwsem_acquire(struct percpu_rw_semaphore *sem,
+     bool read, unsigned long ip)
+{
+ lock_acquire(&sem->dep_map, 0, 1, read, 1, ((void *)0), ip);
+}
+# 34 "./include/linux/fs.h" 2
+
+# 1 "./include/linux/delayed_call.h" 1
+# 10 "./include/linux/delayed_call.h"
+struct delayed_call {
+ void (*fn)(void *);
+ void *arg;
+};
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_delayed_call(struct delayed_call *call,
+  void (*fn)(void *), void *arg)
+{
+ call->fn = fn;
+ call->arg = arg;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void do_delayed_call(struct delayed_call *call)
+{
+ if (call->fn)
+  call->fn(call->arg);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clear_delayed_call(struct delayed_call *call)
+{
+ call->fn = ((void *)0);
+}
+# 36 "./include/linux/fs.h" 2
+# 1 "./include/linux/uuid.h" 1
+# 11 "./include/linux/uuid.h"
+# 1 "./include/uapi/linux/uuid.h" 1
+# 23 "./include/uapi/linux/uuid.h"
+typedef struct {
+ __u8 b[16];
+} guid_t;
+# 35 "./include/uapi/linux/uuid.h"
+typedef guid_t uuid_le;
+# 12 "./include/linux/uuid.h" 2
+
+
+
+
+typedef struct {
+ __u8 b[16];
+} uuid_t;
+# 33 "./include/linux/uuid.h"
+extern const guid_t guid_null;
+extern const uuid_t uuid_null;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool guid_equal(const guid_t *u1, const guid_t *u2)
+{
+ return memcmp(u1, u2, sizeof(guid_t)) == 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void guid_copy(guid_t *dst, const guid_t *src)
+{
+ memcpy(dst, src, sizeof(guid_t));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void import_guid(guid_t *dst, const __u8 *src)
+{
+ memcpy(dst, src, sizeof(guid_t));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void export_guid(__u8 *dst, const guid_t *src)
+{
+ memcpy(dst, src, sizeof(guid_t));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool guid_is_null(const guid_t *guid)
+{
+ return guid_equal(guid, &guid_null);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uuid_equal(const uuid_t *u1, const uuid_t *u2)
+{
+ return memcmp(u1, u2, sizeof(uuid_t)) == 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void uuid_copy(uuid_t *dst, const uuid_t *src)
+{
+ memcpy(dst, src, sizeof(uuid_t));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void import_uuid(uuid_t *dst, const __u8 *src)
+{
+ memcpy(dst, src, sizeof(uuid_t));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void export_uuid(__u8 *dst, const uuid_t *src)
+{
+ memcpy(dst, src, sizeof(uuid_t));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool uuid_is_null(const uuid_t *uuid)
+{
+ return uuid_equal(uuid, &uuid_null);
+}
+
+void generate_random_uuid(unsigned char uuid[16]);
+void generate_random_guid(unsigned char guid[16]);
+
+extern void guid_gen(guid_t *u);
+extern void uuid_gen(uuid_t *u);
+
+bool __attribute__((__warn_unused_result__)) uuid_is_valid(const char *uuid);
+
+extern const u8 guid_index[16];
+extern const u8 uuid_index[16];
+
+int guid_parse(const char *uuid, guid_t *u);
+int uuid_parse(const char *uuid, uuid_t *u);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int uuid_le_cmp(const guid_t u1, const guid_t u2)
+{
+ return memcmp(&u1, &u2, sizeof(guid_t));
+}
+# 37 "./include/linux/fs.h" 2
+# 1 "./include/linux/errseq.h" 1
+
+
+
+
+
+
+
+typedef u32 errseq_t;
+
+errseq_t errseq_set(errseq_t *eseq, int err);
+errseq_t errseq_sample(errseq_t *eseq);
+int errseq_check(errseq_t *eseq, errseq_t since);
+int errseq_check_and_advance(errseq_t *eseq, errseq_t *since);
+# 38 "./include/linux/fs.h" 2
+# 1 "./include/linux/ioprio.h" 1
+
+
+
+
+
+# 1 "./include/linux/sched/rt.h" 1
+
+
+
+
+
+
+struct task_struct;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rt_prio(int prio)
+{
+ if (__builtin_expect(!!(prio < 100), 0))
+  return 1;
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int rt_task(struct task_struct *p)
+{
+ return rt_prio(p->prio);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool task_is_realtime(struct task_struct *tsk)
+{
+ int policy = tsk->policy;
+
+ if (policy == 1 || policy == 2)
+  return true;
+ if (policy == 6)
+  return true;
+ return false;
+}
+# 47 "./include/linux/sched/rt.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct task_struct *rt_mutex_get_top_task(struct task_struct *task)
+{
+ return ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool tsk_is_pi_blocked(struct task_struct *tsk)
+{
+ return false;
+}
+
+
+extern void normalize_rt_tasks(void);
+# 7 "./include/linux/ioprio.h" 2
+# 1 "./include/linux/iocontext.h" 1
+# 9 "./include/linux/iocontext.h"
+enum {
+ ICQ_EXITED = 1 << 2,
+ ICQ_DESTROYED = 1 << 3,
+};
+# 73 "./include/linux/iocontext.h"
+struct io_cq {
+ struct request_queue *q;
+ struct io_context *ioc;
+
+
+
+
+
+
+
+ union {
+  struct list_head q_node;
+  struct kmem_cache *__rcu_icq_cache;
+ };
+ union {
+  struct hlist_node ioc_node;
+  struct callback_head __rcu_head;
+ };
+
+ unsigned int flags;
+};
+
+
+
+
+
+struct io_context {
+ atomic_long_t refcount;
+ atomic_t active_ref;
+ atomic_t nr_tasks;
+
+
+ spinlock_t lock;
+
+ unsigned short ioprio;
+
+ struct xarray icq_tree;
+ struct io_cq *icq_hint;
+ struct hlist_head icq_list;
+
+ struct work_struct release_work;
+};
+# 124 "./include/linux/iocontext.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void get_io_context_active(struct io_context *ioc)
+{
+ ({ int __ret_warn_on = !!(atomic_long_read(&ioc->refcount) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/iocontext.h"), "i" (126), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (217)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ ({ int __ret_warn_on = !!(atomic_read(&ioc->active_ref) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/iocontext.h"), "i" (127), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (218)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ atomic_long_inc(&ioc->refcount);
+ atomic_inc(&ioc->active_ref);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ioc_task_link(struct io_context *ioc)
+{
+ get_io_context_active(ioc);
+
+ ({ int __ret_warn_on = !!(atomic_read(&ioc->nr_tasks) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/iocontext.h"), "i" (136), "i" ((1 << 0)|((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (219)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ atomic_inc(&ioc->nr_tasks);
+}
+
+struct task_struct;
+
+
+
+
+
+
+
+struct io_context;
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_io_context(struct io_context *ioc) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void exit_io_context(struct task_struct *task) { }
+# 8 "./include/linux/ioprio.h" 2
+# 27 "./include/linux/ioprio.h"
+enum {
+ IOPRIO_CLASS_NONE,
+ IOPRIO_CLASS_RT,
+ IOPRIO_CLASS_BE,
+ IOPRIO_CLASS_IDLE,
+};
+
+
+
+
+
+
+enum {
+ IOPRIO_WHO_PROCESS = 1,
+ IOPRIO_WHO_PGRP,
+ IOPRIO_WHO_USER,
+};
+# 54 "./include/linux/ioprio.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int task_nice_ioprio(struct task_struct *task)
+{
+ return (task_nice(task) + 20) / 5;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int task_nice_ioclass(struct task_struct *task)
+{
+ if (task->policy == 5)
+  return IOPRIO_CLASS_IDLE;
+ else if (task_is_realtime(task))
+  return IOPRIO_CLASS_RT;
+ else
+  return IOPRIO_CLASS_BE;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_current_ioprio(void)
+{
+ struct io_context *ioc = get_current()->io_context;
+
+ if (ioc)
+  return ioc->ioprio;
+ return (((IOPRIO_CLASS_NONE) << (13)) | 0);
+}
+
+
+
+
+extern int ioprio_best(unsigned short aprio, unsigned short bprio);
+
+extern int set_task_ioprio(struct task_struct *task, int ioprio);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ioprio_check_cap(int ioprio)
+{
+ return -15;
+}
+# 39 "./include/linux/fs.h" 2
+# 1 "./include/linux/fs_types.h" 1
+# 71 "./include/linux/fs_types.h"
+extern unsigned char fs_ftype_to_dtype(unsigned int filetype);
+extern unsigned char fs_umode_to_ftype(umode_t mode);
+extern unsigned char fs_umode_to_dtype(umode_t mode);
+# 40 "./include/linux/fs.h" 2
+
+
+# 1 "./include/linux/mount.h" 1
+# 20 "./include/linux/mount.h"
+struct super_block;
+struct vfsmount;
+struct dentry;
+struct mnt_namespace;
+struct fs_context;
+# 71 "./include/linux/mount.h"
+struct vfsmount {
+ struct dentry *mnt_root;
+ struct super_block *mnt_sb;
+ int mnt_flags;
+ struct user_namespace *mnt_userns;
+} __attribute__((__designated_init__));
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct user_namespace *mnt_user_ns(const struct vfsmount *mnt)
+{
+
+ return ({ typeof( _Generic((*&mnt->mnt_userns), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&mnt->mnt_userns))) ___p1 = ({ do { extern void __compiletime_assert_220(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*&mnt->mnt_userns) == sizeof(char) || sizeof(*&mnt->mnt_userns) == sizeof(short) || sizeof(*&mnt->mnt_userns) == sizeof(int) || sizeof(*&mnt->mnt_userns) == sizeof(long)) || sizeof(*&mnt->mnt_userns) == sizeof(long long))) __compiletime_assert_220(); } while (0); (*(const volatile typeof( _Generic((*&mnt->mnt_userns), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&mnt->mnt_userns))) *)&(*&mnt->mnt_userns)); }); do { extern void __compiletime_assert_221(void) __attribute__((__error__("Need native word sized stores/loads for atomicity."))); if (!((sizeof(*&mnt->mnt_userns) == sizeof(char) || sizeof(*&mnt->mnt_userns) == sizeof(short) || sizeof(*&mnt->mnt_userns) == sizeof(int) || sizeof(*&mnt->mnt_userns) == sizeof(long)))) __compiletime_assert_221(); } while (0); __asm__ __volatile__("": : :"memory"); (typeof(*&mnt->mnt_userns))___p1; });
+}
+
+struct file;
+struct path;
+
+extern int mnt_want_write(struct vfsmount *mnt);
+extern int mnt_want_write_file(struct file *file);
+extern void mnt_drop_write(struct vfsmount *mnt);
+extern void mnt_drop_write_file(struct file *file);
+extern void mntput(struct vfsmount *mnt);
+extern struct vfsmount *mntget(struct vfsmount *mnt);
+extern struct vfsmount *mnt_clone_internal(const struct path *path);
+extern bool __mnt_is_readonly(struct vfsmount *mnt);
+extern bool mnt_may_suid(struct vfsmount *mnt);
+
+struct path;
+extern struct vfsmount *clone_private_mount(const struct path *path);
+extern int __mnt_want_write(struct vfsmount *);
+extern void __mnt_drop_write(struct vfsmount *);
+
+struct file_system_type;
+extern struct vfsmount *fc_mount(struct fs_context *fc);
+extern struct vfsmount *vfs_create_mount(struct fs_context *fc);
+extern struct vfsmount *vfs_kern_mount(struct file_system_type *type,
+          int flags, const char *name,
+          void *data);
+extern struct vfsmount *vfs_submount(const struct dentry *mountpoint,
+         struct file_system_type *type,
+         const char *name, void *data);
+
+extern void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list);
+extern void mark_mounts_for_expiry(struct list_head *mounts);
+
+extern dev_t name_to_dev_t(const char *name);
+
+extern unsigned int sysctl_mount_max;
+
+extern bool path_is_mountpoint(const struct path *path);
+
+extern void kern_unmount_array(struct vfsmount *mnt[], unsigned int num);
+# 43 "./include/linux/fs.h" 2
+
+
+
+# 1 "./include/uapi/linux/fs.h" 1
+# 54 "./include/uapi/linux/fs.h"
+struct file_clone_range {
+ __s64 src_fd;
+ __u64 src_offset;
+ __u64 src_length;
+ __u64 dest_offset;
+};
+
+struct fstrim_range {
+ __u64 start;
+ __u64 len;
+ __u64 minlen;
+};
+
+
+
+
+
+
+struct file_dedupe_range_info {
+ __s64 dest_fd;
+ __u64 dest_offset;
+ __u64 bytes_deduped;
+
+
+
+
+
+
+ __s32 status;
+ __u32 reserved;
+};
+
+
+struct file_dedupe_range {
+ __u64 src_offset;
+ __u64 src_length;
+ __u16 dest_count;
+ __u16 reserved1;
+ __u32 reserved2;
+ struct file_dedupe_range_info info[0];
+};
+
+
+struct files_stat_struct {
+ unsigned long nr_files;
+ unsigned long nr_free_files;
+ unsigned long max_files;
+};
+
+struct inodes_stat_t {
+ long nr_inodes;
+ long nr_unused;
+ long dummy[5];
+};
+
+
+
+
+
+
+
+struct fsxattr {
+ __u32 fsx_xflags;
+ __u32 fsx_extsize;
+ __u32 fsx_nextents;
+ __u32 fsx_projid;
+ __u32 fsx_cowextsize;
+ unsigned char fsx_pad[8];
+};
+# 286 "./include/uapi/linux/fs.h"
+typedef int __kernel_rwf_t;
+# 47 "./include/linux/fs.h" 2
+
+struct backing_dev_info;
+struct bdi_writeback;
+struct bio;
+struct export_operations;
+struct fiemap_extent_info;
+struct hd_geometry;
+struct iovec;
+struct kiocb;
+struct kobject;
+struct pipe_inode_info;
+struct poll_table_struct;
+struct kstatfs;
+struct vm_area_struct;
+struct vfsmount;
+struct cred;
+struct swap_info_struct;
+struct seq_file;
+struct workqueue_struct;
+struct iov_iter;
+struct fscrypt_info;
+struct fscrypt_operations;
+struct fsverity_info;
+struct fsverity_operations;
+struct fs_context;
+struct fs_parameter_spec;
+
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) inode_init(void);
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) inode_init_early(void);
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) files_init(void);
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) files_maxfiles_init(void);
+
+extern struct files_stat_struct files_stat;
+extern unsigned long get_max_files(void);
+extern unsigned int sysctl_nr_open;
+extern struct inodes_stat_t inodes_stat;
+extern int leases_enable, lease_break_time;
+extern int sysctl_protected_symlinks;
+extern int sysctl_protected_hardlinks;
+extern int sysctl_protected_fifos;
+extern int sysctl_protected_regular;
+
+typedef __kernel_rwf_t rwf_t;
+
+struct buffer_head;
+typedef int (get_block_t)(struct inode *inode, sector_t iblock,
+   struct buffer_head *bh_result, int create);
+typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
+   ssize_t bytes, void *private);
+# 221 "./include/linux/fs.h"
+struct iattr {
+ unsigned int ia_valid;
+ umode_t ia_mode;
+ kuid_t ia_uid;
+ kgid_t ia_gid;
+ loff_t ia_size;
+ struct timespec64 ia_atime;
+ struct timespec64 ia_mtime;
+ struct timespec64 ia_ctime;
+
+
+
+
+
+
+ struct file *ia_file;
+};
+
+
+
+
+# 1 "./include/linux/quota.h" 1
+# 40 "./include/linux/quota.h"
+# 1 "./include/linux/percpu_counter.h" 1
+# 97 "./include/linux/percpu_counter.h"
+struct percpu_counter {
+ s64 count;
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int percpu_counter_init(struct percpu_counter *fbc, s64 amount,
+          gfp_t gfp)
+{
+ fbc->count = amount;
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_destroy(struct percpu_counter *fbc)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_set(struct percpu_counter *fbc, s64 amount)
+{
+ fbc->count = amount;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs)
+{
+ if (fbc->count > rhs)
+  return 1;
+ else if (fbc->count < rhs)
+  return -1;
+ else
+  return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+__percpu_counter_compare(struct percpu_counter *fbc, s64 rhs, s32 batch)
+{
+ return percpu_counter_compare(fbc, rhs);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+percpu_counter_add(struct percpu_counter *fbc, s64 amount)
+{
+ do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+ fbc->count += amount;
+ do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+percpu_counter_add_batch(struct percpu_counter *fbc, s64 amount, s32 batch)
+{
+ percpu_counter_add(fbc, amount);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 percpu_counter_read(struct percpu_counter *fbc)
+{
+ return fbc->count;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 percpu_counter_read_positive(struct percpu_counter *fbc)
+{
+ return fbc->count;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
+{
+ return percpu_counter_read_positive(fbc);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) s64 percpu_counter_sum(struct percpu_counter *fbc)
+{
+ return percpu_counter_read(fbc);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_counter_initialized(struct percpu_counter *fbc)
+{
+ return true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_sync(struct percpu_counter *fbc)
+{
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_inc(struct percpu_counter *fbc)
+{
+ percpu_counter_add(fbc, 1);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_dec(struct percpu_counter *fbc)
+{
+ percpu_counter_add(fbc, -1);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
+{
+ percpu_counter_add(fbc, -amount);
+}
+# 41 "./include/linux/quota.h" 2
+
+# 1 "./include/uapi/linux/dqblk_xfs.h" 1
+# 53 "./include/uapi/linux/dqblk_xfs.h"
+typedef struct fs_disk_quota {
+ __s8 d_version;
+ __s8 d_flags;
+ __u16 d_fieldmask;
+ __u32 d_id;
+ __u64 d_blk_hardlimit;
+ __u64 d_blk_softlimit;
+ __u64 d_ino_hardlimit;
+ __u64 d_ino_softlimit;
+ __u64 d_bcount;
+ __u64 d_icount;
+ __s32 d_itimer;
+
+
+ __s32 d_btimer;
+ __u16 d_iwarns;
+ __u16 d_bwarns;
+ __s8 d_itimer_hi;
+ __s8 d_btimer_hi;
+ __s8 d_rtbtimer_hi;
+ __s8 d_padding2;
+ __u64 d_rtb_hardlimit;
+ __u64 d_rtb_softlimit;
+ __u64 d_rtbcount;
+ __s32 d_rtbtimer;
+ __u16 d_rtbwarns;
+ __s16 d_padding3;
+ char d_padding4[8];
+} fs_disk_quota_t;
+# 159 "./include/uapi/linux/dqblk_xfs.h"
+typedef struct fs_qfilestat {
+ __u64 qfs_ino;
+ __u64 qfs_nblks;
+ __u32 qfs_nextents;
+} fs_qfilestat_t;
+
+typedef struct fs_quota_stat {
+ __s8 qs_version;
+ __u16 qs_flags;
+ __s8 qs_pad;
+ fs_qfilestat_t qs_uquota;
+ fs_qfilestat_t qs_gquota;
+ __u32 qs_incoredqs;
+ __s32 qs_btimelimit;
+ __s32 qs_itimelimit;
+ __s32 qs_rtbtimelimit;
+ __u16 qs_bwarnlimit;
+ __u16 qs_iwarnlimit;
+} fs_quota_stat_t;
+# 202 "./include/uapi/linux/dqblk_xfs.h"
+struct fs_qfilestatv {
+ __u64 qfs_ino;
+ __u64 qfs_nblks;
+ __u32 qfs_nextents;
+ __u32 qfs_pad;
+};
+
+struct fs_quota_statv {
+ __s8 qs_version;
+ __u8 qs_pad1;
+ __u16 qs_flags;
+ __u32 qs_incoredqs;
+ struct fs_qfilestatv qs_uquota;
+ struct fs_qfilestatv qs_gquota;
+ struct fs_qfilestatv qs_pquota;
+ __s32 qs_btimelimit;
+ __s32 qs_itimelimit;
+ __s32 qs_rtbtimelimit;
+ __u16 qs_bwarnlimit;
+ __u16 qs_iwarnlimit;
+ __u64 qs_pad2[8];
+};
+# 43 "./include/linux/quota.h" 2
+# 1 "./include/linux/dqblk_v1.h" 1
+# 44 "./include/linux/quota.h" 2
+# 1 "./include/linux/dqblk_v2.h" 1
+# 9 "./include/linux/dqblk_v2.h"
+# 1 "./include/linux/dqblk_qtree.h" 1
+# 18 "./include/linux/dqblk_qtree.h"
+struct dquot;
+struct kqid;
+
+
+struct qtree_fmt_operations {
+ void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
+ void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
+ int (*is_id)(void *disk, struct dquot *dquot);
+};
+
+
+struct qtree_mem_dqinfo {
+ struct super_block *dqi_sb;
+ int dqi_type;
+ unsigned int dqi_blocks;
+ unsigned int dqi_free_blk;
+ unsigned int dqi_free_entry;
+ unsigned int dqi_blocksize_bits;
+ unsigned int dqi_entry_size;
+ unsigned int dqi_usable_bs;
+ unsigned int dqi_qtree_depth;
+ const struct qtree_fmt_operations *dqi_ops;
+};
+
+int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
+int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
+int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
+int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
+int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int qtree_depth(struct qtree_mem_dqinfo *info)
+{
+ unsigned int epb = info->dqi_usable_bs >> 2;
+ unsigned long long entries = epb;
+ int i;
+
+ for (i = 1; entries < (1ULL << 32); i++)
+  entries *= epb;
+ return i;
+}
+int qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid);
+# 10 "./include/linux/dqblk_v2.h" 2
+# 45 "./include/linux/quota.h" 2
+
+
+
+# 1 "./include/linux/projid.h" 1
+# 17 "./include/linux/projid.h"
+struct user_namespace;
+extern struct user_namespace init_user_ns;
+
+typedef __kernel_uid32_t projid_t;
+
+typedef struct {
+ projid_t val;
+} kprojid_t;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) projid_t __kprojid_val(kprojid_t projid)
+{
+ return projid.val;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool projid_eq(kprojid_t left, kprojid_t right)
+{
+ return __kprojid_val(left) == __kprojid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool projid_lt(kprojid_t left, kprojid_t right)
+{
+ return __kprojid_val(left) < __kprojid_val(right);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool projid_valid(kprojid_t projid)
+{
+ return !projid_eq(projid, (kprojid_t){ -1 });
+}
+# 65 "./include/linux/projid.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kprojid_t make_kprojid(struct user_namespace *from, projid_t projid)
+{
+ return (kprojid_t){ projid };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) projid_t from_kprojid(struct user_namespace *to, kprojid_t kprojid)
+{
+ return __kprojid_val(kprojid);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t kprojid)
+{
+ projid_t projid = from_kprojid(to, kprojid);
+ if (projid == (projid_t)-1)
+  projid = 65534;
+ return projid;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
+{
+ return true;
+}
+# 49 "./include/linux/quota.h" 2
+# 1 "./include/uapi/linux/quota.h" 1
+# 90 "./include/uapi/linux/quota.h"
+enum {
+ QIF_BLIMITS_B = 0,
+ QIF_SPACE_B,
+ QIF_ILIMITS_B,
+ QIF_INODES_B,
+ QIF_BTIME_B,
+ QIF_ITIME_B,
+};
+# 110 "./include/uapi/linux/quota.h"
+struct if_dqblk {
+ __u64 dqb_bhardlimit;
+ __u64 dqb_bsoftlimit;
+ __u64 dqb_curspace;
+ __u64 dqb_ihardlimit;
+ __u64 dqb_isoftlimit;
+ __u64 dqb_curinodes;
+ __u64 dqb_btime;
+ __u64 dqb_itime;
+ __u32 dqb_valid;
+};
+
+struct if_nextdqblk {
+ __u64 dqb_bhardlimit;
+ __u64 dqb_bsoftlimit;
+ __u64 dqb_curspace;
+ __u64 dqb_ihardlimit;
+ __u64 dqb_isoftlimit;
+ __u64 dqb_curinodes;
+ __u64 dqb_btime;
+ __u64 dqb_itime;
+ __u32 dqb_valid;
+ __u32 dqb_id;
+};
+# 144 "./include/uapi/linux/quota.h"
+enum {
+ DQF_ROOT_SQUASH_B = 0,
+ DQF_SYS_FILE_B = 16,
+
+ DQF_PRIVATE
+};
+
+
+
+
+
+
+struct if_dqinfo {
+ __u64 dqi_bgrace;
+ __u64 dqi_igrace;
+ __u32 dqi_flags;
+ __u32 dqi_valid;
+};
+# 178 "./include/uapi/linux/quota.h"
+enum {
+ QUOTA_NL_C_UNSPEC,
+ QUOTA_NL_C_WARNING,
+ __QUOTA_NL_C_MAX,
+};
+
+
+enum {
+ QUOTA_NL_A_UNSPEC,
+ QUOTA_NL_A_QTYPE,
+ QUOTA_NL_A_EXCESS_ID,
+ QUOTA_NL_A_WARNING,
+ QUOTA_NL_A_DEV_MAJOR,
+ QUOTA_NL_A_DEV_MINOR,
+ QUOTA_NL_A_CAUSED_ID,
+ QUOTA_NL_A_PAD,
+ __QUOTA_NL_A_MAX,
+};
+# 50 "./include/linux/quota.h" 2
+
+
+
+
+enum quota_type {
+ USRQUOTA = 0,
+ GRPQUOTA = 1,
+ PRJQUOTA = 2,
+};
+
+
+
+
+
+
+typedef __kernel_uid32_t qid_t;
+typedef long long qsize_t;
+
+struct kqid {
+ union {
+  kuid_t uid;
+  kgid_t gid;
+  kprojid_t projid;
+ };
+ enum quota_type type;
+};
+
+extern bool qid_eq(struct kqid left, struct kqid right);
+extern bool qid_lt(struct kqid left, struct kqid right);
+extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
+extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
+extern bool qid_valid(struct kqid qid);
+# 97 "./include/linux/quota.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kqid make_kqid(struct user_namespace *from,
+        enum quota_type type, qid_t qid)
+{
+ struct kqid kqid;
+
+ kqid.type = type;
+ switch (type) {
+ case USRQUOTA:
+  kqid.uid = make_kuid(from, qid);
+  break;
+ case GRPQUOTA:
+  kqid.gid = make_kgid(from, qid);
+  break;
+ case PRJQUOTA:
+  kqid.projid = make_kprojid(from, qid);
+  break;
+ default:
+  do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/quota.h"), "i" (114), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (222)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0);
+ }
+ return kqid;
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kqid make_kqid_invalid(enum quota_type type)
+{
+ struct kqid kqid;
+
+ kqid.type = type;
+ switch (type) {
+ case USRQUOTA:
+  kqid.uid = (kuid_t){ -1 };
+  break;
+ case GRPQUOTA:
+  kqid.gid = (kgid_t){ -1 };
+  break;
+ case PRJQUOTA:
+  kqid.projid = (kprojid_t){ -1 };
+  break;
+ default:
+  do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/quota.h"), "i" (141), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (223)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0);
+ }
+ return kqid;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kqid make_kqid_uid(kuid_t uid)
+{
+ struct kqid kqid;
+ kqid.type = USRQUOTA;
+ kqid.uid = uid;
+ return kqid;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kqid make_kqid_gid(kgid_t gid)
+{
+ struct kqid kqid;
+ kqid.type = GRPQUOTA;
+ kqid.gid = gid;
+ return kqid;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct kqid make_kqid_projid(kprojid_t projid)
+{
+ struct kqid kqid;
+ kqid.type = PRJQUOTA;
+ kqid.projid = projid;
+ return kqid;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool qid_has_mapping(struct user_namespace *ns, struct kqid qid)
+{
+ return from_kqid(ns, qid) != (qid_t) -1;
+}
+
+
+extern spinlock_t dq_data_lock;
+# 205 "./include/linux/quota.h"
+struct mem_dqblk {
+ qsize_t dqb_bhardlimit;
+ qsize_t dqb_bsoftlimit;
+ qsize_t dqb_curspace;
+ qsize_t dqb_rsvspace;
+ qsize_t dqb_ihardlimit;
+ qsize_t dqb_isoftlimit;
+ qsize_t dqb_curinodes;
+ time64_t dqb_btime;
+ time64_t dqb_itime;
+};
+
+
+
+
+struct quota_format_type;
+
+struct mem_dqinfo {
+ struct quota_format_type *dqi_format;
+ int dqi_fmt_id;
+
+ struct list_head dqi_dirty_list;
+ unsigned long dqi_flags;
+ unsigned int dqi_bgrace;
+ unsigned int dqi_igrace;
+ qsize_t dqi_max_spc_limit;
+ qsize_t dqi_max_ino_limit;
+ void *dqi_priv;
+};
+
+struct super_block;
+
+
+
+
+
+
+enum {
+ DQF_INFO_DIRTY_B = DQF_PRIVATE,
+};
+
+
+extern void mark_info_dirty(struct super_block *sb, int type);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int info_dirty(struct mem_dqinfo *info)
+{
+ return test_bit(DQF_INFO_DIRTY_B, &info->dqi_flags);
+}
+
+enum {
+ DQST_LOOKUPS,
+ DQST_DROPS,
+ DQST_READS,
+ DQST_WRITES,
+ DQST_CACHE_HITS,
+ DQST_ALLOC_DQUOTS,
+ DQST_FREE_DQUOTS,
+ DQST_SYNCS,
+ _DQST_DQSTAT_LAST
+};
+
+struct dqstats {
+ unsigned long stat[_DQST_DQSTAT_LAST];
+ struct percpu_counter counter[_DQST_DQSTAT_LAST];
+};
+
+extern struct dqstats dqstats;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dqstats_inc(unsigned int type)
+{
+ percpu_counter_inc(&dqstats.counter[type]);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void dqstats_dec(unsigned int type)
+{
+ percpu_counter_dec(&dqstats.counter[type]);
+}
+# 294 "./include/linux/quota.h"
+struct dquot {
+ struct hlist_node dq_hash;
+ struct list_head dq_inuse;
+ struct list_head dq_free;
+ struct list_head dq_dirty;
+ struct mutex dq_lock;
+ spinlock_t dq_dqb_lock;
+ atomic_t dq_count;
+ struct super_block *dq_sb;
+ struct kqid dq_id;
+ loff_t dq_off;
+ unsigned long dq_flags;
+ struct mem_dqblk dq_dqb;
+};
+
+
+struct quota_format_ops {
+ int (*check_quota_file)(struct super_block *sb, int type);
+ int (*read_file_info)(struct super_block *sb, int type);
+ int (*write_file_info)(struct super_block *sb, int type);
+ int (*free_file_info)(struct super_block *sb, int type);
+ int (*read_dqblk)(struct dquot *dquot);
+ int (*commit_dqblk)(struct dquot *dquot);
+ int (*release_dqblk)(struct dquot *dquot);
+ int (*get_next_id)(struct super_block *sb, struct kqid *qid);
+};
+
+
+struct dquot_operations {
+ int (*write_dquot) (struct dquot *);
+ struct dquot *(*alloc_dquot)(struct super_block *, int);
+ void (*destroy_dquot)(struct dquot *);
+ int (*acquire_dquot) (struct dquot *);
+ int (*release_dquot) (struct dquot *);
+ int (*mark_dirty) (struct dquot *);
+ int (*write_info) (struct super_block *, int);
+
+
+ qsize_t *(*get_reserved_space) (struct inode *);
+ int (*get_projid) (struct inode *, kprojid_t *);
+
+ int (*get_inode_usage) (struct inode *, qsize_t *);
+
+ int (*get_next_id) (struct super_block *sb, struct kqid *qid);
+};
+
+struct path;
+
+
+struct qc_dqblk {
+ int d_fieldmask;
+ u64 d_spc_hardlimit;
+ u64 d_spc_softlimit;
+ u64 d_ino_hardlimit;
+ u64 d_ino_softlimit;
+ u64 d_space;
+ u64 d_ino_count;
+ s64 d_ino_timer;
+
+ s64 d_spc_timer;
+ int d_ino_warns;
+ int d_spc_warns;
+ u64 d_rt_spc_hardlimit;
+ u64 d_rt_spc_softlimit;
+ u64 d_rt_space;
+ s64 d_rt_spc_timer;
+ int d_rt_spc_warns;
+};
+# 395 "./include/linux/quota.h"
+struct qc_type_state {
+ unsigned int flags;
+ unsigned int spc_timelimit;
+
+ unsigned int ino_timelimit;
+ unsigned int rt_spc_timelimit;
+ unsigned int spc_warnlimit;
+ unsigned int ino_warnlimit;
+ unsigned int rt_spc_warnlimit;
+ unsigned long long ino;
+ blkcnt_t blocks;
+ blkcnt_t nextents;
+};
+
+struct qc_state {
+ unsigned int s_incoredqs;
+ struct qc_type_state s_state[3];
+};
+
+
+struct qc_info {
+ int i_fieldmask;
+ unsigned int i_flags;
+ unsigned int i_spc_timelimit;
+
+ unsigned int i_ino_timelimit;
+ unsigned int i_rt_spc_timelimit;
+ unsigned int i_spc_warnlimit;
+ unsigned int i_ino_warnlimit;
+ unsigned int i_rt_spc_warnlimit;
+};
+
+
+struct quotactl_ops {
+ int (*quota_on)(struct super_block *, int, int, const struct path *);
+ int (*quota_off)(struct super_block *, int);
+ int (*quota_enable)(struct super_block *, unsigned int);
+ int (*quota_disable)(struct super_block *, unsigned int);
+ int (*quota_sync)(struct super_block *, int);
+ int (*set_info)(struct super_block *, int, struct qc_info *);
+ int (*get_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
+ int (*get_nextdqblk)(struct super_block *, struct kqid *,
+        struct qc_dqblk *);
+ int (*set_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
+ int (*get_state)(struct super_block *, struct qc_state *);
+ int (*rm_xquota)(struct super_block *, unsigned int);
+};
+
+struct quota_format_type {
+ int qf_fmt_id;
+ const struct quota_format_ops *qf_ops;
+ struct module *qf_owner;
+ struct quota_format_type *qf_next;
+};
+# 464 "./include/linux/quota.h"
+enum {
+ _DQUOT_USAGE_ENABLED = 0,
+ _DQUOT_LIMITS_ENABLED,
+ _DQUOT_SUSPENDED,
+
+
+ _DQUOT_STATE_FLAGS
+};
+# 491 "./include/linux/quota.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int dquot_state_flag(unsigned int flags, int type)
+{
+ return flags << type;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int dquot_generic_flag(unsigned int flags, int type)
+{
+ return (flags >> type) & ((1 << _DQUOT_USAGE_ENABLED * 3) | (1 << _DQUOT_LIMITS_ENABLED * 3) | (1 << _DQUOT_SUSPENDED * 3));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned dquot_state_types(unsigned flags, unsigned flag)
+{
+ do { extern void __compiletime_assert_224(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(flag) == 0 || (((flag) & ((flag) - 1)) != 0)"))); if (!(!((flag) == 0 || (((flag) & ((flag) - 1)) != 0)))) __compiletime_assert_224(); } while (0);
+ return (flags / flag) & ((1 << 3) - 1);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void quota_send_warning(struct kqid qid, dev_t dev,
+          const char warntype)
+{
+ return;
+}
+
+
+struct quota_info {
+ unsigned int flags;
+ struct rw_semaphore dqio_sem;
+ struct inode *files[3];
+ struct mem_dqinfo info[3];
+ const struct quota_format_ops *ops[3];
+};
+
+int register_quota_format(struct quota_format_type *fmt);
+void unregister_quota_format(struct quota_format_type *fmt);
+
+struct quota_module_name {
+ int qm_fmt_id;
+ char *qm_mod_name;
+};
+# 243 "./include/linux/fs.h" 2
+# 276 "./include/linux/fs.h"
+enum positive_aop_returns {
+ AOP_WRITEPAGE_ACTIVATE = 0x80000,
+ AOP_TRUNCATED_PAGE = 0x80001,
+};
+# 289 "./include/linux/fs.h"
+struct page;
+struct address_space;
+struct writeback_control;
+struct readahead_control;
+
+
+
+
+
+enum rw_hint {
+ WRITE_LIFE_NOT_SET = 0,
+ WRITE_LIFE_NONE = 1,
+ WRITE_LIFE_SHORT = 2,
+ WRITE_LIFE_MEDIUM = 3,
+ WRITE_LIFE_LONG = 4,
+ WRITE_LIFE_EXTREME = 5,
+};
+# 322 "./include/linux/fs.h"
+struct kiocb {
+ struct file *ki_filp;
+
+
+
+
+ loff_t ki_pos;
+ void (*ki_complete)(struct kiocb *iocb, long ret, long ret2);
+ void *private;
+ int ki_flags;
+ u16 ki_hint;
+ u16 ki_ioprio;
+ union {
+  unsigned int ki_cookie;
+  struct wait_page_queue *ki_waitq;
+ };
+
+
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_sync_kiocb(struct kiocb *kiocb)
+{
+ return kiocb->ki_complete == ((void *)0);
+}
+# 356 "./include/linux/fs.h"
+typedef struct {
+ size_t written;
+ size_t count;
+ union {
+  char *buf;
+  void *data;
+ } arg;
+ int error;
+} read_descriptor_t;
+
+typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
+  unsigned long, unsigned long);
+
+struct address_space_operations {
+ int (*writepage)(struct page *page, struct writeback_control *wbc);
+ int (*readpage)(struct file *, struct page *);
+
+
+ int (*writepages)(struct address_space *, struct writeback_control *);
+
+
+ int (*set_page_dirty)(struct page *page);
+
+
+
+
+
+ int (*readpages)(struct file *filp, struct address_space *mapping,
+   struct list_head *pages, unsigned nr_pages);
+ void (*readahead)(struct readahead_control *);
+
+ int (*write_begin)(struct file *, struct address_space *mapping,
+    loff_t pos, unsigned len, unsigned flags,
+    struct page **pagep, void **fsdata);
+ int (*write_end)(struct file *, struct address_space *mapping,
+    loff_t pos, unsigned len, unsigned copied,
+    struct page *page, void *fsdata);
+
+
+ sector_t (*bmap)(struct address_space *, sector_t);
+ void (*invalidatepage) (struct page *, unsigned int, unsigned int);
+ int (*releasepage) (struct page *, gfp_t);
+ void (*freepage)(struct page *);
+ ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);
+
+
+
+
+ int (*migratepage) (struct address_space *,
+   struct page *, struct page *, enum migrate_mode);
+ bool (*isolate_page)(struct page *, isolate_mode_t);
+ void (*putback_page)(struct page *);
+ int (*launder_page) (struct page *);
+ int (*is_partially_uptodate) (struct page *, unsigned long,
+     unsigned long);
+ void (*is_dirty_writeback) (struct page *, bool *, bool *);
+ int (*error_remove_page)(struct address_space *, struct page *);
+
+
+ int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
+    sector_t *span);
+ void (*swap_deactivate)(struct file *file);
+};
+
+extern const struct address_space_operations empty_aops;
+
+
+
+
+
+int pagecache_write_begin(struct file *, struct address_space *mapping,
+    loff_t pos, unsigned len, unsigned flags,
+    struct page **pagep, void **fsdata);
+
+int pagecache_write_end(struct file *, struct address_space *mapping,
+    loff_t pos, unsigned len, unsigned copied,
+    struct page *page, void *fsdata);
+# 453 "./include/linux/fs.h"
+struct address_space {
+ struct inode *host;
+ struct xarray i_pages;
+ gfp_t gfp_mask;
+ atomic_t i_mmap_writable;
+
+
+
+
+ struct rb_root_cached i_mmap;
+ struct rw_semaphore i_mmap_rwsem;
+ unsigned long nrpages;
+ unsigned long nrexceptional;
+ unsigned long writeback_index;
+ const struct address_space_operations *a_ops;
+ unsigned long flags;
+ errseq_t wb_err;
+ spinlock_t private_lock;
+ struct list_head private_list;
+ void *private_data;
+} __attribute__((aligned(sizeof(long)))) __attribute__((__designated_init__));
+# 488 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mapping_tagged(struct address_space *mapping, xa_mark_t tag)
+{
+ return xa_marked(&mapping->i_pages, tag);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_lock_write(struct address_space *mapping)
+{
+ down_write(&mapping->i_mmap_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int i_mmap_trylock_write(struct address_space *mapping)
+{
+ return down_write_trylock(&mapping->i_mmap_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_unlock_write(struct address_space *mapping)
+{
+ up_write(&mapping->i_mmap_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_lock_read(struct address_space *mapping)
+{
+ down_read(&mapping->i_mmap_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_unlock_read(struct address_space *mapping)
+{
+ up_read(&mapping->i_mmap_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_assert_locked(struct address_space *mapping)
+{
+ do { ({ int __ret_warn_on = !!(debug_locks && !lock_is_held(&(&mapping->i_mmap_rwsem)->dep_map)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/fs.h"), "i" (520), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (225)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_mmap_assert_write_locked(struct address_space *mapping)
+{
+ do { ({ int __ret_warn_on = !!(debug_locks && !lock_is_held_type(&(&mapping->i_mmap_rwsem)->dep_map, (0))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/fs.h"), "i" (525), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (226)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } while (0);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mapping_mapped(struct address_space *mapping)
+{
+ return !(({ do { extern void __compiletime_assert_227(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(char) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(short) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(int) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long)) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long long))) __compiletime_assert_227(); } while (0); (*(const volatile typeof( _Generic(((&mapping->i_mmap.rb_root)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&mapping->i_mmap.rb_root)->rb_node))) *)&((&mapping->i_mmap.rb_root)->rb_node)); }) == ((void *)0));
+}
+# 545 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mapping_writably_mapped(struct address_space *mapping)
+{
+ return atomic_read(&mapping->i_mmap_writable) > 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mapping_map_writable(struct address_space *mapping)
+{
+ return atomic_inc_unless_negative(&mapping->i_mmap_writable) ?
+  0 : -1;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mapping_unmap_writable(struct address_space *mapping)
+{
+ atomic_dec(&mapping->i_mmap_writable);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mapping_deny_writable(struct address_space *mapping)
+{
+ return atomic_dec_unless_positive(&mapping->i_mmap_writable) ?
+  0 : -16;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mapping_allow_writable(struct address_space *mapping)
+{
+ atomic_inc(&mapping->i_mmap_writable);
+}
+# 583 "./include/linux/fs.h"
+struct posix_acl;
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct posix_acl *
+uncached_acl_sentinel(struct task_struct *task)
+{
+ return (void *)task + 1;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool
+is_uncached_acl(struct posix_acl *acl)
+{
+ return (long)acl & 1;
+}
+
+
+
+
+
+
+
+struct fsnotify_mark_connector;
+
+
+
+
+
+
+struct inode {
+ umode_t i_mode;
+ unsigned short i_opflags;
+ kuid_t i_uid;
+ kgid_t i_gid;
+ unsigned int i_flags;
+
+
+
+
+
+
+ const struct inode_operations *i_op;
+ struct super_block *i_sb;
+ struct address_space *i_mapping;
+
+
+
+
+
+
+ unsigned long i_ino;
+
+
+
+
+
+
+
+ union {
+  const unsigned int i_nlink;
+  unsigned int __i_nlink;
+ };
+ dev_t i_rdev;
+ loff_t i_size;
+ struct timespec64 i_atime;
+ struct timespec64 i_mtime;
+ struct timespec64 i_ctime;
+ spinlock_t i_lock;
+ unsigned short i_bytes;
+ u8 i_blkbits;
+ u8 i_write_hint;
+ blkcnt_t i_blocks;
+
+
+
+
+
+
+ unsigned long i_state;
+ struct rw_semaphore i_rwsem;
+
+ unsigned long dirtied_when;
+ unsigned long dirtied_time_when;
+
+ struct hlist_node i_hash;
+ struct list_head i_io_list;
+# 677 "./include/linux/fs.h"
+ struct list_head i_lru;
+ struct list_head i_sb_list;
+ struct list_head i_wb_list;
+ union {
+  struct hlist_head i_dentry;
+  struct callback_head i_rcu;
+ };
+ atomic64_t i_version;
+ atomic64_t i_sequence;
+ atomic_t i_count;
+ atomic_t i_dio_count;
+ atomic_t i_writecount;
+
+
+
+ union {
+  const struct file_operations *i_fop;
+  void (*free_inode)(struct inode *);
+ };
+ struct file_lock_context *i_flctx;
+ struct address_space i_data;
+ struct list_head i_devices;
+ union {
+  struct pipe_inode_info *i_pipe;
+  struct cdev *i_cdev;
+  char *i_link;
+  unsigned i_dir_seq;
+ };
+
+ __u32 i_generation;
+# 721 "./include/linux/fs.h"
+ void *i_private;
+} __attribute__((__designated_init__));
+
+struct timespec64 timestamp_truncate(struct timespec64 t, struct inode *inode);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int i_blocksize(const struct inode *node)
+{
+ return (1 << node->i_blkbits);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int inode_unhashed(struct inode *inode)
+{
+ return hlist_unhashed(&inode->i_hash);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_fake_hash(struct inode *inode)
+{
+ hlist_add_fake(&inode->i_hash);
+}
+# 763 "./include/linux/fs.h"
+enum inode_i_mutex_lock_class
+{
+ I_MUTEX_NORMAL,
+ I_MUTEX_PARENT,
+ I_MUTEX_CHILD,
+ I_MUTEX_XATTR,
+ I_MUTEX_NONDIR2,
+ I_MUTEX_PARENT2,
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_lock(struct inode *inode)
+{
+ down_write(&inode->i_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_unlock(struct inode *inode)
+{
+ up_write(&inode->i_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_lock_shared(struct inode *inode)
+{
+ down_read(&inode->i_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_unlock_shared(struct inode *inode)
+{
+ up_read(&inode->i_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int inode_trylock(struct inode *inode)
+{
+ return down_write_trylock(&inode->i_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int inode_trylock_shared(struct inode *inode)
+{
+ return down_read_trylock(&inode->i_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int inode_is_locked(struct inode *inode)
+{
+ return rwsem_is_locked(&inode->i_rwsem);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_lock_nested(struct inode *inode, unsigned subclass)
+{
+ down_write_nested(&inode->i_rwsem, subclass);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_lock_shared_nested(struct inode *inode, unsigned subclass)
+{
+ down_read_nested(&inode->i_rwsem, subclass);
+}
+
+void lock_two_nondirectories(struct inode *, struct inode*);
+void unlock_two_nondirectories(struct inode *, struct inode*);
+# 831 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) loff_t i_size_read(const struct inode *inode)
+{
+# 850 "./include/linux/fs.h"
+ return inode->i_size;
+
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_size_write(struct inode *inode, loff_t i_size)
+{
+# 872 "./include/linux/fs.h"
+ inode->i_size = i_size;
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned iminor(const struct inode *inode)
+{
+ return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned imajor(const struct inode *inode)
+{
+ return ((unsigned int) ((inode->i_rdev) >> 20));
+}
+
+struct fown_struct {
+ rwlock_t lock;
+ struct pid *pid;
+ enum pid_type pid_type;
+ kuid_t uid, euid;
+ int signum;
+};
+
+
+
+
+struct file_ra_state {
+ unsigned long start;
+ unsigned int size;
+ unsigned int async_size;
+
+
+ unsigned int ra_pages;
+ unsigned int mmap_miss;
+ loff_t prev_pos;
+};
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int ra_has_index(struct file_ra_state *ra, unsigned long index)
+{
+ return (index >= ra->start &&
+  index < ra->start + ra->size);
+}
+
+struct file {
+ union {
+  struct llist_node fu_llist;
+  struct callback_head fu_rcuhead;
+ } f_u;
+ struct path f_path;
+ struct inode *f_inode;
+ const struct file_operations *f_op;
+
+
+
+
+
+ spinlock_t f_lock;
+ enum rw_hint f_write_hint;
+ atomic_long_t f_count;
+ unsigned int f_flags;
+ fmode_t f_mode;
+ struct mutex f_pos_lock;
+ loff_t f_pos;
+ struct fown_struct f_owner;
+ const struct cred *f_cred;
+ struct file_ra_state f_ra;
+
+ u64 f_version;
+
+
+
+
+ void *private_data;
+
+
+
+
+
+ struct address_space *f_mapping;
+ errseq_t f_wb_err;
+ errseq_t f_sb_err;
+} __attribute__((__designated_init__))
+  __attribute__((aligned(4)));
+
+struct file_handle {
+ __u32 handle_bytes;
+ int handle_type;
+
+ unsigned char f_handle[];
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct file *get_file(struct file *f)
+{
+ atomic_long_inc(&f->f_count);
+ return f;
+}
+# 1007 "./include/linux/fs.h"
+typedef void *fl_owner_t;
+
+struct file_lock;
+
+struct file_lock_operations {
+ void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
+ void (*fl_release_private)(struct file_lock *);
+};
+
+struct lock_manager_operations {
+ fl_owner_t (*lm_get_owner)(fl_owner_t);
+ void (*lm_put_owner)(fl_owner_t);
+ void (*lm_notify)(struct file_lock *);
+ int (*lm_grant)(struct file_lock *, int);
+ bool (*lm_break)(struct file_lock *);
+ int (*lm_change)(struct file_lock *, int, struct list_head *);
+ void (*lm_setup)(struct file_lock *, void **);
+ bool (*lm_breaker_owns_lease)(struct file_lock *);
+};
+
+struct lock_manager {
+ struct list_head list;
+
+
+
+
+ bool block_opens;
+};
+
+struct net;
+void locks_start_grace(struct net *, struct lock_manager *);
+void locks_end_grace(struct lock_manager *);
+bool locks_in_grace(struct net *);
+bool opens_in_grace(struct net *);
+
+
+# 1 "./include/linux/nfs_fs_i.h" 1
+
+
+
+
+struct nlm_lockowner;
+
+
+
+
+struct nfs_lock_info {
+ u32 state;
+ struct nlm_lockowner *owner;
+ struct list_head list;
+};
+
+struct nfs4_lock_state;
+struct nfs4_lock_info {
+ struct nfs4_lock_state *owner;
+};
+# 1044 "./include/linux/fs.h" 2
+# 1062 "./include/linux/fs.h"
+struct file_lock {
+ struct file_lock *fl_blocker;
+ struct list_head fl_list;
+ struct hlist_node fl_link;
+ struct list_head fl_blocked_requests;
+
+
+ struct list_head fl_blocked_member;
+
+
+ fl_owner_t fl_owner;
+ unsigned int fl_flags;
+ unsigned char fl_type;
+ unsigned int fl_pid;
+ int fl_link_cpu;
+ wait_queue_head_t fl_wait;
+ struct file *fl_file;
+ loff_t fl_start;
+ loff_t fl_end;
+
+ struct fasync_struct * fl_fasync;
+
+ unsigned long fl_break_time;
+ unsigned long fl_downgrade_time;
+
+ const struct file_lock_operations *fl_ops;
+ const struct lock_manager_operations *fl_lmops;
+ union {
+  struct nfs_lock_info nfs_fl;
+  struct nfs4_lock_info nfs4_fl;
+  struct {
+   struct list_head link;
+   int state;
+   unsigned int debug_id;
+  } afs;
+ } fl_u;
+} __attribute__((__designated_init__));
+
+struct file_lock_context {
+ spinlock_t flc_lock;
+ struct list_head flc_flock;
+ struct list_head flc_posix;
+ struct list_head flc_lease;
+};
+# 1114 "./include/linux/fs.h"
+extern void send_sigio(struct fown_struct *fown, int fd, int band);
+# 1163 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fcntl_getlk(struct file *file, unsigned int cmd,
+         struct flock *user)
+{
+ return -22;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fcntl_setlk(unsigned int fd, struct file *file,
+         unsigned int cmd, struct flock *user)
+{
+ return -13;
+}
+# 1188 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fcntl_setlease(unsigned int fd, struct file *filp, long arg)
+{
+ return -22;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int fcntl_getlease(struct file *filp)
+{
+ return 2;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void
+locks_free_lock_context(struct inode *inode)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void locks_init_lock(struct file_lock *fl)
+{
+ return;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void locks_copy_conflock(struct file_lock *new, struct file_lock *fl)
+{
+ return;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void locks_copy_lock(struct file_lock *new, struct file_lock *fl)
+{
+ return;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void locks_remove_posix(struct file *filp, fl_owner_t owner)
+{
+ return;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void locks_remove_file(struct file *filp)
+{
+ return;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void posix_test_lock(struct file *filp, struct file_lock *fl)
+{
+ return;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int posix_lock_file(struct file *filp, struct file_lock *fl,
+      struct file_lock *conflock)
+{
+ return -37;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int locks_delete_block(struct file_lock *waiter)
+{
+ return -2;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vfs_test_lock(struct file *filp, struct file_lock *fl)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vfs_lock_file(struct file *filp, unsigned int cmd,
+    struct file_lock *fl, struct file_lock *conf)
+{
+ return -37;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vfs_cancel_lock(struct file *filp, struct file_lock *fl)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl)
+{
+ return -37;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __break_lease(struct inode *inode, unsigned int mode, unsigned int type)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void lease_get_mtime(struct inode *inode,
+       struct timespec64 *time)
+{
+ return;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int generic_setlease(struct file *filp, long arg,
+        struct file_lock **flp, void **priv)
+{
+ return -22;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vfs_setlease(struct file *filp, long arg,
+          struct file_lock **lease, void **priv)
+{
+ return -22;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int lease_modify(struct file_lock *fl, int arg,
+          struct list_head *dispose)
+{
+ return -22;
+}
+
+struct files_struct;
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void show_fd_locks(struct seq_file *f,
+   struct file *filp, struct files_struct *files) {}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct inode *file_inode(const struct file *f)
+{
+ return f->f_inode;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct dentry *file_dentry(const struct file *file)
+{
+ return d_real(file->f_path.dentry, file_inode(file));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
+{
+ return locks_lock_inode_wait(file_inode(filp), fl);
+}
+
+struct fasync_struct {
+ rwlock_t fa_lock;
+ int magic;
+ int fa_fd;
+ struct fasync_struct *fa_next;
+ struct file *fa_file;
+ struct callback_head fa_rcu;
+};
+
+
+
+
+extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
+extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
+extern int fasync_remove_entry(struct file *, struct fasync_struct **);
+extern struct fasync_struct *fasync_alloc(void);
+extern void fasync_free(struct fasync_struct *);
+
+
+extern void kill_fasync(struct fasync_struct **, int, int);
+
+extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
+extern int f_setown(struct file *filp, unsigned long arg, int force);
+extern void f_delown(struct file *filp);
+extern pid_t f_getown(struct file *filp);
+extern int send_sigurg(struct fown_struct *fown);
+# 1399 "./include/linux/fs.h"
+enum {
+ SB_UNFROZEN = 0,
+ SB_FREEZE_WRITE = 1,
+ SB_FREEZE_PAGEFAULT = 2,
+ SB_FREEZE_FS = 3,
+
+ SB_FREEZE_COMPLETE = 4,
+};
+
+
+
+struct sb_writers {
+ int frozen;
+ wait_queue_head_t wait_unfrozen;
+ struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
+};
+
+struct super_block {
+ struct list_head s_list;
+ dev_t s_dev;
+ unsigned char s_blocksize_bits;
+ unsigned long s_blocksize;
+ loff_t s_maxbytes;
+ struct file_system_type *s_type;
+ const struct super_operations *s_op;
+ const struct dquot_operations *dq_op;
+ const struct quotactl_ops *s_qcop;
+ const struct export_operations *s_export_op;
+ unsigned long s_flags;
+ unsigned long s_iflags;
+ unsigned long s_magic;
+ struct dentry *s_root;
+ struct rw_semaphore s_umount;
+ int s_count;
+ atomic_t s_active;
+
+
+
+ const struct xattr_handler **s_xattr;
+# 1449 "./include/linux/fs.h"
+ struct hlist_bl_head s_roots;
+ struct list_head s_mounts;
+ struct block_device *s_bdev;
+ struct backing_dev_info *s_bdi;
+ struct mtd_info *s_mtd;
+ struct hlist_node s_instances;
+ unsigned int s_quota_types;
+ struct quota_info s_dquot;
+
+ struct sb_writers s_writers;
+
+
+
+
+
+
+ void *s_fs_info;
+
+
+ u32 s_time_gran;
+
+ time64_t s_time_min;
+ time64_t s_time_max;
+
+
+
+
+
+ char s_id[32];
+ uuid_t s_uuid;
+
+ unsigned int s_max_links;
+ fmode_t s_mode;
+
+
+
+
+
+ struct mutex s_vfs_rename_mutex;
+
+
+
+
+
+ const char *s_subtype;
+
+ const struct dentry_operations *s_d_op;
+
+
+
+
+ int cleancache_poolid;
+
+ struct shrinker s_shrink;
+
+
+ atomic_long_t s_remove_count;
+
+
+ atomic_long_t s_fsnotify_inode_refs;
+
+
+ int s_readonly_remount;
+
+
+ errseq_t s_wb_err;
+
+
+ struct workqueue_struct *s_dio_done_wq;
+ struct hlist_head s_pins;
+
+
+
+
+
+
+ struct user_namespace *s_user_ns;
+
+
+
+
+
+
+ struct list_lru s_dentry_lru;
+ struct list_lru s_inode_lru;
+ struct callback_head rcu;
+ struct work_struct destroy_work;
+
+ struct mutex s_sync_lock;
+
+
+
+
+ int s_stack_depth;
+
+
+ spinlock_t s_inode_list_lock ;
+ struct list_head s_inodes;
+
+ spinlock_t s_inode_wblist_lock;
+ struct list_head s_inodes_wb;
+} __attribute__((__designated_init__));
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) uid_t i_uid_read(const struct inode *inode)
+{
+ return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) gid_t i_gid_read(const struct inode *inode)
+{
+ return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_uid_write(struct inode *inode, uid_t uid)
+{
+ inode->i_uid = make_kuid(inode->i_sb->s_user_ns, uid);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_gid_write(struct inode *inode, gid_t gid)
+{
+ inode->i_gid = make_kgid(inode->i_sb->s_user_ns, gid);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kuid_t kuid_into_mnt(struct user_namespace *mnt_userns,
+       kuid_t kuid)
+{
+ return make_kuid(mnt_userns, __kuid_val(kuid));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kgid_t kgid_into_mnt(struct user_namespace *mnt_userns,
+       kgid_t kgid)
+{
+ return make_kgid(mnt_userns, __kgid_val(kgid));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kuid_t i_uid_into_mnt(struct user_namespace *mnt_userns,
+        const struct inode *inode)
+{
+ return kuid_into_mnt(mnt_userns, inode->i_uid);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kgid_t i_gid_into_mnt(struct user_namespace *mnt_userns,
+        const struct inode *inode)
+{
+ return kgid_into_mnt(mnt_userns, inode->i_gid);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kuid_t kuid_from_mnt(struct user_namespace *mnt_userns,
+       kuid_t kuid)
+{
+ return (kuid_t){ from_kuid(mnt_userns, kuid) };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kgid_t kgid_from_mnt(struct user_namespace *mnt_userns,
+       kgid_t kgid)
+{
+ return (kgid_t){ from_kgid(mnt_userns, kgid) };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kuid_t fsuid_into_mnt(struct user_namespace *mnt_userns)
+{
+ return kuid_from_mnt(mnt_userns, (({ ({ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((1)))) { __warned = true; lockdep_rcu_suspicious("include/linux/fs.h", 1615, "suspicious rcu_dereference_protected() usage"); } } while (0); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->fsuid; })));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) kgid_t fsgid_into_mnt(struct user_namespace *mnt_userns)
+{
+ return kgid_from_mnt(mnt_userns, (({ ({ do { static bool __attribute__((__section__(".data.unlikely"))) __warned; if (debug_lockdep_rcu_enabled() && !__warned && (!((1)))) { __warned = true; lockdep_rcu_suspicious("include/linux/fs.h", 1620, "suspicious rcu_dereference_protected() usage"); } } while (0); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->fsgid; })));
+}
+
+extern struct timespec64 current_time(struct inode *inode);
+# 1633 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __sb_end_write(struct super_block *sb, int level)
+{
+ percpu_up_read(sb->s_writers.rw_sem + level-1);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __sb_start_write(struct super_block *sb, int level)
+{
+ percpu_down_read(sb->s_writers.rw_sem + level - 1);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __sb_start_write_trylock(struct super_block *sb, int level)
+{
+ return percpu_down_read_trylock(sb->s_writers.rw_sem + level - 1);
+}
+# 1660 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_end_write(struct super_block *sb)
+{
+ __sb_end_write(sb, SB_FREEZE_WRITE);
+}
+# 1672 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_end_pagefault(struct super_block *sb)
+{
+ __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
+}
+# 1684 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_end_intwrite(struct super_block *sb)
+{
+ __sb_end_write(sb, SB_FREEZE_FS);
+}
+# 1708 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_start_write(struct super_block *sb)
+{
+ __sb_start_write(sb, SB_FREEZE_WRITE);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sb_start_write_trylock(struct super_block *sb)
+{
+ return __sb_start_write_trylock(sb, SB_FREEZE_WRITE);
+}
+# 1737 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_start_pagefault(struct super_block *sb)
+{
+ __sb_start_write(sb, SB_FREEZE_PAGEFAULT);
+}
+# 1755 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sb_start_intwrite(struct super_block *sb)
+{
+ __sb_start_write(sb, SB_FREEZE_FS);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sb_start_intwrite_trylock(struct super_block *sb)
+{
+ return __sb_start_write_trylock(sb, SB_FREEZE_FS);
+}
+
+bool inode_owner_or_capable(struct user_namespace *mnt_userns,
+       const struct inode *inode);
+
+
+
+
+int vfs_create(struct user_namespace *, struct inode *,
+        struct dentry *, umode_t, bool);
+int vfs_mkdir(struct user_namespace *, struct inode *,
+       struct dentry *, umode_t);
+int vfs_mknod(struct user_namespace *, struct inode *, struct dentry *,
+              umode_t, dev_t);
+int vfs_symlink(struct user_namespace *, struct inode *,
+  struct dentry *, const char *);
+int vfs_link(struct dentry *, struct user_namespace *, struct inode *,
+      struct dentry *, struct inode **);
+int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
+int vfs_unlink(struct user_namespace *, struct inode *, struct dentry *,
+        struct inode **);
+
+struct renamedata {
+ struct user_namespace *old_mnt_userns;
+ struct inode *old_dir;
+ struct dentry *old_dentry;
+ struct user_namespace *new_mnt_userns;
+ struct inode *new_dir;
+ struct dentry *new_dentry;
+ struct inode **delegated_inode;
+ unsigned int flags;
+} __attribute__((__designated_init__));
+
+int vfs_rename(struct renamedata *);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vfs_whiteout(struct user_namespace *mnt_userns,
+          struct inode *dir, struct dentry *dentry)
+{
+ return vfs_mknod(mnt_userns, dir, dentry, 0020000 | 0,
+    0);
+}
+
+struct dentry *vfs_tmpfile(struct user_namespace *mnt_userns,
+      struct dentry *dentry, umode_t mode, int open_flag);
+
+int vfs_mkobj(struct dentry *, umode_t,
+  int (*f)(struct dentry *, umode_t, void *),
+  void *);
+
+int vfs_fchown(struct file *file, uid_t user, gid_t group);
+int vfs_fchmod(struct file *file, umode_t mode);
+int vfs_utimes(const struct path *path, struct timespec64 *times);
+
+extern long vfs_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
+# 1828 "./include/linux/fs.h"
+void inode_init_owner(struct user_namespace *mnt_userns, struct inode *inode,
+        const struct inode *dir, umode_t mode);
+extern bool may_open_dev(const struct path *path);
+
+
+
+
+
+
+
+struct dir_context;
+typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
+    unsigned);
+
+struct dir_context {
+ filldir_t actor;
+ loff_t pos;
+};
+# 1886 "./include/linux/fs.h"
+struct iov_iter;
+
+struct file_operations {
+ struct module *owner;
+ loff_t (*llseek) (struct file *, loff_t, int);
+ ssize_t (*read) (struct file *, char *, size_t, loff_t *);
+ ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
+ ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
+ ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
+ int (*iopoll)(struct kiocb *kiocb, bool spin);
+ int (*iterate) (struct file *, struct dir_context *);
+ int (*iterate_shared) (struct file *, struct dir_context *);
+ __poll_t (*poll) (struct file *, struct poll_table_struct *);
+ long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
+ long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
+ int (*mmap) (struct file *, struct vm_area_struct *);
+ unsigned long mmap_supported_flags;
+ int (*open) (struct inode *, struct file *);
+ int (*flush) (struct file *, fl_owner_t id);
+ int (*release) (struct inode *, struct file *);
+ int (*fsync) (struct file *, loff_t, loff_t, int datasync);
+ int (*fasync) (int, struct file *, int);
+ int (*lock) (struct file *, int, struct file_lock *);
+ ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
+ unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
+ int (*check_flags)(int);
+ int (*flock) (struct file *, int, struct file_lock *);
+ ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
+ ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
+ int (*setlease)(struct file *, long, struct file_lock **, void **);
+ long (*fallocate)(struct file *file, int mode, loff_t offset,
+     loff_t len);
+ void (*show_fdinfo)(struct seq_file *m, struct file *f);
+
+
+
+ ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
+   loff_t, size_t, unsigned int);
+ loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in,
+       struct file *file_out, loff_t pos_out,
+       loff_t len, unsigned int remap_flags);
+ int (*fadvise)(struct file *, loff_t, loff_t, int);
+} __attribute__((__designated_init__));
+
+struct inode_operations {
+ struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
+ const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
+ int (*permission) (struct user_namespace *, struct inode *, int);
+ struct posix_acl * (*get_acl)(struct inode *, int);
+
+ int (*readlink) (struct dentry *, char *,int);
+
+ int (*create) (struct user_namespace *, struct inode *,struct dentry *,
+         umode_t, bool);
+ int (*link) (struct dentry *,struct inode *,struct dentry *);
+ int (*unlink) (struct inode *,struct dentry *);
+ int (*symlink) (struct user_namespace *, struct inode *,struct dentry *,
+   const char *);
+ int (*mkdir) (struct user_namespace *, struct inode *,struct dentry *,
+        umode_t);
+ int (*rmdir) (struct inode *,struct dentry *);
+ int (*mknod) (struct user_namespace *, struct inode *,struct dentry *,
+        umode_t,dev_t);
+ int (*rename) (struct user_namespace *, struct inode *, struct dentry *,
+   struct inode *, struct dentry *, unsigned int);
+ int (*setattr) (struct user_namespace *, struct dentry *,
+   struct iattr *);
+ int (*getattr) (struct user_namespace *, const struct path *,
+   struct kstat *, u32, unsigned int);
+ ssize_t (*listxattr) (struct dentry *, char *, size_t);
+ int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
+        u64 len);
+ int (*update_time)(struct inode *, struct timespec64 *, int);
+ int (*atomic_open)(struct inode *, struct dentry *,
+      struct file *, unsigned open_flag,
+      umode_t create_mode);
+ int (*tmpfile) (struct user_namespace *, struct inode *,
+   struct dentry *, umode_t);
+ int (*set_acl)(struct user_namespace *, struct inode *,
+         struct posix_acl *, int);
+} __attribute__((__aligned__((1 << (6)))));
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t call_read_iter(struct file *file, struct kiocb *kio,
+         struct iov_iter *iter)
+{
+ return file->f_op->read_iter(kio, iter);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t call_write_iter(struct file *file, struct kiocb *kio,
+          struct iov_iter *iter)
+{
+ return file->f_op->write_iter(kio, iter);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int call_mmap(struct file *file, struct vm_area_struct *vma)
+{
+ return file->f_op->mmap(file, vma);
+}
+
+extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
+extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
+extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
+       loff_t, size_t, unsigned int);
+extern ssize_t generic_copy_file_range(struct file *file_in, loff_t pos_in,
+           struct file *file_out, loff_t pos_out,
+           size_t len, unsigned int flags);
+extern int generic_remap_file_range_prep(struct file *file_in, loff_t pos_in,
+      struct file *file_out, loff_t pos_out,
+      loff_t *count,
+      unsigned int remap_flags);
+extern loff_t do_clone_file_range(struct file *file_in, loff_t pos_in,
+      struct file *file_out, loff_t pos_out,
+      loff_t len, unsigned int remap_flags);
+extern loff_t vfs_clone_file_range(struct file *file_in, loff_t pos_in,
+       struct file *file_out, loff_t pos_out,
+       loff_t len, unsigned int remap_flags);
+extern int vfs_dedupe_file_range(struct file *file,
+     struct file_dedupe_range *same);
+extern loff_t vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
+     struct file *dst_file, loff_t dst_pos,
+     loff_t len, unsigned int remap_flags);
+
+
+struct super_operations {
+    struct inode *(*alloc_inode)(struct super_block *sb);
+ void (*destroy_inode)(struct inode *);
+ void (*free_inode)(struct inode *);
+
+    void (*dirty_inode) (struct inode *, int flags);
+ int (*write_inode) (struct inode *, struct writeback_control *wbc);
+ int (*drop_inode) (struct inode *);
+ void (*evict_inode) (struct inode *);
+ void (*put_super) (struct super_block *);
+ int (*sync_fs)(struct super_block *sb, int wait);
+ int (*freeze_super) (struct super_block *);
+ int (*freeze_fs) (struct super_block *);
+ int (*thaw_super) (struct super_block *);
+ int (*unfreeze_fs) (struct super_block *);
+ int (*statfs) (struct dentry *, struct kstatfs *);
+ int (*remount_fs) (struct super_block *, int *, char *);
+ void (*umount_begin) (struct super_block *);
+
+ int (*show_options)(struct seq_file *, struct dentry *);
+ int (*show_devname)(struct seq_file *, struct dentry *);
+ int (*show_path)(struct seq_file *, struct dentry *);
+ int (*show_stats)(struct seq_file *, struct dentry *);
+
+
+
+
+
+ int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t);
+ long (*nr_cached_objects)(struct super_block *,
+      struct shrink_control *);
+ long (*free_cached_objects)(struct super_block *,
+        struct shrink_control *);
+};
+# 2084 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sb_rdonly(const struct super_block *sb) { return sb->s_flags & 1; }
+# 2114 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool HAS_UNMAPPED_ID(struct user_namespace *mnt_userns,
+       struct inode *inode)
+{
+ return !uid_valid(i_uid_into_mnt(mnt_userns, inode)) ||
+        !gid_valid(i_gid_into_mnt(mnt_userns, inode));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) enum rw_hint file_write_hint(struct file *file)
+{
+ if (file->f_write_hint != WRITE_LIFE_NOT_SET)
+  return file->f_write_hint;
+
+ return file_inode(file)->i_write_hint;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int iocb_flags(struct file *file);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u16 ki_hint_validate(enum rw_hint hint)
+{
+ typeof(((struct kiocb *)0)->ki_hint) max_hint = -1;
+
+ if (hint <= max_hint)
+  return hint;
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_sync_kiocb(struct kiocb *kiocb, struct file *filp)
+{
+ *kiocb = (struct kiocb) {
+  .ki_filp = filp,
+  .ki_flags = iocb_flags(filp),
+  .ki_hint = ki_hint_validate(file_write_hint(filp)),
+  .ki_ioprio = get_current_ioprio(),
+ };
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kiocb_clone(struct kiocb *kiocb, struct kiocb *kiocb_src,
+          struct file *filp)
+{
+ *kiocb = (struct kiocb) {
+  .ki_filp = filp,
+  .ki_flags = kiocb_src->ki_flags,
+  .ki_hint = kiocb_src->ki_hint,
+  .ki_ioprio = kiocb_src->ki_ioprio,
+  .ki_pos = kiocb_src->ki_pos,
+ };
+}
+# 2264 "./include/linux/fs.h"
+extern void __mark_inode_dirty(struct inode *, int);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mark_inode_dirty(struct inode *inode)
+{
+ __mark_inode_dirty(inode, (((1 << 0) | (1 << 1)) | (1 << 2)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void mark_inode_dirty_sync(struct inode *inode)
+{
+ __mark_inode_dirty(inode, (1 << 0));
+}
+# 2284 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool inode_is_dirtytime_only(struct inode *inode)
+{
+ return (inode->i_state & ((1 << 11) | (1 << 3) |
+      (1 << 5) | (1 << 4))) == (1 << 11);
+}
+
+extern void inc_nlink(struct inode *inode);
+extern void drop_nlink(struct inode *inode);
+extern void clear_nlink(struct inode *inode);
+extern void set_nlink(struct inode *inode, unsigned int nlink);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_inc_link_count(struct inode *inode)
+{
+ inc_nlink(inode);
+ mark_inode_dirty(inode);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_dec_link_count(struct inode *inode)
+{
+ drop_nlink(inode);
+ mark_inode_dirty(inode);
+}
+
+enum file_time_flags {
+ S_ATIME = 1,
+ S_MTIME = 2,
+ S_CTIME = 4,
+ S_VERSION = 8,
+};
+
+extern bool atime_needs_update(const struct path *, struct inode *);
+extern void touch_atime(const struct path *);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void file_accessed(struct file *file)
+{
+ if (!(file->f_flags & 01000000))
+  touch_atime(&file->f_path);
+}
+
+extern int file_modified(struct file *file);
+
+int sync_inode(struct inode *inode, struct writeback_control *wbc);
+int sync_inode_metadata(struct inode *inode, int wait);
+
+struct file_system_type {
+ const char *name;
+ int fs_flags;
+# 2338 "./include/linux/fs.h"
+ int (*init_fs_context)(struct fs_context *);
+ const struct fs_parameter_spec *parameters;
+ struct dentry *(*mount) (struct file_system_type *, int,
+         const char *, void *);
+ void (*kill_sb) (struct super_block *);
+ struct module *owner;
+ struct file_system_type * next;
+ struct hlist_head fs_supers;
+
+ struct lock_class_key s_lock_key;
+ struct lock_class_key s_umount_key;
+ struct lock_class_key s_vfs_rename_key;
+ struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];
+
+ struct lock_class_key i_lock_key;
+ struct lock_class_key i_mutex_key;
+ struct lock_class_key i_mutex_dir_key;
+};
+
+
+
+extern struct dentry *mount_bdev(struct file_system_type *fs_type,
+ int flags, const char *dev_name, void *data,
+ int (*fill_super)(struct super_block *, void *, int));
+extern struct dentry *mount_single(struct file_system_type *fs_type,
+ int flags, void *data,
+ int (*fill_super)(struct super_block *, void *, int));
+extern struct dentry *mount_nodev(struct file_system_type *fs_type,
+ int flags, void *data,
+ int (*fill_super)(struct super_block *, void *, int));
+extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
+void generic_shutdown_super(struct super_block *sb);
+void kill_block_super(struct super_block *sb);
+void kill_anon_super(struct super_block *sb);
+void kill_litter_super(struct super_block *sb);
+void deactivate_super(struct super_block *sb);
+void deactivate_locked_super(struct super_block *sb);
+int set_anon_super(struct super_block *s, void *data);
+int set_anon_super_fc(struct super_block *s, struct fs_context *fc);
+int get_anon_bdev(dev_t *);
+void free_anon_bdev(dev_t);
+struct super_block *sget_fc(struct fs_context *fc,
+       int (*test)(struct super_block *, struct fs_context *),
+       int (*set)(struct super_block *, struct fs_context *));
+struct super_block *sget(struct file_system_type *type,
+   int (*test)(struct super_block *,void *),
+   int (*set)(struct super_block *,void *),
+   int flags, void *data);
+# 2404 "./include/linux/fs.h"
+extern int register_filesystem(struct file_system_type *);
+extern int unregister_filesystem(struct file_system_type *);
+extern struct vfsmount *kern_mount(struct file_system_type *);
+extern void kern_unmount(struct vfsmount *mnt);
+extern int may_umount_tree(struct vfsmount *);
+extern int may_umount(struct vfsmount *);
+extern long do_mount(const char *, const char *,
+       const char *, unsigned long, void *);
+extern struct vfsmount *collect_mounts(const struct path *);
+extern void drop_collected_mounts(struct vfsmount *);
+extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
+     struct vfsmount *);
+extern int vfs_statfs(const struct path *, struct kstatfs *);
+extern int user_statfs(const char *, struct kstatfs *);
+extern int fd_statfs(int, struct kstatfs *);
+extern int freeze_super(struct super_block *super);
+extern int thaw_super(struct super_block *super);
+extern bool our_mnt(struct vfsmount *mnt);
+extern __attribute__((__format__(printf, 2, 3)))
+int super_setup_bdi_name(struct super_block *sb, char *fmt, ...);
+extern int super_setup_bdi(struct super_block *sb);
+
+extern int current_umask(void);
+
+extern void ihold(struct inode * inode);
+extern void iput(struct inode *);
+extern int generic_update_time(struct inode *, struct timespec64 *, int);
+
+
+extern struct kobject *fs_kobj;
+# 2486 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int locks_mandatory_locked(struct file *file)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int locks_mandatory_area(struct inode *inode, struct file *filp,
+                                       loff_t start, loff_t end, unsigned char type)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __mandatory_lock(struct inode *inode)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mandatory_lock(struct inode *inode)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int locks_verify_locked(struct file *file)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int locks_verify_truncate(struct inode *inode, struct file *filp,
+     size_t size)
+{
+ return 0;
+}
+# 2583 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int break_lease(struct inode *inode, unsigned int mode)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int break_deleg(struct inode *inode, unsigned int mode)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int break_deleg_wait(struct inode **delegated_inode)
+{
+ do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/fs.h"), "i" (2600), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (228)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0);
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int break_layout(struct inode *inode, bool wait)
+{
+ return 0;
+}
+
+
+
+
+struct audit_names;
+struct filename {
+ const char *name;
+ const char *uptr;
+ int refcnt;
+ struct audit_names *aname;
+ const char iname[];
+};
+_Static_assert(__builtin_offsetof(struct filename, iname) % sizeof(long) == 0, "offsetof(struct filename, iname) % sizeof(long) == 0");
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct user_namespace *file_mnt_user_ns(struct file *file)
+{
+ return mnt_user_ns(file->f_path.mnt);
+}
+extern long vfs_truncate(const struct path *, loff_t);
+int do_truncate(struct user_namespace *, struct dentry *, loff_t start,
+  unsigned int time_attrs, struct file *filp);
+extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
+   loff_t len);
+extern long do_sys_open(int dfd, const char *filename, int flags,
+   umode_t mode);
+extern struct file *file_open_name(struct filename *, int, umode_t);
+extern struct file *filp_open(const char *, int, umode_t);
+extern struct file *file_open_root(struct dentry *, struct vfsmount *,
+       const char *, int, umode_t);
+extern struct file * dentry_open(const struct path *, int, const struct cred *);
+extern struct file * open_with_fake_path(const struct path *, int,
+      struct inode*, const struct cred *);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct file *file_clone_open(struct file *file)
+{
+ return dentry_open(&file->f_path, file->f_flags, file->f_cred);
+}
+extern int filp_close(struct file *, fl_owner_t id);
+
+extern struct filename *getname_flags(const char *, int, int *);
+extern struct filename *getname(const char *);
+extern struct filename *getname_kernel(const char *);
+extern void putname(struct filename *name);
+
+extern int finish_open(struct file *file, struct dentry *dentry,
+   int (*open)(struct inode *, struct file *));
+extern int finish_no_open(struct file *file, struct dentry *dentry);
+
+
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init_early(void);
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init(void);
+
+extern struct kmem_cache *names_cachep;
+
+
+
+
+extern struct super_block *blockdev_superblock;
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool sb_is_blkdev_sb(struct super_block *sb)
+{
+ return 0 && sb == blockdev_superblock;
+}
+
+void emergency_thaw_all(void);
+extern int sync_filesystem(struct super_block *);
+extern const struct file_operations def_blk_fops;
+extern const struct file_operations def_chr_fops;
+# 2683 "./include/linux/fs.h"
+extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
+extern int register_chrdev_region(dev_t, unsigned, const char *);
+extern int __register_chrdev(unsigned int major, unsigned int baseminor,
+        unsigned int count, const char *name,
+        const struct file_operations *fops);
+extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
+    unsigned int count, const char *name);
+extern void unregister_chrdev_region(dev_t, unsigned);
+extern void chrdev_show(struct seq_file *,off_t);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int register_chrdev(unsigned int major, const char *name,
+      const struct file_operations *fops)
+{
+ return __register_chrdev(major, 0, 256, name, fops);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void unregister_chrdev(unsigned int major, const char *name)
+{
+ __unregister_chrdev(major, 0, 256, name);
+}
+
+extern void init_special_inode(struct inode *, umode_t, dev_t);
+
+
+extern void make_bad_inode(struct inode *);
+extern bool is_bad_inode(struct inode *);
+
+unsigned long invalidate_mapping_pages(struct address_space *mapping,
+     unsigned long start, unsigned long end);
+
+void invalidate_mapping_pagevec(struct address_space *mapping,
+    unsigned long start, unsigned long end,
+    unsigned long *nr_pagevec);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void invalidate_remote_inode(struct inode *inode)
+{
+ if ((((inode->i_mode) & 00170000) == 0100000) || (((inode->i_mode) & 00170000) == 0040000) ||
+     (((inode->i_mode) & 00170000) == 0120000))
+  invalidate_mapping_pages(inode->i_mapping, 0, -1);
+}
+extern int invalidate_inode_pages2(struct address_space *mapping);
+extern int invalidate_inode_pages2_range(struct address_space *mapping,
+      unsigned long start, unsigned long end);
+extern int write_inode_now(struct inode *, int);
+extern int filemap_fdatawrite(struct address_space *);
+extern int filemap_flush(struct address_space *);
+extern int filemap_fdatawait_keep_errors(struct address_space *mapping);
+extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
+       loff_t lend);
+extern int filemap_fdatawait_range_keep_errors(struct address_space *mapping,
+  loff_t start_byte, loff_t end_byte);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int filemap_fdatawait(struct address_space *mapping)
+{
+ return filemap_fdatawait_range(mapping, 0, ((long long)(~0ULL >> 1)));
+}
+
+extern bool filemap_range_has_page(struct address_space *, loff_t lstart,
+      loff_t lend);
+extern int filemap_write_and_wait_range(struct address_space *mapping,
+            loff_t lstart, loff_t lend);
+extern int __filemap_fdatawrite_range(struct address_space *mapping,
+    loff_t start, loff_t end, int sync_mode);
+extern int filemap_fdatawrite_range(struct address_space *mapping,
+    loff_t start, loff_t end);
+extern int filemap_check_errors(struct address_space *mapping);
+extern void __filemap_set_wb_err(struct address_space *mapping, int err);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int filemap_write_and_wait(struct address_space *mapping)
+{
+ return filemap_write_and_wait_range(mapping, 0, ((long long)(~0ULL >> 1)));
+}
+
+extern int __attribute__((__warn_unused_result__)) file_fdatawait_range(struct file *file, loff_t lstart,
+      loff_t lend);
+extern int __attribute__((__warn_unused_result__)) file_check_and_advance_wb_err(struct file *file);
+extern int __attribute__((__warn_unused_result__)) file_write_and_wait_range(struct file *file,
+      loff_t start, loff_t end);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int file_write_and_wait(struct file *file)
+{
+ return file_write_and_wait_range(file, 0, ((long long)(~0ULL >> 1)));
+}
+# 2781 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void filemap_set_wb_err(struct address_space *mapping, int err)
+{
+
+ if (__builtin_expect(!!(err), 0))
+  __filemap_set_wb_err(mapping, err);
+}
+# 2798 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int filemap_check_wb_err(struct address_space *mapping,
+     errseq_t since)
+{
+ return errseq_check(&mapping->wb_err, since);
+}
+# 2811 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) errseq_t filemap_sample_wb_err(struct address_space *mapping)
+{
+ return errseq_sample(&mapping->wb_err);
+}
+# 2823 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) errseq_t file_sample_sb_err(struct file *file)
+{
+ return errseq_sample(&file->f_path.dentry->d_sb->s_wb_err);
+}
+
+extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
+      int datasync);
+extern int vfs_fsync(struct file *file, int datasync);
+
+extern int sync_file_range(struct file *file, loff_t offset, loff_t nbytes,
+    unsigned int flags);
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
+{
+ if (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000002)) {
+  int ret = vfs_fsync_range(iocb->ki_filp,
+    iocb->ki_pos - count, iocb->ki_pos - 1,
+    (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000004)) ? 0 : 1);
+  if (ret)
+   return ret;
+ }
+
+ return count;
+}
+
+extern void emergency_sync(void);
+extern void emergency_remount(void);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int bmap(struct inode *inode, sector_t *block)
+{
+ return -22;
+}
+
+
+int notify_change(struct user_namespace *, struct dentry *,
+    struct iattr *, struct inode **);
+int inode_permission(struct user_namespace *, struct inode *, int);
+int generic_permission(struct user_namespace *, struct inode *, int);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int file_permission(struct file *file, int mask)
+{
+ return inode_permission(file_mnt_user_ns(file),
+    file_inode(file), mask);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int path_permission(const struct path *path, int mask)
+{
+ return inode_permission(mnt_user_ns(path->mnt),
+    d_inode(path->dentry), mask);
+}
+int __check_sticky(struct user_namespace *mnt_userns, struct inode *dir,
+     struct inode *inode);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool execute_ok(struct inode *inode)
+{
+ return (inode->i_mode & (00100|00010|00001)) || (((inode->i_mode) & 00170000) == 0040000);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void file_start_write(struct file *file)
+{
+ if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
+  return;
+ sb_start_write(file_inode(file)->i_sb);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool file_start_write_trylock(struct file *file)
+{
+ if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
+  return true;
+ return sb_start_write_trylock(file_inode(file)->i_sb);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void file_end_write(struct file *file)
+{
+ if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
+  return;
+ __sb_end_write(file_inode(file)->i_sb, SB_FREEZE_WRITE);
+}
+# 2924 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_write_access(struct inode *inode)
+{
+ return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -26;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int deny_write_access(struct file *file)
+{
+ struct inode *inode = file_inode(file);
+ return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -26;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void put_write_access(struct inode * inode)
+{
+ atomic_dec(&inode->i_writecount);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void allow_write_access(struct file *file)
+{
+ if (file)
+  atomic_inc(&file_inode(file)->i_writecount);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool inode_is_open_for_write(const struct inode *inode)
+{
+ return atomic_read(&inode->i_writecount) > 0;
+}
+# 2958 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_readcount_dec(struct inode *inode)
+{
+ return;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void i_readcount_inc(struct inode *inode)
+{
+ return;
+}
+
+extern int do_pipe_flags(int *, int);
+
+extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
+ssize_t __kernel_read(struct file *file, void *buf, size_t count, loff_t *pos);
+extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
+extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
+extern struct file * open_exec(const char *);
+
+
+extern bool is_subdir(struct dentry *, struct dentry *);
+extern bool path_is_under(const struct path *, const struct path *);
+
+extern char *file_path(struct file *, char *, int);
+
+
+
+
+extern loff_t default_llseek(struct file *file, loff_t offset, int whence);
+
+extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);
+
+extern int inode_init_always(struct super_block *, struct inode *);
+extern void inode_init_once(struct inode *);
+extern void address_space_init_once(struct address_space *mapping);
+extern struct inode * igrab(struct inode *);
+extern ino_t iunique(struct super_block *, ino_t);
+extern int inode_needs_sync(struct inode *inode);
+extern int generic_delete_inode(struct inode *inode);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int generic_drop_inode(struct inode *inode)
+{
+ return !inode->i_nlink || inode_unhashed(inode);
+}
+extern void d_mark_dontcache(struct inode *inode);
+
+extern struct inode *ilookup5_nowait(struct super_block *sb,
+  unsigned long hashval, int (*test)(struct inode *, void *),
+  void *data);
+extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
+  int (*test)(struct inode *, void *), void *data);
+extern struct inode *ilookup(struct super_block *sb, unsigned long ino);
+
+extern struct inode *inode_insert5(struct inode *inode, unsigned long hashval,
+  int (*test)(struct inode *, void *),
+  int (*set)(struct inode *, void *),
+  void *data);
+extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
+extern struct inode * iget_locked(struct super_block *, unsigned long);
+extern struct inode *find_inode_nowait(struct super_block *,
+           unsigned long,
+           int (*match)(struct inode *,
+          unsigned long, void *),
+           void *data);
+extern struct inode *find_inode_rcu(struct super_block *, unsigned long,
+        int (*)(struct inode *, void *), void *);
+extern struct inode *find_inode_by_ino_rcu(struct super_block *, unsigned long);
+extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
+extern int insert_inode_locked(struct inode *);
+
+extern void lockdep_annotate_inode_mutex_key(struct inode *inode);
+
+
+
+extern void unlock_new_inode(struct inode *);
+extern void discard_new_inode(struct inode *);
+extern unsigned int get_next_ino(void);
+extern void evict_inodes(struct super_block *sb);
+# 3044 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_zero_ino(ino_t ino)
+{
+ return (u32)ino == 0;
+}
+
+extern void __iget(struct inode * inode);
+extern void iget_failed(struct inode *);
+extern void clear_inode(struct inode *);
+extern void __destroy_inode(struct inode *);
+extern struct inode *new_inode_pseudo(struct super_block *sb);
+extern struct inode *new_inode(struct super_block *sb);
+extern void free_inode_nonrcu(struct inode *inode);
+extern int should_remove_suid(struct dentry *);
+extern int file_remove_privs(struct file *);
+
+extern void __insert_inode_hash(struct inode *, unsigned long hashval);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void insert_inode_hash(struct inode *inode)
+{
+ __insert_inode_hash(inode, inode->i_ino);
+}
+
+extern void __remove_inode_hash(struct inode *);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void remove_inode_hash(struct inode *inode)
+{
+ if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
+  __remove_inode_hash(inode);
+}
+
+extern void inode_sb_list_add(struct inode *inode);
+
+extern int sb_set_blocksize(struct super_block *, int);
+extern int sb_min_blocksize(struct super_block *, int);
+
+extern int generic_file_mmap(struct file *, struct vm_area_struct *);
+extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
+extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
+extern int generic_write_check_limits(struct file *file, loff_t pos,
+  loff_t *count);
+extern int generic_file_rw_checks(struct file *file_in, struct file *file_out);
+ssize_t filemap_read(struct kiocb *iocb, struct iov_iter *to,
+  ssize_t already_read);
+extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
+extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
+extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
+extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
+extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);
+
+ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
+  rwf_t flags);
+ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
+  rwf_t flags);
+ssize_t vfs_iocb_iter_read(struct file *file, struct kiocb *iocb,
+      struct iov_iter *iter);
+ssize_t vfs_iocb_iter_write(struct file *file, struct kiocb *iocb,
+       struct iov_iter *iter);
+
+
+extern ssize_t blkdev_read_iter(struct kiocb *iocb, struct iov_iter *to);
+extern ssize_t blkdev_write_iter(struct kiocb *iocb, struct iov_iter *from);
+extern int blkdev_fsync(struct file *filp, loff_t start, loff_t end,
+   int datasync);
+extern void block_sync_page(struct page *page);
+
+
+extern ssize_t generic_file_splice_read(struct file *, loff_t *,
+  struct pipe_inode_info *, size_t, unsigned int);
+extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
+  struct file *, loff_t *, size_t, unsigned int);
+extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
+  struct file *out, loff_t *, size_t len, unsigned int flags);
+extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
+  loff_t *opos, size_t len, unsigned int flags);
+
+
+extern void
+file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
+extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
+extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
+extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
+extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
+extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
+  int whence, loff_t maxsize, loff_t eof);
+extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
+  int whence, loff_t size);
+extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
+extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
+extern int generic_file_open(struct inode * inode, struct file * filp);
+extern int nonseekable_open(struct inode * inode, struct file * filp);
+extern int stream_open(struct inode * inode, struct file * filp);
+# 3162 "./include/linux/fs.h"
+void inode_dio_wait(struct inode *inode);
+# 3171 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_dio_begin(struct inode *inode)
+{
+ atomic_inc(&inode->i_dio_count);
+}
+# 3183 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_dio_end(struct inode *inode)
+{
+ if (atomic_dec_and_test(&inode->i_dio_count))
+  wake_up_bit(&inode->i_state, 9);
+}
+
+
+
+
+void dio_warn_stale_pagecache(struct file *filp);
+
+extern void inode_set_flags(struct inode *inode, unsigned int flags,
+       unsigned int mask);
+
+extern const struct file_operations generic_ro_fops;
+
+
+
+extern int readlink_copy(char *, int, const char *);
+extern int page_readlink(struct dentry *, char *, int);
+extern const char *page_get_link(struct dentry *, struct inode *,
+     struct delayed_call *);
+extern void page_put_link(void *);
+extern int __page_symlink(struct inode *inode, const char *symname, int len,
+  int nofs);
+extern int page_symlink(struct inode *inode, const char *symname, int len);
+extern const struct inode_operations page_symlink_inode_operations;
+extern void kfree_link(void *);
+void generic_fillattr(struct user_namespace *, struct inode *, struct kstat *);
+extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
+extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
+void __inode_add_bytes(struct inode *inode, loff_t bytes);
+void inode_add_bytes(struct inode *inode, loff_t bytes);
+void __inode_sub_bytes(struct inode *inode, loff_t bytes);
+void inode_sub_bytes(struct inode *inode, loff_t bytes);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) loff_t __inode_get_bytes(struct inode *inode)
+{
+ return (((loff_t)inode->i_blocks) << 9) + inode->i_bytes;
+}
+loff_t inode_get_bytes(struct inode *inode);
+void inode_set_bytes(struct inode *inode, loff_t bytes);
+const char *simple_get_link(struct dentry *, struct inode *,
+       struct delayed_call *);
+extern const struct inode_operations simple_symlink_inode_operations;
+
+extern int iterate_dir(struct file *, struct dir_context *);
+
+int vfs_fstatat(int dfd, const char *filename, struct kstat *stat,
+  int flags);
+int vfs_fstat(int fd, struct kstat *stat);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vfs_stat(const char *filename, struct kstat *stat)
+{
+ return vfs_fstatat(-100, filename, stat, 0);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int vfs_lstat(const char *name, struct kstat *stat)
+{
+ return vfs_fstatat(-100, name, stat, 0x100);
+}
+
+extern const char *vfs_get_link(struct dentry *, struct delayed_call *);
+extern int vfs_readlink(struct dentry *, char *, int);
+
+extern struct file_system_type *get_filesystem(struct file_system_type *fs);
+extern void put_filesystem(struct file_system_type *fs);
+extern struct file_system_type *get_fs_type(const char *name);
+extern struct super_block *get_super(struct block_device *);
+extern struct super_block *get_active_super(struct block_device *bdev);
+extern void drop_super(struct super_block *sb);
+extern void drop_super_exclusive(struct super_block *sb);
+extern void iterate_supers(void (*)(struct super_block *, void *), void *);
+extern void iterate_supers_type(struct file_system_type *,
+           void (*)(struct super_block *, void *), void *);
+
+extern int dcache_dir_open(struct inode *, struct file *);
+extern int dcache_dir_close(struct inode *, struct file *);
+extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
+extern int dcache_readdir(struct file *, struct dir_context *);
+extern int simple_setattr(struct user_namespace *, struct dentry *,
+     struct iattr *);
+extern int simple_getattr(struct user_namespace *, const struct path *,
+     struct kstat *, u32, unsigned int);
+extern int simple_statfs(struct dentry *, struct kstatfs *);
+extern int simple_open(struct inode *inode, struct file *file);
+extern int simple_link(struct dentry *, struct inode *, struct dentry *);
+extern int simple_unlink(struct inode *, struct dentry *);
+extern int simple_rmdir(struct inode *, struct dentry *);
+extern int simple_rename(struct user_namespace *, struct inode *,
+    struct dentry *, struct inode *, struct dentry *,
+    unsigned int);
+extern void simple_recursive_removal(struct dentry *,
+                              void (*callback)(struct dentry *));
+extern int noop_fsync(struct file *, loff_t, loff_t, int);
+extern int noop_set_page_dirty(struct page *page);
+extern void noop_invalidatepage(struct page *page, unsigned int offset,
+  unsigned int length);
+extern ssize_t noop_direct_IO(struct kiocb *iocb, struct iov_iter *iter);
+extern int simple_empty(struct dentry *);
+extern int simple_readpage(struct file *file, struct page *page);
+extern int simple_write_begin(struct file *file, struct address_space *mapping,
+   loff_t pos, unsigned len, unsigned flags,
+   struct page **pagep, void **fsdata);
+extern int simple_write_end(struct file *file, struct address_space *mapping,
+   loff_t pos, unsigned len, unsigned copied,
+   struct page *page, void *fsdata);
+extern int always_delete_dentry(const struct dentry *);
+extern struct inode *alloc_anon_inode(struct super_block *);
+extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
+extern const struct dentry_operations simple_dentry_operations;
+
+extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
+extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
+extern const struct file_operations simple_dir_operations;
+extern const struct inode_operations simple_dir_inode_operations;
+extern void make_empty_dir_inode(struct inode *inode);
+extern bool is_empty_dir_inode(struct inode *inode);
+struct tree_descr { const char *name; const struct file_operations *ops; int mode; };
+struct dentry *d_alloc_name(struct dentry *, const char *);
+extern int simple_fill_super(struct super_block *, unsigned long,
+        const struct tree_descr *);
+extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
+extern void simple_release_fs(struct vfsmount **mount, int *count);
+
+extern ssize_t simple_read_from_buffer(void *to, size_t count,
+   loff_t *ppos, const void *from, size_t available);
+extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
+  const void *from, size_t count);
+
+extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
+extern int generic_file_fsync(struct file *, loff_t, loff_t, int);
+
+extern int generic_check_addressable(unsigned, u64);
+
+extern void generic_set_encrypted_ci_d_ops(struct dentry *dentry);
+# 3330 "./include/linux/fs.h"
+int setattr_prepare(struct user_namespace *, struct dentry *, struct iattr *);
+extern int inode_newsize_ok(const struct inode *, loff_t offset);
+void setattr_copy(struct user_namespace *, struct inode *inode,
+    const struct iattr *attr);
+
+extern int file_update_time(struct file *file);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vma_is_dax(const struct vm_area_struct *vma)
+{
+ return vma->vm_file && ((vma->vm_file->f_mapping->host)->i_flags & 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vma_is_fsdax(struct vm_area_struct *vma)
+{
+ struct inode *inode;
+
+ if (!0 || !vma->vm_file)
+  return false;
+ if (!vma_is_dax(vma))
+  return false;
+ inode = file_inode(vma->vm_file);
+ if ((((inode->i_mode) & 00170000) == 0020000))
+  return false;
+ return true;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int iocb_flags(struct file *file)
+{
+ int res = 0;
+ if (file->f_flags & 00002000)
+  res |= ( int) (( __kernel_rwf_t)0x00000010);
+ if (file->f_flags & 00040000)
+  res |= (1 << 17);
+ if ((file->f_flags & 00010000) || (((file->f_mapping->host)->i_sb->s_flags & (16)) || ((file->f_mapping->host)->i_flags & (1 << 0))))
+  res |= ( int) (( __kernel_rwf_t)0x00000002);
+ if (file->f_flags & 04000000)
+  res |= ( int) (( __kernel_rwf_t)0x00000004);
+ return res;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
+{
+ int kiocb_flags = 0;
+
+
+ do { extern void __compiletime_assert_229(void) __attribute__((__error__("BUILD_BUG_ON failed: " "(__force int) RWF_SUPPORTED & IOCB_EVENTFD"))); if (!(!(( int) ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)) & (1 << 16)))) __compiletime_assert_229(); } while (0);
+
+ if (!flags)
+  return 0;
+ if (__builtin_expect(!!(flags & ~((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010))), 0))
+  return -95;
+
+ if (flags & (( __kernel_rwf_t)0x00000008)) {
+  if (!(ki->ki_filp->f_mode & (( fmode_t)0x8000000)))
+   return -95;
+  kiocb_flags |= (1 << 20);
+ }
+ kiocb_flags |= ( int) (flags & ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)));
+ if (flags & (( __kernel_rwf_t)0x00000004))
+  kiocb_flags |= ( int) (( __kernel_rwf_t)0x00000002);
+
+ ki->ki_flags |= kiocb_flags;
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) ino_t parent_ino(struct dentry *dentry)
+{
+ ino_t res;
+
+
+
+
+
+ spin_lock(&dentry->d_lockref.lock);
+ res = dentry->d_parent->d_inode->i_ino;
+ spin_unlock(&dentry->d_lockref.lock);
+ return res;
+}
+
+
+
+
+
+
+
+struct simple_transaction_argresp {
+ ssize_t size;
+ char data[];
+};
+
+
+
+char *simple_transaction_get(struct file *file, const char *buf,
+    size_t size);
+ssize_t simple_transaction_read(struct file *file, char *buf,
+    size_t size, loff_t *pos);
+int simple_transaction_release(struct inode *inode, struct file *file);
+
+void simple_transaction_set(struct file *file, size_t n);
+# 3461 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__format__(printf, 1, 2)))
+void __simple_attr_check_format(const char *fmt, ...)
+{
+
+}
+
+int simple_attr_open(struct inode *inode, struct file *file,
+       int (*get)(void *, u64 *), int (*set)(void *, u64),
+       const char *fmt);
+int simple_attr_release(struct inode *inode, struct file *file);
+ssize_t simple_attr_read(struct file *file, char *buf,
+    size_t len, loff_t *ppos);
+ssize_t simple_attr_write(struct file *file, const char *buf,
+     size_t len, loff_t *ppos);
+
+struct ctl_table;
+int proc_nr_files(struct ctl_table *table, int write,
+    void *buffer, size_t *lenp, loff_t *ppos);
+int proc_nr_dentry(struct ctl_table *table, int write,
+    void *buffer, size_t *lenp, loff_t *ppos);
+int proc_nr_inodes(struct ctl_table *table, int write,
+     void *buffer, size_t *lenp, loff_t *ppos);
+int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) get_filesystem_list(char *buf);
+# 3492 "./include/linux/fs.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_sxid(umode_t mode)
+{
+ return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int check_sticky(struct user_namespace *mnt_userns,
+          struct inode *dir, struct inode *inode)
+{
+ if (!(dir->i_mode & 0001000))
+  return 0;
+
+ return __check_sticky(mnt_userns, dir, inode);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void inode_has_no_xattr(struct inode *inode)
+{
+ if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & (1<<28)))
+  inode->i_flags |= (1 << 12);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_root_inode(struct inode *inode)
+{
+ return inode == inode->i_sb->s_root->d_inode;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_emit(struct dir_context *ctx,
+       const char *name, int namelen,
+       u64 ino, unsigned type)
+{
+ return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_emit_dot(struct file *file, struct dir_context *ctx)
+{
+ return ctx->actor(ctx, ".", 1, ctx->pos,
+     file->f_path.dentry->d_inode->i_ino, 4) == 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
+{
+ return ctx->actor(ctx, "..", 2, ctx->pos,
+     parent_ino(file->f_path.dentry), 4) == 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_emit_dots(struct file *file, struct dir_context *ctx)
+{
+ if (ctx->pos == 0) {
+  if (!dir_emit_dot(file, ctx))
+   return false;
+  ctx->pos = 1;
+ }
+ if (ctx->pos == 1) {
+  if (!dir_emit_dotdot(file, ctx))
+   return false;
+  ctx->pos = 2;
+ }
+ return true;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_relax(struct inode *inode)
+{
+ inode_unlock(inode);
+ inode_lock(inode);
+ return !((inode)->i_flags & (1 << 4));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool dir_relax_shared(struct inode *inode)
+{
+ inode_unlock_shared(inode);
+ inode_lock_shared(inode);
+ return !((inode)->i_flags & (1 << 4));
+}
+
+extern bool path_noexec(const struct path *path);
+extern void inode_nohighmem(struct inode *inode);
+
+
+extern int vfs_fadvise(struct file *file, loff_t offset, loff_t len,
+         int advice);
+extern int generic_fadvise(struct file *file, loff_t offset, loff_t len,
+      int advice);
+
+int vfs_ioc_setflags_prepare(struct inode *inode, unsigned int oldflags,
+        unsigned int flags);
+
+int vfs_ioc_fssetxattr_check(struct inode *inode, const struct fsxattr *old_fa,
+        struct fsxattr *fa);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void simple_fill_fsxattr(struct fsxattr *fa, __u32 xflags)
+{
+ memset(fa, 0, sizeof(*fa));
+ fa->fsx_xflags = xflags;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int inode_drain_writes(struct inode *inode)
+{
+ inode_dio_wait(inode);
+ return filemap_write_and_wait(inode->i_mapping);
+}
+# 5 "./rust/kernel/bindings_helper.h" 2
+# 1 "./include/linux/module.h" 1
+# 16 "./include/linux/module.h"
+# 1 "./include/linux/kmod.h" 1
+# 9 "./include/linux/kmod.h"
+# 1 "./include/linux/umh.h" 1
+# 11 "./include/linux/umh.h"
+struct cred;
+struct file;
+
+
+
+
+
+
+struct subprocess_info {
+ struct work_struct work;
+ struct completion *complete;
+ const char *path;
+ char **argv;
+ char **envp;
+ int wait;
+ int retval;
+ int (*init)(struct subprocess_info *info, struct cred *new);
+ void (*cleanup)(struct subprocess_info *info);
+ void *data;
+} __attribute__((__designated_init__));
+
+extern int
+call_usermodehelper(const char *path, char **argv, char **envp, int wait);
+
+extern struct subprocess_info *
+call_usermodehelper_setup(const char *path, char **argv, char **envp,
+     gfp_t gfp_mask,
+     int (*init)(struct subprocess_info *info, struct cred *new),
+     void (*cleanup)(struct subprocess_info *), void *data);
+
+extern int
+call_usermodehelper_exec(struct subprocess_info *info, int wait);
+
+extern struct ctl_table usermodehelper_table[];
+
+enum umh_disable_depth {
+ UMH_ENABLED = 0,
+ UMH_FREEZING,
+ UMH_DISABLED,
+};
+
+extern int __usermodehelper_disable(enum umh_disable_depth depth);
+extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int usermodehelper_disable(void)
+{
+ return __usermodehelper_disable(UMH_DISABLED);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void usermodehelper_enable(void)
+{
+ __usermodehelper_set_disable_depth(UMH_ENABLED);
+}
+
+extern int usermodehelper_read_trylock(void);
+extern long usermodehelper_read_lock_wait(long timeout);
+extern void usermodehelper_read_unlock(void);
+# 10 "./include/linux/kmod.h" 2
+# 20 "./include/linux/kmod.h"
+extern char modprobe_path[];
+
+
+extern __attribute__((__format__(printf, 2, 3)))
+int __request_module(bool wait, const char *name, ...);
+# 17 "./include/linux/module.h" 2
+
+# 1 "./include/linux/elf.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/asm/elf.h" 1
+# 11 "./arch/x86/include/asm/elf.h"
+# 1 "./arch/x86/include/asm/user.h" 1
+
+
+
+
+
+
+
+# 1 "./arch/x86/include/asm/user_64.h" 1
+
+
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
+# 6 "./arch/x86/include/asm/user_64.h" 2
+# 51 "./arch/x86/include/asm/user_64.h"
+struct user_i387_struct {
+ unsigned short cwd;
+ unsigned short swd;
+ unsigned short twd;
+
+ unsigned short fop;
+ __u64 rip;
+ __u64 rdp;
+ __u32 mxcsr;
+ __u32 mxcsr_mask;
+ __u32 st_space[32];
+ __u32 xmm_space[64];
+ __u32 padding[24];
+};
+
+
+
+
+struct user_regs_struct {
+ unsigned long r15;
+ unsigned long r14;
+ unsigned long r13;
+ unsigned long r12;
+ unsigned long bp;
+ unsigned long bx;
+ unsigned long r11;
+ unsigned long r10;
+ unsigned long r9;
+ unsigned long r8;
+ unsigned long ax;
+ unsigned long cx;
+ unsigned long dx;
+ unsigned long si;
+ unsigned long di;
+ unsigned long orig_ax;
+ unsigned long ip;
+ unsigned long cs;
+ unsigned long flags;
+ unsigned long sp;
+ unsigned long ss;
+ unsigned long fs_base;
+ unsigned long gs_base;
+ unsigned long ds;
+ unsigned long es;
+ unsigned long fs;
+ unsigned long gs;
+};
+
+
+
+
+
+struct user {
+
+
+  struct user_regs_struct regs;
+
+  int u_fpvalid;
+
+  int pad0;
+  struct user_i387_struct i387;
+
+  unsigned long int u_tsize;
+  unsigned long int u_dsize;
+  unsigned long int u_ssize;
+  unsigned long start_code;
+  unsigned long start_stack;
+
+
+
+  long int signal;
+  int reserved;
+  int pad1;
+  unsigned long u_ar0;
+
+  struct user_i387_struct *u_fpstate;
+  unsigned long magic;
+  char u_comm[32];
+  unsigned long u_debugreg[8];
+  unsigned long error_code;
+  unsigned long fault_address;
+};
+# 9 "./arch/x86/include/asm/user.h" 2
+
+
+# 1 "./arch/x86/include/generated/uapi/asm/types.h" 1
+# 12 "./arch/x86/include/asm/user.h" 2
+
+struct user_ymmh_regs {
+
+ __u32 ymmh_space[64];
+};
+
+struct user_xstate_header {
+ __u64 xfeatures;
+ __u64 reserved1[2];
+ __u64 reserved2[5];
+};
+# 54 "./arch/x86/include/asm/user.h"
+struct user_xstateregs {
+ struct {
+  __u64 fpx_space[58];
+  __u64 xstate_fx_sw[6];
+ } i387;
+ struct user_xstate_header header;
+ struct user_ymmh_regs ymmh;
+
+};
+# 12 "./arch/x86/include/asm/elf.h" 2
+
+# 1 "./arch/x86/include/asm/fsgsbase.h" 1
+# 17 "./arch/x86/include/asm/fsgsbase.h"
+extern unsigned long x86_fsbase_read_task(struct task_struct *task);
+extern unsigned long x86_gsbase_read_task(struct task_struct *task);
+extern void x86_fsbase_write_task(struct task_struct *task, unsigned long fsbase);
+extern void x86_gsbase_write_task(struct task_struct *task, unsigned long gsbase);
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long rdfsbase(void)
+{
+ unsigned long fsbase;
+
+ asm volatile("rdfsbase %0" : "=r" (fsbase) :: "memory");
+
+ return fsbase;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long rdgsbase(void)
+{
+ unsigned long gsbase;
+
+ asm volatile("rdgsbase %0" : "=r" (gsbase) :: "memory");
+
+ return gsbase;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void wrfsbase(unsigned long fsbase)
+{
+ asm volatile("wrfsbase %0" :: "r" (fsbase) : "memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void wrgsbase(unsigned long gsbase)
+{
+ asm volatile("wrgsbase %0" :: "r" (gsbase) : "memory");
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long x86_fsbase_read_cpu(void)
+{
+ unsigned long fsbase;
+
+ if ((__builtin_constant_p(( 9*32+ 0)) && ( (((( 9*32+ 0))>>5)==(0) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+ 0))>>5)==(1) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+ 0))>>5)==(2) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(3) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+ 0))>>5)==(4) && (1UL<<((( 9*32+ 0))&31) & (0) )) || (((( 9*32+ 0))>>5)==(5) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(6) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(7) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(8) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(9) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(10) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(11) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(12) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(13) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(14) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(15) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(16) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(17) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(18) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(19) && (1UL<<((( 9*32+ 0))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 9*32+ 0), (unsigned long *)((&boot_cpu_data)->x86_capability))))
+  fsbase = rdfsbase();
+ else
+  ((fsbase) = native_read_msr((0xc0000100)));
+
+ return fsbase;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void x86_fsbase_write_cpu(unsigned long fsbase)
+{
+ if ((__builtin_constant_p(( 9*32+ 0)) && ( (((( 9*32+ 0))>>5)==(0) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+ 0))>>5)==(1) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+ 0))>>5)==(2) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(3) && (1UL<<((( 9*32+ 0))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+ 0))>>5)==(4) && (1UL<<((( 9*32+ 0))&31) & (0) )) || (((( 9*32+ 0))>>5)==(5) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(6) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(7) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(8) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(9) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(10) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(11) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(12) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(13) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(14) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(15) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(16) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(17) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(18) && (1UL<<((( 9*32+ 0))&31) & 0 )) || (((( 9*32+ 0))>>5)==(19) && (1UL<<((( 9*32+ 0))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 9*32+ 0), (unsigned long *)((&boot_cpu_data)->x86_capability))))
+  wrfsbase(fsbase);
+ else
+  wrmsrl(0xc0000100, fsbase);
+}
+
+extern unsigned long x86_gsbase_read_cpu_inactive(void);
+extern void x86_gsbase_write_cpu_inactive(unsigned long gsbase);
+extern unsigned long x86_fsgsbase_read_task(struct task_struct *task,
+         unsigned short selector);
+# 14 "./arch/x86/include/asm/elf.h" 2
+
+typedef unsigned long elf_greg_t;
+
+
+typedef elf_greg_t elf_gregset_t[(sizeof(struct user_regs_struct) / sizeof(elf_greg_t))];
+
+typedef struct user_i387_struct elf_fpregset_t;
+# 75 "./arch/x86/include/asm/elf.h"
+# 1 "./arch/x86/include/asm/vdso.h" 1
+# 13 "./arch/x86/include/asm/vdso.h"
+struct vdso_image {
+ void *data;
+ unsigned long size;
+
+ unsigned long alt, alt_len;
+ unsigned long extable_base, extable_len;
+ const void *extable;
+
+ long sym_vvar_start;
+
+ long sym_vvar_page;
+ long sym_pvclock_page;
+ long sym_hvclock_page;
+ long sym_timens_page;
+ long sym_VDSO32_NOTE_MASK;
+ long sym___kernel_sigreturn;
+ long sym___kernel_rt_sigreturn;
+ long sym___kernel_vsyscall;
+ long sym_int80_landing_pad;
+ long sym_vdso32_sigreturn_landing_pad;
+ long sym_vdso32_rt_sigreturn_landing_pad;
+};
+
+
+extern const struct vdso_image vdso_image_64;
+# 48 "./arch/x86/include/asm/vdso.h"
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) init_vdso_image(const struct vdso_image *image);
+
+extern int map_vdso_once(const struct vdso_image *image, unsigned long addr);
+
+extern bool fixup_vdso_exception(struct pt_regs *regs, int trapnr,
+     unsigned long error_code,
+     unsigned long fault_addr);
+# 76 "./arch/x86/include/asm/elf.h" 2
+
+
+extern unsigned int vdso64_enabled;
+# 170 "./arch/x86/include/asm/elf.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void elf_common_init(struct thread_struct *t,
+       struct pt_regs *regs, const u16 ds)
+{
+
+                 regs->bx = regs->cx = regs->dx = 0;
+ regs->si = regs->di = regs->bp = 0;
+ regs->r8 = regs->r9 = regs->r10 = regs->r11 = 0;
+ regs->r12 = regs->r13 = regs->r14 = regs->r15 = 0;
+ t->fsbase = t->gsbase = 0;
+ t->fsindex = t->gsindex = 0;
+ t->ds = t->es = ds;
+}
+
+
+
+
+
+
+
+void compat_start_thread(struct pt_regs *regs, u32 new_ip, u32 new_sp, bool x32);
+
+
+
+void set_personality_ia32(bool);
+# 239 "./arch/x86/include/asm/elf.h"
+extern void set_personality_64bit(void);
+extern unsigned int sysctl_vsyscall32;
+extern int force_personality32;
+# 262 "./arch/x86/include/asm/elf.h"
+extern u32 elf_hwcap2;
+# 307 "./arch/x86/include/asm/elf.h"
+struct task_struct;
+# 320 "./arch/x86/include/asm/elf.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int mmap_is_ia32(void)
+{
+ return 0 ||
+        (0 &&
+  test_ti_thread_flag(((struct thread_info *)get_current()), 29));
+}
+
+extern unsigned long task_size_32bit(void);
+extern unsigned long task_size_64bit(int full_addr_space);
+extern unsigned long get_mmap_base(int is_legacy);
+extern bool mmap_address_hint_valid(unsigned long addr, unsigned long len);
+# 380 "./arch/x86/include/asm/elf.h"
+struct linux_binprm;
+
+
+extern int arch_setup_additional_pages(struct linux_binprm *bprm,
+           int uses_interp);
+extern int compat_arch_setup_additional_pages(struct linux_binprm *bprm,
+           int uses_interp, bool x32);
+
+
+
+
+extern bool arch_syscall_is_vdso_sigreturn(struct pt_regs *regs);
+
+
+enum align_flags {
+ ALIGN_VA_32 = ((((1UL))) << (0)),
+ ALIGN_VA_64 = ((((1UL))) << (1)),
+};
+
+struct va_alignment {
+ int flags;
+ unsigned long mask;
+ unsigned long bits;
+} __attribute__((__aligned__((1 << (6)))));
+
+extern struct va_alignment va_align;
+extern unsigned long align_vdso_addr(unsigned long);
+# 7 "./include/linux/elf.h" 2
+# 1 "./include/uapi/linux/elf.h" 1
+
+
+
+
+
+# 1 "./include/uapi/linux/elf-em.h" 1
+# 7 "./include/uapi/linux/elf.h" 2
+
+
+typedef __u32 Elf32_Addr;
+typedef __u16 Elf32_Half;
+typedef __u32 Elf32_Off;
+typedef __s32 Elf32_Sword;
+typedef __u32 Elf32_Word;
+
+
+typedef __u64 Elf64_Addr;
+typedef __u16 Elf64_Half;
+typedef __s16 Elf64_SHalf;
+typedef __u64 Elf64_Off;
+typedef __s32 Elf64_Sword;
+typedef __u32 Elf64_Word;
+typedef __u64 Elf64_Xword;
+typedef __s64 Elf64_Sxword;
+# 139 "./include/uapi/linux/elf.h"
+typedef struct dynamic{
+  Elf32_Sword d_tag;
+  union{
+    Elf32_Sword d_val;
+    Elf32_Addr d_ptr;
+  } d_un;
+} Elf32_Dyn;
+
+typedef struct {
+  Elf64_Sxword d_tag;
+  union {
+    Elf64_Xword d_val;
+    Elf64_Addr d_ptr;
+  } d_un;
+} Elf64_Dyn;
+# 162 "./include/uapi/linux/elf.h"
+typedef struct elf32_rel {
+  Elf32_Addr r_offset;
+  Elf32_Word r_info;
+} Elf32_Rel;
+
+typedef struct elf64_rel {
+  Elf64_Addr r_offset;
+  Elf64_Xword r_info;
+} Elf64_Rel;
+
+typedef struct elf32_rela{
+  Elf32_Addr r_offset;
+  Elf32_Word r_info;
+  Elf32_Sword r_addend;
+} Elf32_Rela;
+
+typedef struct elf64_rela {
+  Elf64_Addr r_offset;
+  Elf64_Xword r_info;
+  Elf64_Sxword r_addend;
+} Elf64_Rela;
+
+typedef struct elf32_sym{
+  Elf32_Word st_name;
+  Elf32_Addr st_value;
+  Elf32_Word st_size;
+  unsigned char st_info;
+  unsigned char st_other;
+  Elf32_Half st_shndx;
+} Elf32_Sym;
+
+typedef struct elf64_sym {
+  Elf64_Word st_name;
+  unsigned char st_info;
+  unsigned char st_other;
+  Elf64_Half st_shndx;
+  Elf64_Addr st_value;
+  Elf64_Xword st_size;
+} Elf64_Sym;
+
+
+
+
+typedef struct elf32_hdr{
+  unsigned char e_ident[16];
+  Elf32_Half e_type;
+  Elf32_Half e_machine;
+  Elf32_Word e_version;
+  Elf32_Addr e_entry;
+  Elf32_Off e_phoff;
+  Elf32_Off e_shoff;
+  Elf32_Word e_flags;
+  Elf32_Half e_ehsize;
+  Elf32_Half e_phentsize;
+  Elf32_Half e_phnum;
+  Elf32_Half e_shentsize;
+  Elf32_Half e_shnum;
+  Elf32_Half e_shstrndx;
+} Elf32_Ehdr;
+
+typedef struct elf64_hdr {
+  unsigned char e_ident[16];
+  Elf64_Half e_type;
+  Elf64_Half e_machine;
+  Elf64_Word e_version;
+  Elf64_Addr e_entry;
+  Elf64_Off e_phoff;
+  Elf64_Off e_shoff;
+  Elf64_Word e_flags;
+  Elf64_Half e_ehsize;
+  Elf64_Half e_phentsize;
+  Elf64_Half e_phnum;
+  Elf64_Half e_shentsize;
+  Elf64_Half e_shnum;
+  Elf64_Half e_shstrndx;
+} Elf64_Ehdr;
+
+
+
+
+
+
+
+typedef struct elf32_phdr{
+  Elf32_Word p_type;
+  Elf32_Off p_offset;
+  Elf32_Addr p_vaddr;
+  Elf32_Addr p_paddr;
+  Elf32_Word p_filesz;
+  Elf32_Word p_memsz;
+  Elf32_Word p_flags;
+  Elf32_Word p_align;
+} Elf32_Phdr;
+
+typedef struct elf64_phdr {
+  Elf64_Word p_type;
+  Elf64_Word p_flags;
+  Elf64_Off p_offset;
+  Elf64_Addr p_vaddr;
+  Elf64_Addr p_paddr;
+  Elf64_Xword p_filesz;
+  Elf64_Xword p_memsz;
+  Elf64_Xword p_align;
+} Elf64_Phdr;
+# 304 "./include/uapi/linux/elf.h"
+typedef struct elf32_shdr {
+  Elf32_Word sh_name;
+  Elf32_Word sh_type;
+  Elf32_Word sh_flags;
+  Elf32_Addr sh_addr;
+  Elf32_Off sh_offset;
+  Elf32_Word sh_size;
+  Elf32_Word sh_link;
+  Elf32_Word sh_info;
+  Elf32_Word sh_addralign;
+  Elf32_Word sh_entsize;
+} Elf32_Shdr;
+
+typedef struct elf64_shdr {
+  Elf64_Word sh_name;
+  Elf64_Word sh_type;
+  Elf64_Xword sh_flags;
+  Elf64_Addr sh_addr;
+  Elf64_Off sh_offset;
+  Elf64_Xword sh_size;
+  Elf64_Word sh_link;
+  Elf64_Word sh_info;
+  Elf64_Xword sh_addralign;
+  Elf64_Xword sh_entsize;
+} Elf64_Shdr;
+# 439 "./include/uapi/linux/elf.h"
+typedef struct elf32_note {
+  Elf32_Word n_namesz;
+  Elf32_Word n_descsz;
+  Elf32_Word n_type;
+} Elf32_Nhdr;
+
+
+typedef struct elf64_note {
+  Elf64_Word n_namesz;
+  Elf64_Word n_descsz;
+  Elf64_Word n_type;
+} Elf64_Nhdr;
+# 8 "./include/linux/elf.h" 2
+# 52 "./include/linux/elf.h"
+extern Elf64_Dyn _DYNAMIC [];
+# 65 "./include/linux/elf.h"
+struct file;
+struct coredump_params;
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int elf_coredump_extra_notes_size(void) { return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }
+# 81 "./include/linux/elf.h"
+struct gnu_property {
+ u32 pr_type;
+ u32 pr_datasz;
+};
+
+struct arch_elf_state;
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_parse_elf_property(u32 type, const void *data,
+       size_t datasz, bool compat,
+       struct arch_elf_state *arch)
+{
+ return 0;
+}
+# 104 "./include/linux/elf.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_elf_adjust_prot(int prot,
+           const struct arch_elf_state *state,
+           bool has_interp, bool is_interp)
+{
+ return prot;
+}
+# 19 "./include/linux/module.h" 2
+
+
+# 1 "./include/linux/moduleparam.h" 1
+# 36 "./include/linux/moduleparam.h"
+struct kernel_param;
+
+
+
+
+
+
+enum {
+ KERNEL_PARAM_OPS_FL_NOARG = (1 << 0)
+};
+
+struct kernel_param_ops {
+
+ unsigned int flags;
+
+ int (*set)(const char *val, const struct kernel_param *kp);
+
+ int (*get)(char *buffer, const struct kernel_param *kp);
+
+ void (*free)(void *arg);
+};
+
+
+
+
+
+
+
+enum {
+ KERNEL_PARAM_FL_UNSAFE = (1 << 0),
+ KERNEL_PARAM_FL_HWPARAM = (1 << 1),
+};
+
+struct kernel_param {
+ const char *name;
+ struct module *mod;
+ const struct kernel_param_ops *ops;
+ const u16 perm;
+ s8 level;
+ u8 flags;
+ union {
+  void *arg;
+  const struct kparam_string *str;
+  const struct kparam_array *arr;
+ };
+};
+
+extern const struct kernel_param __start___param[], __stop___param[];
+
+
+struct kparam_string {
+ unsigned int maxlen;
+ char *string;
+};
+
+
+struct kparam_array
+{
+ unsigned int max;
+ unsigned int elemsize;
+ unsigned int *num;
+ const struct kernel_param_ops *ops;
+ void *elem;
+};
+# 304 "./include/linux/moduleparam.h"
+extern void kernel_param_lock(struct module *mod);
+extern void kernel_param_unlock(struct module *mod);
+# 372 "./include/linux/moduleparam.h"
+extern bool parameq(const char *name1, const char *name2);
+# 382 "./include/linux/moduleparam.h"
+extern bool parameqn(const char *name1, const char *name2, size_t n);
+
+
+extern char *parse_args(const char *name,
+        char *args,
+        const struct kernel_param *params,
+        unsigned num,
+        s16 level_min,
+        s16 level_max,
+        void *arg,
+        int (*unknown)(char *param, char *val,
+         const char *doing, void *arg));
+
+
+
+extern void destroy_params(const struct kernel_param *params, unsigned num);
+# 411 "./include/linux/moduleparam.h"
+extern const struct kernel_param_ops param_ops_byte;
+extern int param_set_byte(const char *val, const struct kernel_param *kp);
+extern int param_get_byte(char *buffer, const struct kernel_param *kp);
+
+
+extern const struct kernel_param_ops param_ops_short;
+extern int param_set_short(const char *val, const struct kernel_param *kp);
+extern int param_get_short(char *buffer, const struct kernel_param *kp);
+
+
+extern const struct kernel_param_ops param_ops_ushort;
+extern int param_set_ushort(const char *val, const struct kernel_param *kp);
+extern int param_get_ushort(char *buffer, const struct kernel_param *kp);
+
+
+extern const struct kernel_param_ops param_ops_int;
+extern int param_set_int(const char *val, const struct kernel_param *kp);
+extern int param_get_int(char *buffer, const struct kernel_param *kp);
+
+
+extern const struct kernel_param_ops param_ops_uint;
+extern int param_set_uint(const char *val, const struct kernel_param *kp);
+extern int param_get_uint(char *buffer, const struct kernel_param *kp);
+
+
+extern const struct kernel_param_ops param_ops_long;
+extern int param_set_long(const char *val, const struct kernel_param *kp);
+extern int param_get_long(char *buffer, const struct kernel_param *kp);
+
+
+extern const struct kernel_param_ops param_ops_ulong;
+extern int param_set_ulong(const char *val, const struct kernel_param *kp);
+extern int param_get_ulong(char *buffer, const struct kernel_param *kp);
+
+
+extern const struct kernel_param_ops param_ops_ullong;
+extern int param_set_ullong(const char *val, const struct kernel_param *kp);
+extern int param_get_ullong(char *buffer, const struct kernel_param *kp);
+
+
+extern const struct kernel_param_ops param_ops_hexint;
+extern int param_set_hexint(const char *val, const struct kernel_param *kp);
+extern int param_get_hexint(char *buffer, const struct kernel_param *kp);
+
+
+extern const struct kernel_param_ops param_ops_charp;
+extern int param_set_charp(const char *val, const struct kernel_param *kp);
+extern int param_get_charp(char *buffer, const struct kernel_param *kp);
+extern void param_free_charp(void *arg);
+
+
+
+extern const struct kernel_param_ops param_ops_bool;
+extern int param_set_bool(const char *val, const struct kernel_param *kp);
+extern int param_get_bool(char *buffer, const struct kernel_param *kp);
+
+
+extern const struct kernel_param_ops param_ops_bool_enable_only;
+extern int param_set_bool_enable_only(const char *val,
+          const struct kernel_param *kp);
+
+
+
+extern const struct kernel_param_ops param_ops_invbool;
+extern int param_set_invbool(const char *val, const struct kernel_param *kp);
+extern int param_get_invbool(char *buffer, const struct kernel_param *kp);
+
+
+
+extern const struct kernel_param_ops param_ops_bint;
+extern int param_set_bint(const char *val, const struct kernel_param *kp);
+# 524 "./include/linux/moduleparam.h"
+enum hwparam_type {
+ hwparam_ioport,
+ hwparam_iomem,
+ hwparam_ioport_or_iomem,
+ hwparam_irq,
+ hwparam_dma,
+ hwparam_dma_addr,
+ hwparam_other,
+};
+# 585 "./include/linux/moduleparam.h"
+extern const struct kernel_param_ops param_array_ops;
+
+extern const struct kernel_param_ops param_ops_string;
+extern int param_set_copystring(const char *val, const struct kernel_param *);
+extern int param_get_string(char *buffer, const struct kernel_param *kp);
+
+
+
+struct module;
+
+
+extern int module_param_sysfs_setup(struct module *mod,
+        const struct kernel_param *kparam,
+        unsigned int num_params);
+
+extern void module_param_sysfs_remove(struct module *mod);
+# 22 "./include/linux/module.h" 2
+
+
+# 1 "./include/linux/rbtree_latch.h" 1
+# 40 "./include/linux/rbtree_latch.h"
+struct latch_tree_node {
+ struct rb_node node[2];
+};
+
+struct latch_tree_root {
+ seqcount_latch_t seq;
+ struct rb_root tree[2];
+};
+# 64 "./include/linux/rbtree_latch.h"
+struct latch_tree_ops {
+ bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b);
+ int (*comp)(void *key, struct latch_tree_node *b);
+};
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct latch_tree_node *
+__lt_from_rb(struct rb_node *node, int idx)
+{
+ return ({ void *__mptr = (void *)(node); do { extern void __compiletime_assert_230(void) __attribute__((__error__("pointer type mismatch in container_of()"))); if (!(!(!__builtin_types_compatible_p(typeof(*(node)), typeof(((struct latch_tree_node *)0)->node[idx])) && !__builtin_types_compatible_p(typeof(*(node)), typeof(void))))) __compiletime_assert_230(); } while (0); ((struct latch_tree_node *)(__mptr - __builtin_offsetof(struct latch_tree_node, node[idx]))); });
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+__lt_insert(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx,
+     bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b))
+{
+ struct rb_root *root = &ltr->tree[idx];
+ struct rb_node **link = &root->rb_node;
+ struct rb_node *node = &ltn->node[idx];
+ struct rb_node *parent = ((void *)0);
+ struct latch_tree_node *ltp;
+
+ while (*link) {
+  parent = *link;
+  ltp = __lt_from_rb(parent, idx);
+
+  if (less(ltn, ltp))
+   link = &parent->rb_left;
+  else
+   link = &parent->rb_right;
+ }
+
+ rb_link_node_rcu(node, parent, link);
+ rb_insert_color(node, root);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+__lt_erase(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx)
+{
+ rb_erase(&ltn->node[idx], &ltr->tree[idx]);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct latch_tree_node *
+__lt_find(void *key, struct latch_tree_root *ltr, int idx,
+   int (*comp)(void *key, struct latch_tree_node *node))
+{
+ struct rb_node *node = ({ typeof(ltr->tree[idx].rb_node) ________p1 = ({ do { extern void __compiletime_assert_231(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ltr->tree[idx].rb_node) == sizeof(char) || sizeof(ltr->tree[idx].rb_node) == sizeof(short) || sizeof(ltr->tree[idx].rb_node) == sizeof(int) || sizeof(ltr->tree[idx].rb_node) == sizeof(long)) || sizeof(ltr->tree[idx].rb_node) == sizeof(long long))) __compiletime_assert_231(); } while (0); (*(const volatile typeof( _Generic((ltr->tree[idx].rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ltr->tree[idx].rb_node))) *)&(ltr->tree[idx].rb_node)); }); ((typeof(*ltr->tree[idx].rb_node) *)(________p1)); });
+ struct latch_tree_node *ltn;
+ int c;
+
+ while (node) {
+  ltn = __lt_from_rb(node, idx);
+  c = comp(key, ltn);
+
+  if (c < 0)
+   node = ({ typeof(node->rb_left) ________p1 = ({ do { extern void __compiletime_assert_232(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node->rb_left) == sizeof(char) || sizeof(node->rb_left) == sizeof(short) || sizeof(node->rb_left) == sizeof(int) || sizeof(node->rb_left) == sizeof(long)) || sizeof(node->rb_left) == sizeof(long long))) __compiletime_assert_232(); } while (0); (*(const volatile typeof( _Generic((node->rb_left), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_left))) *)&(node->rb_left)); }); ((typeof(*node->rb_left) *)(________p1)); });
+  else if (c > 0)
+   node = ({ typeof(node->rb_right) ________p1 = ({ do { extern void __compiletime_assert_233(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(node->rb_right) == sizeof(char) || sizeof(node->rb_right) == sizeof(short) || sizeof(node->rb_right) == sizeof(int) || sizeof(node->rb_right) == sizeof(long)) || sizeof(node->rb_right) == sizeof(long long))) __compiletime_assert_233(); } while (0); (*(const volatile typeof( _Generic((node->rb_right), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_right))) *)&(node->rb_right)); }); ((typeof(*node->rb_right) *)(________p1)); });
+  else
+   return ltn;
+ }
+
+ return ((void *)0);
+}
+# 143 "./include/linux/rbtree_latch.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+latch_tree_insert(struct latch_tree_node *node,
+    struct latch_tree_root *root,
+    const struct latch_tree_ops *ops)
+{
+ raw_write_seqcount_latch(&root->seq);
+ __lt_insert(node, root, 0, ops->less);
+ raw_write_seqcount_latch(&root->seq);
+ __lt_insert(node, root, 1, ops->less);
+}
+# 170 "./include/linux/rbtree_latch.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void
+latch_tree_erase(struct latch_tree_node *node,
+   struct latch_tree_root *root,
+   const struct latch_tree_ops *ops)
+{
+ raw_write_seqcount_latch(&root->seq);
+ __lt_erase(node, root, 0);
+ raw_write_seqcount_latch(&root->seq);
+ __lt_erase(node, root, 1);
+}
+# 199 "./include/linux/rbtree_latch.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) struct latch_tree_node *
+latch_tree_find(void *key, struct latch_tree_root *root,
+  const struct latch_tree_ops *ops)
+{
+ struct latch_tree_node *node;
+ unsigned int seq;
+
+ do {
+  seq = raw_read_seqcount_latch(&root->seq);
+  node = __lt_find(key, root, seq & 1, ops->comp);
+ } while (read_seqcount_latch_retry(&root->seq, seq));
+
+ return node;
+}
+# 25 "./include/linux/module.h" 2
+# 1 "./include/linux/error-injection.h" 1
+
+
+
+
+
+# 1 "./include/asm-generic/error-injection.h" 1
+
+
+
+
+
+enum {
+ EI_ETYPE_NONE,
+ EI_ETYPE_NULL,
+ EI_ETYPE_ERRNO,
+ EI_ETYPE_ERRNO_NULL,
+ EI_ETYPE_TRUE,
+};
+
+struct error_injection_entry {
+ unsigned long addr;
+ int etype;
+};
+
+struct pt_regs;
+# 34 "./include/asm-generic/error-injection.h"
+void override_function_with_return(struct pt_regs *regs);
+# 7 "./include/linux/error-injection.h" 2
+
+
+
+extern bool within_error_injection_list(unsigned long addr);
+extern int get_injectable_error_type(unsigned long addr);
+# 26 "./include/linux/module.h" 2
+
+
+
+
+
+# 1 "./arch/x86/include/asm/module.h" 1
+
+
+
+
+# 1 "./include/asm-generic/module.h" 1
+# 6 "./arch/x86/include/asm/module.h" 2
+# 1 "./arch/x86/include/asm/orc_types.h" 1
+# 7 "./arch/x86/include/asm/module.h" 2
+
+struct mod_arch_specific {
+
+
+
+
+
+};
+# 32 "./include/linux/module.h" 2
+
+
+
+struct modversion_info {
+ unsigned long crc;
+ char name[(64 - sizeof(unsigned long))];
+};
+
+struct module;
+struct exception_table_entry;
+
+struct module_kobject {
+ struct kobject kobj;
+ struct module *mod;
+ struct kobject *drivers_dir;
+ struct module_param_attrs *mp;
+ struct completion *kobj_completion;
+} __attribute__((__designated_init__));
+
+struct module_attribute {
+ struct attribute attr;
+ ssize_t (*show)(struct module_attribute *, struct module_kobject *,
+   char *);
+ ssize_t (*store)(struct module_attribute *, struct module_kobject *,
+    const char *, size_t count);
+ void (*setup)(struct module *, const char *);
+ int (*test)(struct module *);
+ void (*free)(struct module *);
+};
+
+struct module_version_attribute {
+ struct module_attribute mattr;
+ const char *module_name;
+ const char *version;
+};
+
+extern ssize_t __modver_version_show(struct module_attribute *,
+         struct module_kobject *, char *);
+
+extern struct module_attribute module_uevent;
+
+
+extern int init_module(void);
+extern void cleanup_module(void);
+# 289 "./include/linux/module.h"
+struct notifier_block;
+
+
+
+extern int modules_disabled;
+
+void *__symbol_get(const char *symbol);
+void *__symbol_get_gpl(const char *symbol);
+
+
+
+struct module_use {
+ struct list_head source_list;
+ struct list_head target_list;
+ struct module *source, *target;
+};
+
+enum module_state {
+ MODULE_STATE_LIVE,
+ MODULE_STATE_COMING,
+ MODULE_STATE_GOING,
+ MODULE_STATE_UNFORMED,
+};
+
+struct mod_tree_node {
+ struct module *mod;
+ struct latch_tree_node node;
+};
+
+struct module_layout {
+
+ void *base;
+
+ unsigned int size;
+
+ unsigned int text_size;
+
+ unsigned int ro_size;
+
+ unsigned int ro_after_init_size;
+
+
+ struct mod_tree_node mtn;
+
+};
+# 342 "./include/linux/module.h"
+struct mod_kallsyms {
+ Elf64_Sym *symtab;
+ unsigned int num_symtab;
+ char *strtab;
+ char *typetab;
+};
+# 358 "./include/linux/module.h"
+struct module {
+ enum module_state state;
+
+
+ struct list_head list;
+
+
+ char name[(64 - sizeof(unsigned long))];
+
+
+ struct module_kobject mkobj;
+ struct module_attribute *modinfo_attrs;
+ const char *version;
+ const char *srcversion;
+ struct kobject *holders_dir;
+
+
+ const struct kernel_symbol *syms;
+ const s32 *crcs;
+ unsigned int num_syms;
+
+
+
+ struct mutex param_lock;
+
+ struct kernel_param *kp;
+ unsigned int num_kp;
+
+
+ unsigned int num_gpl_syms;
+ const struct kernel_symbol *gpl_syms;
+ const s32 *gpl_crcs;
+ bool using_gplonly_symbols;
+
+
+
+
+
+
+ bool async_probe_requested;
+
+
+ unsigned int num_exentries;
+ struct exception_table_entry *extable;
+
+
+ int (*init)(void);
+
+
+ struct module_layout core_layout __attribute__((__aligned__((1 << (6)))));
+ struct module_layout init_layout;
+
+
+ struct mod_arch_specific arch;
+
+ unsigned long taints;
+
+
+
+ unsigned num_bugs;
+ struct list_head bug_list;
+ struct bug_entry *bug_table;
+
+
+
+
+ struct mod_kallsyms *kallsyms;
+ struct mod_kallsyms core_kallsyms;
+
+
+ struct module_sect_attrs *sect_attrs;
+
+
+ struct module_notes_attrs *notes_attrs;
+
+
+
+
+ char *args;
+
+
+
+
+
+
+ void *noinstr_text_start;
+ unsigned int noinstr_text_size;
+
+
+ unsigned int num_tracepoints;
+ tracepoint_ptr_t *tracepoints_ptrs;
+# 467 "./include/linux/module.h"
+ unsigned int num_trace_bprintk_fmt;
+ const char **trace_bprintk_fmt_start;
+
+
+ struct trace_event_call **trace_events;
+ unsigned int num_trace_events;
+ struct trace_eval_map **trace_evals;
+ unsigned int num_trace_evals;
+
+
+
+
+
+
+ void *kprobes_text_start;
+ unsigned int kprobes_text_size;
+ unsigned long *kprobe_blacklist;
+ unsigned int num_kprobe_blacklist;
+
+
+ int num_static_call_sites;
+ struct static_call_site *static_call_sites;
+# 501 "./include/linux/module.h"
+ struct list_head source_list;
+
+ struct list_head target_list;
+
+
+ void (*exit)(void);
+
+ atomic_t refcnt;
+
+
+
+
+ ctor_fn_t *ctors;
+ unsigned int num_ctors;
+
+
+
+ struct error_injection_entry *ei_funcs;
+ unsigned int num_ei_funcs;
+
+} __attribute__((__aligned__((1 << (6))))) __attribute__((__designated_init__));
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long kallsyms_symbol_value(const Elf64_Sym *sym)
+{
+ return sym->st_value;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool module_is_live(struct module *mod)
+{
+ return mod->state != MODULE_STATE_GOING;
+}
+
+struct module *__module_text_address(unsigned long addr);
+struct module *__module_address(unsigned long addr);
+bool is_module_address(unsigned long addr);
+bool __is_module_percpu_address(unsigned long addr, unsigned long *can_addr);
+bool is_module_percpu_address(unsigned long addr);
+bool is_module_text_address(unsigned long addr);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool within_module_core(unsigned long addr,
+          const struct module *mod)
+{
+ return (unsigned long)mod->core_layout.base <= addr &&
+        addr < (unsigned long)mod->core_layout.base + mod->core_layout.size;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool within_module_init(unsigned long addr,
+          const struct module *mod)
+{
+ return (unsigned long)mod->init_layout.base <= addr &&
+        addr < (unsigned long)mod->init_layout.base + mod->init_layout.size;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool within_module(unsigned long addr, const struct module *mod)
+{
+ return within_module_init(addr, mod) || within_module_core(addr, mod);
+}
+
+
+struct module *find_module(const char *name);
+
+
+
+int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
+   char *name, char *module_name, int *exported);
+
+
+unsigned long module_kallsyms_lookup_name(const char *name);
+
+extern void __attribute__((__noreturn__)) __module_put_and_exit(struct module *mod,
+   long code);
+
+
+
+int module_refcount(struct module *mod);
+void __symbol_put(const char *symbol);
+
+void symbol_put_addr(void *addr);
+
+
+
+extern void __module_get(struct module *module);
+
+
+
+extern bool try_module_get(struct module *module);
+
+extern void module_put(struct module *module);
+# 622 "./include/linux/module.h"
+void *dereference_module_function_descriptor(struct module *mod, void *ptr);
+
+
+
+
+const char *module_address_lookup(unsigned long addr,
+       unsigned long *symbolsize,
+       unsigned long *offset,
+       char **modname,
+       char *namebuf);
+int lookup_module_symbol_name(unsigned long addr, char *symname);
+int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);
+
+int register_module_notifier(struct notifier_block *nb);
+int unregister_module_notifier(struct notifier_block *nb);
+
+extern void print_modules(void);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool module_requested_async_probing(struct module *module)
+{
+ return module && module->async_probe_requested;
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_livepatch_module(struct module *mod)
+{
+ return false;
+}
+
+
+bool is_module_sig_enforced(void);
+void set_module_sig_enforced(void);
+# 802 "./include/linux/module.h"
+extern struct kset *module_kset;
+extern struct kobj_type module_ktype;
+extern int module_sysfs_initialized;
+# 814 "./include/linux/module.h"
+void module_bug_finalize(const Elf64_Ehdr *, const Elf64_Shdr *,
+    struct module *);
+void module_bug_cleanup(struct module *);
+# 831 "./include/linux/module.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool retpoline_module_ok(bool has_retpoline)
+{
+ return true;
+}
+# 843 "./include/linux/module.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool module_sig_ok(struct module *module)
+{
+ return true;
+}
+
+
+int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,
+          struct module *, unsigned long),
+       void *data);
+# 6 "./rust/kernel/bindings_helper.h" 2
+# 1 "./include/linux/random.h" 1
+# 13 "./include/linux/random.h"
+# 1 "./include/linux/once.h" 1
+
+
+
+
+
+
+
+bool __do_once_start(bool *done, unsigned long *flags);
+void __do_once_done(bool *done, struct static_key_true *once_key,
+      unsigned long *flags);
+# 14 "./include/linux/random.h" 2
+
+# 1 "./include/uapi/linux/random.h" 1
+# 13 "./include/uapi/linux/random.h"
+# 1 "./include/linux/irqnr.h" 1
+
+
+
+
+# 1 "./include/uapi/linux/irqnr.h" 1
+# 6 "./include/linux/irqnr.h" 2
+
+
+extern int nr_irqs;
+extern struct irq_desc *irq_to_desc(unsigned int irq);
+unsigned int irq_get_next_irq(unsigned int offset);
+# 14 "./include/uapi/linux/random.h" 2
+# 41 "./include/uapi/linux/random.h"
+struct rand_pool_info {
+ int entropy_count;
+ int buf_size;
+ __u32 buf[0];
+};
+# 16 "./include/linux/random.h" 2
+
+struct random_ready_callback {
+ struct list_head list;
+ void (*func)(struct random_ready_callback *rdy);
+ struct module *owner;
+};
+
+extern void add_device_randomness(const void *, unsigned int);
+extern void add_bootloader_randomness(const void *, unsigned int);
+# 33 "./include/linux/random.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void add_latent_entropy(void) {}
+
+
+extern void add_input_randomness(unsigned int type, unsigned int code,
+     unsigned int value) ;
+extern void add_interrupt_randomness(int irq, int irq_flags) ;
+
+extern void get_random_bytes(void *buf, int nbytes);
+extern int wait_for_random_bytes(void);
+extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) rand_initialize(void);
+extern bool rng_is_initialized(void);
+extern int add_random_ready_callback(struct random_ready_callback *rdy);
+extern void del_random_ready_callback(struct random_ready_callback *rdy);
+extern int __attribute__((__warn_unused_result__)) get_random_bytes_arch(void *buf, int nbytes);
+
+
+
+
+
+u32 get_random_u32(void);
+u64 get_random_u64(void);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int get_random_int(void)
+{
+ return get_random_u32();
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_random_long(void)
+{
+
+ return get_random_u64();
+
+
+
+}
+# 81 "./include/linux/random.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long get_random_canary(void)
+{
+ unsigned long val = get_random_long();
+
+ return val & 0xffffffffffffff00UL;
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_random_bytes_wait(void *buf, int nbytes)
+{
+ int ret = wait_for_random_bytes();
+ get_random_bytes(buf, nbytes);
+ return ret;
+}
+# 105 "./include/linux/random.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_random_u32_wait(u32 *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_u32(); return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_random_u64_wait(u64 *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_u64(); return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_random_int_wait(int *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_int(); return 0; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int get_random_long_wait(long *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_long(); return 0; }
+
+
+unsigned long randomize_page(unsigned long start, unsigned long range);
+
+
+
+
+
+
+# 1 "./include/linux/prandom.h" 1
+# 14 "./include/linux/prandom.h"
+u32 prandom_u32(void);
+void prandom_bytes(void *buf, size_t nbytes);
+void prandom_seed(u32 seed);
+void prandom_reseed_late(void);
+
+extern __attribute__((section(".data" ""))) __typeof__(unsigned long) net_rand_noise;
+# 59 "./include/linux/prandom.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void prandom_u32_add_noise(unsigned long a, unsigned long b,
+      unsigned long c, unsigned long d)
+{
+
+
+
+
+ a ^= ({ typeof(net_rand_noise) pscr_ret__; do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(net_rand_noise)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (net_rand_noise)); (typeof(net_rand_noise))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (net_rand_noise)); (typeof(net_rand_noise))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (net_rand_noise)); (typeof(net_rand_noise))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (net_rand_noise)); (typeof(net_rand_noise))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
+ ( a += b, b = rol64(b, 13), c += d, d = rol64(d, 16), b ^= a, a = rol64(a, 32), d ^= c, a += d, d = rol64(d, 21), c += b, b = rol64(b, 17), d ^= a, b ^= c, c = rol64(c, 32) );
+ do { do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(net_rand_noise)) { case 1: do { u8 pto_val__ = ((u8)(((unsigned long) d) & 0xff)); if (0) { typeof((net_rand_noise)) pto_tmp__; pto_tmp__ = (d); (void)pto_tmp__; } asm ("mov" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((net_rand_noise)) : [val] "qi" (pto_val__)); } while (0);break; case 2: do { u16 pto_val__ = ((u16)(((unsigned long) d) & 0xffff)); if (0) { typeof((net_rand_noise)) pto_tmp__; pto_tmp__ = (d); (void)pto_tmp__; } asm ("mov" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((net_rand_noise)) : [val] "ri" (pto_val__)); } while (0);break; case 4: do { u32 pto_val__ = ((u32)(((unsigned long) d) & 0xffffffff)); if (0) { typeof((net_rand_noise)) pto_tmp__; pto_tmp__ = (d); (void)pto_tmp__; } asm ("mov" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((net_rand_noise)) : [val] "ri" (pto_val__)); } while (0);break; case 8: do { u64 pto_val__ = ((u64)(d)); if (0) { typeof((net_rand_noise)) pto_tmp__; pto_tmp__ = (d); (void)pto_tmp__; } asm ("mov" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((net_rand_noise)) : [val] "re" (pto_val__)); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
+}
+
+struct rnd_state {
+ __u32 s1, s2, s3, s4;
+};
+
+u32 prandom_u32_state(struct rnd_state *state);
+void prandom_bytes_state(struct rnd_state *state, void *buf, size_t nbytes);
+void prandom_seed_full_state(struct rnd_state *pcpu_state);
+# 94 "./include/linux/prandom.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 prandom_u32_max(u32 ep_ro)
+{
+ return (u32)(((u64) prandom_u32() * ep_ro) >> 32);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 __seed(u32 x, u32 m)
+{
+ return (x < m) ? x + m : x;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void prandom_seed_state(struct rnd_state *state, u64 seed)
+{
+ u32 i = (seed >> 32) ^ (seed << 10) ^ seed;
+
+ state->s1 = __seed(i, 2U);
+ state->s2 = __seed(i, 8U);
+ state->s3 = __seed(i, 16U);
+ state->s4 = __seed(i, 128U);
+ prandom_u32_add_noise((unsigned long)(state), (unsigned long)(i), (unsigned long)(0), (unsigned long)(0));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 next_pseudo_random32(u32 seed)
+{
+ return seed * 1664525 + 1013904223;
+}
+# 119 "./include/linux/random.h" 2
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) arch_get_random_long(unsigned long *v)
+{
+ return false;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) arch_get_random_int(unsigned int *v)
+{
+ return false;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) arch_get_random_seed_long(unsigned long *v)
+{
+ return false;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__warn_unused_result__)) arch_get_random_seed_int(unsigned int *v)
+{
+ return false;
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) arch_get_random_seed_long_early(unsigned long *v)
+{
+ ({ int __ret_warn_on = !!(system_state != SYSTEM_BOOTING); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/random.h"), "i" (148), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (234)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ return arch_get_random_seed_long(v);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) arch_get_random_long_early(unsigned long *v)
+{
+ ({ int __ret_warn_on = !!(system_state != SYSTEM_BOOTING); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/random.h"), "i" (156), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ({ asm volatile("%c0:\n\t" ".pushsection .discard.reachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (235)); }); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
+ return arch_get_random_long(v);
+}
+# 7 "./rust/kernel/bindings_helper.h" 2
+# 1 "./include/linux/slab.h" 1
+# 19 "./include/linux/slab.h"
+# 1 "./include/linux/percpu-refcount.h" 1
+# 59 "./include/linux/percpu-refcount.h"
+struct percpu_ref;
+typedef void (percpu_ref_func_t)(struct percpu_ref *);
+
+
+enum {
+ __PERCPU_REF_ATOMIC = 1LU << 0,
+ __PERCPU_REF_DEAD = 1LU << 1,
+ __PERCPU_REF_ATOMIC_DEAD = __PERCPU_REF_ATOMIC | __PERCPU_REF_DEAD,
+
+ __PERCPU_REF_FLAG_BITS = 2,
+};
+
+
+enum {
+
+
+
+
+
+
+
+ PERCPU_REF_INIT_ATOMIC = 1 << 0,
+
+
+
+
+
+
+ PERCPU_REF_INIT_DEAD = 1 << 1,
+
+
+
+
+ PERCPU_REF_ALLOW_REINIT = 1 << 2,
+};
+
+struct percpu_ref_data {
+ atomic_long_t count;
+ percpu_ref_func_t *release;
+ percpu_ref_func_t *confirm_switch;
+ bool force_atomic:1;
+ bool allow_reinit:1;
+ struct callback_head rcu;
+ struct percpu_ref *ref;
+};
+
+struct percpu_ref {
+
+
+
+
+ unsigned long percpu_count_ptr;
+
+
+
+
+
+
+
+ struct percpu_ref_data *data;
+};
+
+int __attribute__((__warn_unused_result__)) percpu_ref_init(struct percpu_ref *ref,
+     percpu_ref_func_t *release, unsigned int flags,
+     gfp_t gfp);
+void percpu_ref_exit(struct percpu_ref *ref);
+void percpu_ref_switch_to_atomic(struct percpu_ref *ref,
+     percpu_ref_func_t *confirm_switch);
+void percpu_ref_switch_to_atomic_sync(struct percpu_ref *ref);
+void percpu_ref_switch_to_percpu(struct percpu_ref *ref);
+void percpu_ref_kill_and_confirm(struct percpu_ref *ref,
+     percpu_ref_func_t *confirm_kill);
+void percpu_ref_resurrect(struct percpu_ref *ref);
+void percpu_ref_reinit(struct percpu_ref *ref);
+bool percpu_ref_is_zero(struct percpu_ref *ref);
+# 147 "./include/linux/percpu-refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_ref_kill(struct percpu_ref *ref)
+{
+ percpu_ref_kill_and_confirm(ref, ((void *)0));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __ref_is_percpu(struct percpu_ref *ref,
+       unsigned long **percpu_countp)
+{
+ unsigned long percpu_ptr;
+# 174 "./include/linux/percpu-refcount.h"
+ percpu_ptr = ({ do { extern void __compiletime_assert_236(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(ref->percpu_count_ptr) == sizeof(char) || sizeof(ref->percpu_count_ptr) == sizeof(short) || sizeof(ref->percpu_count_ptr) == sizeof(int) || sizeof(ref->percpu_count_ptr) == sizeof(long)) || sizeof(ref->percpu_count_ptr) == sizeof(long long))) __compiletime_assert_236(); } while (0); (*(const volatile typeof( _Generic((ref->percpu_count_ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ref->percpu_count_ptr))) *)&(ref->percpu_count_ptr)); });
+
+
+
+
+
+
+
+ if (__builtin_expect(!!(percpu_ptr & __PERCPU_REF_ATOMIC_DEAD), 0))
+  return false;
+
+ *percpu_countp = (unsigned long *)percpu_ptr;
+ return true;
+}
+# 198 "./include/linux/percpu-refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_ref_get_many(struct percpu_ref *ref, unsigned long nr)
+{
+ unsigned long *percpu_count;
+
+ rcu_read_lock();
+
+ if (__ref_is_percpu(ref, &percpu_count))
+  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) nr) & 0xff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) nr) & 0xffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) nr) & 0xffffffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u64 pto_val__ = ((u64)(nr)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
+ else
+  atomic_long_add(nr, &ref->data->count);
+
+ rcu_read_unlock();
+}
+# 220 "./include/linux/percpu-refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_ref_get(struct percpu_ref *ref)
+{
+ percpu_ref_get_many(ref, 1);
+}
+# 235 "./include/linux/percpu-refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_ref_tryget_many(struct percpu_ref *ref,
+       unsigned long nr)
+{
+ unsigned long *percpu_count;
+ bool ret;
+
+ rcu_read_lock();
+
+ if (__ref_is_percpu(ref, &percpu_count)) {
+  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) nr) & 0xff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) nr) & 0xffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) nr) & 0xffffffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(nr) && ((nr) == 1 || (nr) == -1)) ? (int)(nr) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (nr); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u64 pto_val__ = ((u64)(nr)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (nr); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
+  ret = true;
+ } else {
+  ret = atomic_long_add_unless(&ref->data->count, nr, 0);
+ }
+
+ rcu_read_unlock();
+
+ return ret;
+}
+# 264 "./include/linux/percpu-refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_ref_tryget(struct percpu_ref *ref)
+{
+ return percpu_ref_tryget_many(ref, 1);
+}
+# 284 "./include/linux/percpu-refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_ref_tryget_live(struct percpu_ref *ref)
+{
+ unsigned long *percpu_count;
+ bool ret = false;
+
+ rcu_read_lock();
+
+ if (__ref_is_percpu(ref, &percpu_count)) {
+  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) 1) & 0xff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) 1) & 0xffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) 1) & 0xffffffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u64 pto_val__ = ((u64)(1)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (1); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
+  ret = true;
+ } else if (!(ref->percpu_count_ptr & __PERCPU_REF_DEAD)) {
+  ret = atomic_long_inc_not_zero(&ref->data->count);
+ }
+
+ rcu_read_unlock();
+
+ return ret;
+}
+# 313 "./include/linux/percpu-refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_ref_put_many(struct percpu_ref *ref, unsigned long nr)
+{
+ unsigned long *percpu_count;
+
+ rcu_read_lock();
+
+ if (__ref_is_percpu(ref, &percpu_count))
+  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "b " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u8 pto_val__ = ((u8)(((unsigned long) -(typeof(*percpu_count))(nr)) & 0xff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pto_tmp__; } asm volatile("add" "b " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "qi" (pto_val__)); } while (0); } while (0);break; case 2: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "w " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u16 pto_val__ = ((u16)(((unsigned long) -(typeof(*percpu_count))(nr)) & 0xffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pto_tmp__; } asm volatile("add" "w " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 4: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "l " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u32 pto_val__ = ((u32)(((unsigned long) -(typeof(*percpu_count))(nr)) & 0xffffffff)); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pto_tmp__; } asm volatile("add" "l " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "ri" (pto_val__)); } while (0); } while (0);break; case 8: do { const int pao_ID__ = (__builtin_constant_p(-(typeof(*percpu_count))(nr)) && ((-(typeof(*percpu_count))(nr)) == 1 || (-(typeof(*percpu_count))(nr)) == -1)) ? (int)(-(typeof(*percpu_count))(nr)) : 0; if (0) { typeof((*percpu_count)) pao_tmp__; pao_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pao_tmp__; } if (pao_ID__ == 1) ({ asm volatile ("inc" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else if (pao_ID__ == -1) ({ asm volatile ("dec" "q " "" "%" "[var]" : [var] "+m" ((*percpu_count))); }); else do { u64 pto_val__ = ((u64)(-(typeof(*percpu_count))(nr))); if (0) { typeof((*percpu_count)) pto_tmp__; pto_tmp__ = (-(typeof(*percpu_count))(nr)); (void)pto_tmp__; } asm volatile("add" "q " "%[val]" ", " "" "%" "[var]" : [var] "+m" ((*percpu_count)) : [val] "re" (pto_val__)); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
+ else if (__builtin_expect(!!(atomic_long_sub_and_test(nr, &ref->data->count)), 0))
+  ref->data->release(ref);
+
+ rcu_read_unlock();
+}
+# 336 "./include/linux/percpu-refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void percpu_ref_put(struct percpu_ref *ref)
+{
+ percpu_ref_put_many(ref, 1);
+}
+# 350 "./include/linux/percpu-refcount.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool percpu_ref_is_dying(struct percpu_ref *ref)
+{
+ return ref->percpu_count_ptr & __PERCPU_REF_DEAD;
+}
+# 20 "./include/linux/slab.h" 2
+# 136 "./include/linux/slab.h"
+# 1 "./include/linux/kasan.h" 1
+
+
+
+
+# 1 "./include/linux/static_key.h" 1
+# 6 "./include/linux/kasan.h" 2
+
+
+struct kmem_cache;
+struct page;
+struct vm_struct;
+struct task_struct;
+
+
+
+
+# 1 "./arch/x86/include/asm/kasan.h" 1
+# 29 "./arch/x86/include/asm/kasan.h"
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) kasan_early_init(void);
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) kasan_init(void);
+# 17 "./include/linux/kasan.h" 2
+
+
+struct kunit_kasan_expectation {
+ bool report_expected;
+ bool report_found;
+};
+
+
+
+
+
+# 1 "./include/linux/pgtable.h" 1
+
+
+
+
+
+# 1 "./arch/x86/include/asm/pgtable.h" 1
+# 25 "./arch/x86/include/asm/pgtable.h"
+# 1 "./arch/x86/include/asm/x86_init.h" 1
+
+
+
+
+
+
+struct ghcb;
+struct mpc_bus;
+struct mpc_cpu;
+struct pt_regs;
+struct mpc_table;
+struct cpuinfo_x86;
+struct irq_domain;
+
+
+
+
+
+
+
+struct x86_init_mpparse {
+ void (*setup_ioapic_ids)(void);
+ void (*find_smp_config)(void);
+ void (*get_smp_config)(unsigned int early);
+};
+# 35 "./arch/x86/include/asm/x86_init.h"
+struct x86_init_resources {
+ void (*probe_roms)(void);
+ void (*reserve_resources)(void);
+ char *(*memory_setup)(void);
+};
+# 50 "./arch/x86/include/asm/x86_init.h"
+struct x86_init_irqs {
+ void (*pre_vector_init)(void);
+ void (*intr_init)(void);
+ void (*intr_mode_select)(void);
+ void (*intr_mode_init)(void);
+ struct irq_domain *(*create_pci_msi_domain)(void);
+};
+
+
+
+
+
+
+struct x86_init_oem {
+ void (*arch_setup)(void);
+ void (*banner)(void);
+};
+# 75 "./arch/x86/include/asm/x86_init.h"
+struct x86_init_paging {
+ void (*pagetable_init)(void);
+};
+# 86 "./arch/x86/include/asm/x86_init.h"
+struct x86_init_timers {
+ void (*setup_percpu_clockev)(void);
+ void (*timer_init)(void);
+ void (*wallclock_init)(void);
+};
+
+
+
+
+
+struct x86_init_iommu {
+ int (*iommu_init)(void);
+};
+# 107 "./arch/x86/include/asm/x86_init.h"
+struct x86_init_pci {
+ int (*arch_init)(void);
+ int (*init)(void);
+ void (*init_irq)(void);
+ void (*fixup_irqs)(void);
+};
+# 123 "./arch/x86/include/asm/x86_init.h"
+struct x86_hyper_init {
+ void (*init_platform)(void);
+ void (*guest_late_init)(void);
+ bool (*x2apic_available)(void);
+ bool (*msi_ext_dest_id)(void);
+ void (*init_mem_mapping)(void);
+ void (*init_after_bootmem)(void);
+};
+
+
+
+
+
+
+
+struct x86_init_acpi {
+ void (*set_root_pointer)(u64 addr);
+ u64 (*get_root_pointer)(void);
+ void (*reduced_hw_early_init)(void);
+};
+
+
+
+
+
+struct x86_init_ops {
+ struct x86_init_resources resources;
+ struct x86_init_mpparse mpparse;
+ struct x86_init_irqs irqs;
+ struct x86_init_oem oem;
+ struct x86_init_paging paging;
+ struct x86_init_timers timers;
+ struct x86_init_iommu iommu;
+ struct x86_init_pci pci;
+ struct x86_hyper_init hyper;
+ struct x86_init_acpi acpi;
+};
+
+
+
+
+
+
+struct x86_cpuinit_ops {
+ void (*setup_percpu_clockev)(void);
+ void (*early_percpu_clock_init)(void);
+ void (*fixup_cpu_id)(struct cpuinfo_x86 *c, int node);
+};
+
+struct timespec64;
+# 193 "./arch/x86/include/asm/x86_init.h"
+struct x86_legacy_devices {
+ int pnpbios;
+};
+# 206 "./arch/x86/include/asm/x86_init.h"
+enum x86_legacy_i8042_state {
+ X86_LEGACY_I8042_PLATFORM_ABSENT,
+ X86_LEGACY_I8042_FIRMWARE_ABSENT,
+ X86_LEGACY_I8042_EXPECTED_PRESENT,
+};
+# 224 "./arch/x86/include/asm/x86_init.h"
+struct x86_legacy_features {
+ enum x86_legacy_i8042_state i8042;
+ int rtc;
+ int warm_reset;
+ int no_vga;
+ int reserve_bios_regions;
+ struct x86_legacy_devices devices;
+};
+# 248 "./arch/x86/include/asm/x86_init.h"
+struct x86_hyper_runtime {
+ void (*pin_vcpu)(int cpu);
+ void (*sev_es_hcall_prepare)(struct ghcb *ghcb, struct pt_regs *regs);
+ bool (*sev_es_hcall_finish)(struct ghcb *ghcb, struct pt_regs *regs);
+};
+# 275 "./arch/x86/include/asm/x86_init.h"
+struct x86_platform_ops {
+ unsigned long (*calibrate_cpu)(void);
+ unsigned long (*calibrate_tsc)(void);
+ void (*get_wallclock)(struct timespec64 *ts);
+ int (*set_wallclock)(const struct timespec64 *ts);
+ void (*iommu_shutdown)(void);
+ bool (*is_untracked_pat_range)(u64 start, u64 end);
+ void (*nmi_init)(void);
+ unsigned char (*get_nmi_reason)(void);
+ void (*save_sched_clock_state)(void);
+ void (*restore_sched_clock_state)(void);
+ void (*apic_post_init)(void);
+ struct x86_legacy_features legacy;
+ void (*set_legacy_features)(void);
+ struct x86_hyper_runtime hyper;
+};
+
+struct pci_dev;
+
+struct x86_msi_ops {
+ void (*restore_msi_irqs)(struct pci_dev *dev);
+};
+
+struct x86_apic_ops {
+ unsigned int (*io_apic_read) (unsigned int apic, unsigned int reg);
+ void (*restore)(void);
+};
+
+extern struct x86_init_ops x86_init;
+extern struct x86_cpuinit_ops x86_cpuinit;
+extern struct x86_platform_ops x86_platform;
+extern struct x86_msi_ops x86_msi;
+extern struct x86_apic_ops x86_apic_ops;
+
+extern void x86_early_init_platform_quirks(void);
+extern void x86_init_noop(void);
+extern void x86_init_uint_noop(unsigned int unused);
+extern bool bool_x86_init_noop(void);
+extern void x86_op_int_noop(int cpu);
+extern bool x86_pnpbios_disabled(void);
+# 26 "./arch/x86/include/asm/pgtable.h" 2
+# 1 "./arch/x86/include/asm/fpu/xstate.h" 1
+# 78 "./arch/x86/include/asm/fpu/xstate.h"
+extern u64 xfeatures_mask_all;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 xfeatures_mask_supervisor(void)
+{
+ return xfeatures_mask_all & ((1 << XFEATURE_PASID));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 xfeatures_mask_user(void)
+{
+ return xfeatures_mask_all & ((1 << XFEATURE_FP) | (1 << XFEATURE_SSE) | (1 << XFEATURE_YMM) | (1 << XFEATURE_OPMASK) | (1 << XFEATURE_ZMM_Hi256) | (1 << XFEATURE_Hi16_ZMM) | (1 << XFEATURE_PKRU) | (1 << XFEATURE_BNDREGS) | (1 << XFEATURE_BNDCSR));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 xfeatures_mask_dynamic(void)
+{
+ if (!(__builtin_constant_p((18*32+19)) && ( ((((18*32+19))>>5)==(0) && (1UL<<(((18*32+19))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+19))>>5)==(1) && (1UL<<(((18*32+19))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+19))>>5)==(2) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(3) && (1UL<<(((18*32+19))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+19))>>5)==(4) && (1UL<<(((18*32+19))&31) & (0) )) || ((((18*32+19))>>5)==(5) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(6) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(7) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(8) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(9) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(10) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(11) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(12) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(13) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(14) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(15) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(16) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(17) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(18) && (1UL<<(((18*32+19))&31) & 0 )) || ((((18*32+19))>>5)==(19) && (1UL<<(((18*32+19))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((18*32+19), (unsigned long *)((&boot_cpu_data)->x86_capability))))
+  return ((1 << XFEATURE_LBR)) & ~(1 << XFEATURE_LBR);
+
+ return ((1 << XFEATURE_LBR));
+}
+
+extern u64 xstate_fx_sw_bytes[6];
+
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) update_regset_xstate_info(unsigned int size,
+          u64 xstate_mask);
+
+void *get_xsave_addr(struct xregs_state *xsave, int xfeature_nr);
+const void *get_xsave_field_ptr(int xfeature_nr);
+int using_compacted_format(void);
+int xfeature_size(int xfeature_nr);
+struct membuf;
+void copy_xstate_to_kernel(struct membuf to, struct xregs_state *xsave);
+int copy_kernel_to_xstate(struct xregs_state *xsave, const void *kbuf);
+int copy_user_to_xstate(struct xregs_state *xsave, const void *ubuf);
+void copy_supervisor_to_kernel(struct xregs_state *xsave);
+void copy_dynamic_supervisor_to_kernel(struct xregs_state *xstate, u64 mask);
+void copy_kernel_to_dynamic_supervisor(struct xregs_state *xstate, u64 mask);
+
+
+
+int validate_user_xstate_header(const struct xstate_header *hdr);
+# 27 "./arch/x86/include/asm/pgtable.h" 2
+# 1 "./arch/x86/include/asm/fpu/api.h" 1
+# 27 "./arch/x86/include/asm/fpu/api.h"
+extern void kernel_fpu_begin_mask(unsigned int kfpu_mask);
+extern void kernel_fpu_end(void);
+extern bool irq_fpu_usable(void);
+extern void fpregs_mark_activate(void);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kernel_fpu_begin(void)
+{
+
+
+
+
+
+ kernel_fpu_begin_mask((((1UL)) << (1)));
+
+
+
+
+
+
+
+}
+# 67 "./arch/x86/include/asm/fpu/api.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fpregs_lock(void)
+{
+ if (!0)
+  local_bh_disable();
+ else
+  do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fpregs_unlock(void)
+{
+ if (!0)
+  local_bh_enable();
+ else
+  do { __asm__ __volatile__("": : :"memory"); __preempt_count_sub(1); } while (0);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fpregs_assert_state_consistent(void) { }
+
+
+
+
+
+extern void switch_fpu_return(void);
+# 101 "./arch/x86/include/asm/fpu/api.h"
+extern int cpu_has_xfeatures(u64 xfeatures_mask, const char **feature_name);
+# 113 "./arch/x86/include/asm/fpu/api.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_pasid(void) { }
+# 28 "./arch/x86/include/asm/pgtable.h" 2
+# 1 "./include/asm-generic/pgtable_uffd.h" 1
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int pte_uffd_wp(pte_t pte)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int pmd_uffd_wp(pmd_t pmd)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pte_t pte_mkuffd_wp(pte_t pte)
+{
+ return pte;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pmd_t pmd_mkuffd_wp(pmd_t pmd)
+{
+ return pmd;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pte_t pte_clear_uffd_wp(pte_t pte)
+{
+ return pte;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pmd_t pmd_clear_uffd_wp(pmd_t pmd)
+{
+ return pmd;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pte_t pte_swp_mkuffd_wp(pte_t pte)
+{
+ return pte;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) int pte_swp_uffd_wp(pte_t pte)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) pte_t pte_swp_clear_uffd_wp(pte_t pte)
+{
+ return pte;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_swp_mkuffd_wp(pmd_t pmd)
+{
+ return pmd;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_swp_uffd_wp(pmd_t pmd)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_swp_clear_uffd_wp(pmd_t pmd)
+{
+ return pmd;
+}
+# 29 "./arch/x86/include/asm/pgtable.h" 2
+
+extern pgd_t early_top_pgt[512];
+bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __early_make_pgtable(unsigned long address, pmdval_t pmd);
+
+void ptdump_walk_pgd_level(struct seq_file *m, struct mm_struct *mm);
+void ptdump_walk_pgd_level_debugfs(struct seq_file *m, struct mm_struct *mm,
+       bool user);
+void ptdump_walk_pgd_level_checkwx(void);
+void ptdump_walk_user_pgd_level_checkwx(void);
+# 51 "./arch/x86/include/asm/pgtable.h"
+extern unsigned long empty_zero_page[((1UL) << 12) / sizeof(unsigned long)]
+ __attribute__((__externally_visible__));
+
+
+extern spinlock_t pgd_lock;
+extern struct list_head pgd_list;
+
+extern struct mm_struct *pgd_page_get_mm(struct page *page);
+
+extern pmdval_t early_pmd_flags;
+# 124 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_dirty(pte_t pte)
+{
+ return pte_flags(pte) & (((pteval_t)(1)) << 6);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u32 read_pkru(void)
+{
+ if ((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))))
+  return rdpkru();
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void write_pkru(u32 pkru)
+{
+ struct pkru_state *pk;
+
+ if (!(__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(19) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability))))
+  return;
+
+ pk = get_xsave_addr(&get_current()->thread.fpu.state.xsave, XFEATURE_PKRU);
+
+
+
+
+
+
+ fpregs_lock();
+ if (pk)
+  pk->pkru = pkru;
+ __write_pkru(pkru);
+ fpregs_unlock();
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_young(pte_t pte)
+{
+ return pte_flags(pte) & (((pteval_t)(1)) << 5);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_dirty(pmd_t pmd)
+{
+ return pmd_flags(pmd) & (((pteval_t)(1)) << 6);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_young(pmd_t pmd)
+{
+ return pmd_flags(pmd) & (((pteval_t)(1)) << 5);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_dirty(pud_t pud)
+{
+ return pud_flags(pud) & (((pteval_t)(1)) << 6);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_young(pud_t pud)
+{
+ return pud_flags(pud) & (((pteval_t)(1)) << 5);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_write(pte_t pte)
+{
+ return pte_flags(pte) & (((pteval_t)(1)) << 1);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_huge(pte_t pte)
+{
+ return pte_flags(pte) & (((pteval_t)(1)) << 7);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_global(pte_t pte)
+{
+ return pte_flags(pte) & (((pteval_t)(1)) << 8);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_exec(pte_t pte)
+{
+ return !(pte_flags(pte) & (((pteval_t)(1)) << 63));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_special(pte_t pte)
+{
+ return pte_flags(pte) & (((pteval_t)(1)) << 9);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 protnone_mask(u64 val);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pte_pfn(pte_t pte)
+{
+ phys_addr_t pfn = native_pte_val(pte);
+ pfn ^= protnone_mask(pfn);
+ return (pfn & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))))) >> 12;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pmd_pfn(pmd_t pmd)
+{
+ phys_addr_t pfn = native_pmd_val(pmd);
+ pfn ^= protnone_mask(pfn);
+ return (pfn & pmd_pfn_mask(pmd)) >> 12;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pud_pfn(pud_t pud)
+{
+ phys_addr_t pfn = native_pud_val(pud);
+ pfn ^= protnone_mask(pfn);
+ return (pfn & pud_pfn_mask(pud)) >> 12;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long p4d_pfn(p4d_t p4d)
+{
+ return (native_p4d_val(p4d) & p4d_pfn_mask(p4d)) >> 12;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pgd_pfn(pgd_t pgd)
+{
+ return (native_pgd_val(pgd) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))))) >> 12;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_large(p4d_t p4d)
+{
+
+ return 0;
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_large(pmd_t pte)
+{
+ return pmd_flags(pte) & (((pteval_t)(1)) << 7);
+}
+# 303 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_set_flags(pte_t pte, pteval_t set)
+{
+ pteval_t v = native_pte_val(pte);
+
+ return native_make_pte(v | set);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_clear_flags(pte_t pte, pteval_t clear)
+{
+ pteval_t v = native_pte_val(pte);
+
+ return native_make_pte(v & ~clear);
+}
+# 334 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkclean(pte_t pte)
+{
+ return pte_clear_flags(pte, (((pteval_t)(1)) << 6));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkold(pte_t pte)
+{
+ return pte_clear_flags(pte, (((pteval_t)(1)) << 5));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_wrprotect(pte_t pte)
+{
+ return pte_clear_flags(pte, (((pteval_t)(1)) << 1));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkexec(pte_t pte)
+{
+ return pte_clear_flags(pte, (((pteval_t)(1)) << 63));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkdirty(pte_t pte)
+{
+ return pte_set_flags(pte, (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkyoung(pte_t pte)
+{
+ return pte_set_flags(pte, (((pteval_t)(1)) << 5));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkwrite(pte_t pte)
+{
+ return pte_set_flags(pte, (((pteval_t)(1)) << 1));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkhuge(pte_t pte)
+{
+ return pte_set_flags(pte, (((pteval_t)(1)) << 7));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_clrhuge(pte_t pte)
+{
+ return pte_clear_flags(pte, (((pteval_t)(1)) << 7));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkglobal(pte_t pte)
+{
+ return pte_set_flags(pte, (((pteval_t)(1)) << 8));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_clrglobal(pte_t pte)
+{
+ return pte_clear_flags(pte, (((pteval_t)(1)) << 8));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkspecial(pte_t pte)
+{
+ return pte_set_flags(pte, (((pteval_t)(1)) << 9));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mkdevmap(pte_t pte)
+{
+ return pte_set_flags(pte, (((pteval_t)(1)) << 9)|(((u64)(1)) << 58));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_set_flags(pmd_t pmd, pmdval_t set)
+{
+ pmdval_t v = native_pmd_val(pmd);
+
+ return native_make_pmd(v | set);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_clear_flags(pmd_t pmd, pmdval_t clear)
+{
+ pmdval_t v = native_pmd_val(pmd);
+
+ return native_make_pmd(v & ~clear);
+}
+# 430 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkold(pmd_t pmd)
+{
+ return pmd_clear_flags(pmd, (((pteval_t)(1)) << 5));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkclean(pmd_t pmd)
+{
+ return pmd_clear_flags(pmd, (((pteval_t)(1)) << 6));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_wrprotect(pmd_t pmd)
+{
+ return pmd_clear_flags(pmd, (((pteval_t)(1)) << 1));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkdirty(pmd_t pmd)
+{
+ return pmd_set_flags(pmd, (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkdevmap(pmd_t pmd)
+{
+ return pmd_set_flags(pmd, (((u64)(1)) << 58));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkhuge(pmd_t pmd)
+{
+ return pmd_set_flags(pmd, (((pteval_t)(1)) << 7));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkyoung(pmd_t pmd)
+{
+ return pmd_set_flags(pmd, (((pteval_t)(1)) << 5));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkwrite(pmd_t pmd)
+{
+ return pmd_set_flags(pmd, (((pteval_t)(1)) << 1));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_set_flags(pud_t pud, pudval_t set)
+{
+ pudval_t v = native_pud_val(pud);
+
+ return native_make_pud(v | set);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_clear_flags(pud_t pud, pudval_t clear)
+{
+ pudval_t v = native_pud_val(pud);
+
+ return native_make_pud(v & ~clear);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkold(pud_t pud)
+{
+ return pud_clear_flags(pud, (((pteval_t)(1)) << 5));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkclean(pud_t pud)
+{
+ return pud_clear_flags(pud, (((pteval_t)(1)) << 6));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_wrprotect(pud_t pud)
+{
+ return pud_clear_flags(pud, (((pteval_t)(1)) << 1));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkdirty(pud_t pud)
+{
+ return pud_set_flags(pud, (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkdevmap(pud_t pud)
+{
+ return pud_set_flags(pud, (((u64)(1)) << 58));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkhuge(pud_t pud)
+{
+ return pud_set_flags(pud, (((pteval_t)(1)) << 7));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkyoung(pud_t pud)
+{
+ return pud_set_flags(pud, (((pteval_t)(1)) << 5));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mkwrite(pud_t pud)
+{
+ return pud_set_flags(pud, (((pteval_t)(1)) << 1));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_soft_dirty(pte_t pte)
+{
+ return pte_flags(pte) & (((pteval_t)(0)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_soft_dirty(pmd_t pmd)
+{
+ return pmd_flags(pmd) & (((pteval_t)(0)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_soft_dirty(pud_t pud)
+{
+ return pud_flags(pud) & (((pteval_t)(0)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_mksoft_dirty(pte_t pte)
+{
+ return pte_set_flags(pte, (((pteval_t)(0))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mksoft_dirty(pmd_t pmd)
+{
+ return pmd_set_flags(pmd, (((pteval_t)(0))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_mksoft_dirty(pud_t pud)
+{
+ return pud_set_flags(pud, (((pteval_t)(0))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_clear_soft_dirty(pte_t pte)
+{
+ return pte_clear_flags(pte, (((pteval_t)(0))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_clear_soft_dirty(pmd_t pmd)
+{
+ return pmd_clear_flags(pmd, (((pteval_t)(0))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pud_clear_soft_dirty(pud_t pud)
+{
+ return pud_clear_flags(pud, (((pteval_t)(0))));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprotval_t massage_pgprot(pgprot_t pgprot)
+{
+ pgprotval_t protval = ((pgprot).pgprot);
+
+ if (protval & (((pteval_t)(1)) << 0))
+  protval &= __supported_pte_mask;
+
+ return protval;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprotval_t check_pgprot(pgprot_t pgprot)
+{
+ pgprotval_t massaged_val = massage_pgprot(pgprot);
+# 600 "./arch/x86/include/asm/pgtable.h"
+ return massaged_val;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pfn_pte(unsigned long page_nr, pgprot_t pgprot)
+{
+ phys_addr_t pfn = (phys_addr_t)page_nr << 12;
+ pfn ^= protnone_mask(((pgprot).pgprot));
+ pfn &= ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1))));
+ return native_make_pte(pfn | check_pgprot(pgprot));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pfn_pmd(unsigned long page_nr, pgprot_t pgprot)
+{
+ phys_addr_t pfn = (phys_addr_t)page_nr << 12;
+ pfn ^= protnone_mask(((pgprot).pgprot));
+ pfn &= (((signed long)(~(((1UL) << 21)-1))) & ((phys_addr_t)((1ULL << 52) - 1)));
+ return native_make_pmd(pfn | check_pgprot(pgprot));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pfn_pud(unsigned long page_nr, pgprot_t pgprot)
+{
+ phys_addr_t pfn = (phys_addr_t)page_nr << 12;
+ pfn ^= protnone_mask(((pgprot).pgprot));
+ pfn &= (((signed long)(~(((1UL) << 30)-1))) & ((phys_addr_t)((1ULL << 52) - 1)));
+ return native_make_pud(pfn | check_pgprot(pgprot));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_mkinvalid(pmd_t pmd)
+{
+ return pfn_pmd(pmd_pfn(pmd),
+        ((pgprot_t) { (pmd_flags(pmd) & ~((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 8))) } ));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 flip_protnone_guard(u64 oldval, u64 val, u64 mask);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_modify(pte_t pte, pgprot_t newprot)
+{
+ pteval_t val = native_pte_val(pte), oldval = val;
+
+
+
+
+
+ val &= (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0))));
+ val |= check_pgprot(newprot) & ~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0))));
+ val = flip_protnone_guard(oldval, val, ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))));
+ return native_make_pte(val);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_modify(pmd_t pmd, pgprot_t newprot)
+{
+ pmdval_t val = native_pmd_val(pmd), oldval = val;
+
+ val &= ((((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0)))) | (((pteval_t)(1)) << 7));
+ val |= check_pgprot(newprot) & ~((((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0)))) | (((pteval_t)(1)) << 7));
+ val = flip_protnone_guard(oldval, val, (((signed long)(~(((1UL) << 21)-1))) & ((phys_addr_t)((1ULL << 52) - 1))));
+ return native_make_pmd(val);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
+{
+ pgprotval_t preservebits = ((oldprot).pgprot) & (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0))));
+ pgprotval_t addbits = ((newprot).pgprot) & ~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))) | (((pteval_t)(0))));
+ return ((pgprot_t) { (preservebits | addbits) } );
+}
+# 678 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgprot_t arch_filter_pgprot(pgprot_t prot)
+{
+ return ((pgprot_t) { (massage_pgprot(prot)) } );
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_new_memtype_allowed(u64 paddr, unsigned long size,
+      enum page_cache_mode pcm,
+      enum page_cache_mode new_pcm)
+{
+
+
+
+ if (x86_platform.is_untracked_pat_range(paddr, paddr + size))
+  return 1;
+# 701 "./arch/x86/include/asm/pgtable.h"
+ if ((pcm == _PAGE_CACHE_MODE_UC_MINUS &&
+      new_pcm == _PAGE_CACHE_MODE_WB) ||
+     (pcm == _PAGE_CACHE_MODE_WC &&
+      new_pcm == _PAGE_CACHE_MODE_WB) ||
+     (pcm == _PAGE_CACHE_MODE_WT &&
+      new_pcm == _PAGE_CACHE_MODE_WB) ||
+     (pcm == _PAGE_CACHE_MODE_WT &&
+      new_pcm == _PAGE_CACHE_MODE_WC)) {
+  return 0;
+ }
+
+ return 1;
+}
+
+pmd_t *populate_extra_pmd(unsigned long vaddr);
+pte_t *populate_extra_pte(unsigned long vaddr);
+
+
+pgd_t __pti_set_user_pgtbl(pgd_t *pgdp, pgd_t pgd);
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgd_t pti_set_user_pgtbl(pgd_t *pgdp, pgd_t pgd)
+{
+ if (!( __builtin_constant_p((__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(19) && (1UL<<((( 7*32+11))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 7*32+11), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(19) && (1UL<<((( 7*32+11))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 7*32+11), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has(( 7*32+11)) ))
+  return pgd;
+ return __pti_set_user_pgtbl(pgdp, pgd);
+}
+# 745 "./arch/x86/include/asm/pgtable.h"
+# 1 "./arch/x86/include/asm/pgtable_64.h" 1
+# 17 "./arch/x86/include/asm/pgtable_64.h"
+# 1 "./arch/x86/include/asm/fixmap.h" 1
+# 17 "./arch/x86/include/asm/fixmap.h"
+# 1 "./arch/x86/include/generated/asm/kmap_size.h" 1
+# 18 "./arch/x86/include/asm/fixmap.h" 2
+# 36 "./arch/x86/include/asm/fixmap.h"
+# 1 "./arch/x86/include/asm/apicdef.h" 1
+# 179 "./arch/x86/include/asm/apicdef.h"
+struct local_apic {
+
+        struct { unsigned int __reserved[4]; } __reserved_01;
+
+        struct { unsigned int __reserved[4]; } __reserved_02;
+
+        struct {
+  unsigned int __reserved_1 : 24,
+   phys_apic_id : 4,
+   __reserved_2 : 4;
+  unsigned int __reserved[3];
+ } id;
+
+        const
+ struct {
+  unsigned int version : 8,
+   __reserved_1 : 8,
+   max_lvt : 8,
+   __reserved_2 : 8;
+  unsigned int __reserved[3];
+ } version;
+
+        struct { unsigned int __reserved[4]; } __reserved_03;
+
+        struct { unsigned int __reserved[4]; } __reserved_04;
+
+        struct { unsigned int __reserved[4]; } __reserved_05;
+
+        struct { unsigned int __reserved[4]; } __reserved_06;
+
+        struct {
+  unsigned int priority : 8,
+   __reserved_1 : 24;
+  unsigned int __reserved_2[3];
+ } tpr;
+
+        const
+ struct {
+  unsigned int priority : 8,
+   __reserved_1 : 24;
+  unsigned int __reserved_2[3];
+ } apr;
+
+        const
+ struct {
+  unsigned int priority : 8,
+   __reserved_1 : 24;
+  unsigned int __reserved_2[3];
+ } ppr;
+
+        struct {
+  unsigned int eoi;
+  unsigned int __reserved[3];
+ } eoi;
+
+        struct { unsigned int __reserved[4]; } __reserved_07;
+
+        struct {
+  unsigned int __reserved_1 : 24,
+   logical_dest : 8;
+  unsigned int __reserved_2[3];
+ } ldr;
+
+        struct {
+  unsigned int __reserved_1 : 28,
+   model : 4;
+  unsigned int __reserved_2[3];
+ } dfr;
+
+        struct {
+  unsigned int spurious_vector : 8,
+   apic_enabled : 1,
+   focus_cpu : 1,
+   __reserved_2 : 22;
+  unsigned int __reserved_3[3];
+ } svr;
+
+        struct {
+         unsigned int bitfield;
+  unsigned int __reserved[3];
+ } isr [8];
+
+        struct {
+         unsigned int bitfield;
+  unsigned int __reserved[3];
+ } tmr [8];
+
+        struct {
+         unsigned int bitfield;
+  unsigned int __reserved[3];
+ } irr [8];
+
+        union {
+  struct {
+   unsigned int send_cs_error : 1,
+    receive_cs_error : 1,
+    send_accept_error : 1,
+    receive_accept_error : 1,
+    __reserved_1 : 1,
+    send_illegal_vector : 1,
+    receive_illegal_vector : 1,
+    illegal_register_address : 1,
+    __reserved_2 : 24;
+   unsigned int __reserved_3[3];
+  } error_bits;
+  struct {
+   unsigned int errors;
+   unsigned int __reserved_3[3];
+  } all_errors;
+ } esr;
+
+        struct { unsigned int __reserved[4]; } __reserved_08;
+
+        struct { unsigned int __reserved[4]; } __reserved_09;
+
+        struct { unsigned int __reserved[4]; } __reserved_10;
+
+        struct { unsigned int __reserved[4]; } __reserved_11;
+
+        struct { unsigned int __reserved[4]; } __reserved_12;
+
+        struct { unsigned int __reserved[4]; } __reserved_13;
+
+        struct { unsigned int __reserved[4]; } __reserved_14;
+
+        struct {
+  unsigned int vector : 8,
+   delivery_mode : 3,
+   destination_mode : 1,
+   delivery_status : 1,
+   __reserved_1 : 1,
+   level : 1,
+   trigger : 1,
+   __reserved_2 : 2,
+   shorthand : 2,
+   __reserved_3 : 12;
+  unsigned int __reserved_4[3];
+ } icr1;
+
+        struct {
+  union {
+   unsigned int __reserved_1 : 24,
+    phys_dest : 4,
+    __reserved_2 : 4;
+   unsigned int __reserved_3 : 24,
+    logical_dest : 8;
+  } dest;
+  unsigned int __reserved_4[3];
+ } icr2;
+
+        struct {
+  unsigned int vector : 8,
+   __reserved_1 : 4,
+   delivery_status : 1,
+   __reserved_2 : 3,
+   mask : 1,
+   timer_mode : 1,
+   __reserved_3 : 14;
+  unsigned int __reserved_4[3];
+ } lvt_timer;
+
+        struct {
+  unsigned int vector : 8,
+   delivery_mode : 3,
+   __reserved_1 : 1,
+   delivery_status : 1,
+   __reserved_2 : 3,
+   mask : 1,
+   __reserved_3 : 15;
+  unsigned int __reserved_4[3];
+ } lvt_thermal;
+
+        struct {
+  unsigned int vector : 8,
+   delivery_mode : 3,
+   __reserved_1 : 1,
+   delivery_status : 1,
+   __reserved_2 : 3,
+   mask : 1,
+   __reserved_3 : 15;
+  unsigned int __reserved_4[3];
+ } lvt_pc;
+
+        struct {
+  unsigned int vector : 8,
+   delivery_mode : 3,
+   __reserved_1 : 1,
+   delivery_status : 1,
+   polarity : 1,
+   remote_irr : 1,
+   trigger : 1,
+   mask : 1,
+   __reserved_2 : 15;
+  unsigned int __reserved_3[3];
+ } lvt_lint0;
+
+        struct {
+  unsigned int vector : 8,
+   delivery_mode : 3,
+   __reserved_1 : 1,
+   delivery_status : 1,
+   polarity : 1,
+   remote_irr : 1,
+   trigger : 1,
+   mask : 1,
+   __reserved_2 : 15;
+  unsigned int __reserved_3[3];
+ } lvt_lint1;
+
+        struct {
+  unsigned int vector : 8,
+   __reserved_1 : 4,
+   delivery_status : 1,
+   __reserved_2 : 3,
+   mask : 1,
+   __reserved_3 : 15;
+  unsigned int __reserved_4[3];
+ } lvt_error;
+
+        struct {
+  unsigned int initial_count;
+  unsigned int __reserved_2[3];
+ } timer_icr;
+
+        const
+ struct {
+  unsigned int curr_count;
+  unsigned int __reserved_2[3];
+ } timer_ccr;
+
+        struct { unsigned int __reserved[4]; } __reserved_16;
+
+        struct { unsigned int __reserved[4]; } __reserved_17;
+
+        struct { unsigned int __reserved[4]; } __reserved_18;
+
+        struct { unsigned int __reserved[4]; } __reserved_19;
+
+        struct {
+  unsigned int divisor : 4,
+   __reserved_1 : 28;
+  unsigned int __reserved_2[3];
+ } timer_dcr;
+
+        struct { unsigned int __reserved[4]; } __reserved_20;
+
+} __attribute__ ((packed));
+# 435 "./arch/x86/include/asm/apicdef.h"
+enum apic_delivery_modes {
+ APIC_DELIVERY_MODE_FIXED = 0,
+ APIC_DELIVERY_MODE_LOWESTPRIO = 1,
+ APIC_DELIVERY_MODE_SMI = 2,
+ APIC_DELIVERY_MODE_NMI = 4,
+ APIC_DELIVERY_MODE_INIT = 5,
+ APIC_DELIVERY_MODE_EXTINT = 7,
+};
+# 37 "./arch/x86/include/asm/fixmap.h" 2
+
+
+
+
+
+# 1 "./arch/x86/include/uapi/asm/vsyscall.h" 1
+
+
+
+
+enum vsyscall_num {
+ __NR_vgettimeofday,
+ __NR_vtime,
+ __NR_vgetcpu,
+};
+# 43 "./arch/x86/include/asm/fixmap.h" 2
+# 81 "./arch/x86/include/asm/fixmap.h"
+enum fixed_addresses {
+
+
+
+
+ VSYSCALL_PAGE = (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - (-10UL << 20)) >> 12,
+
+
+ FIX_DBGP_BASE,
+ FIX_EARLYCON_MEM_BASE,
+
+
+
+
+ FIX_APIC_BASE,
+
+
+ FIX_IO_APIC_BASE_0,
+ FIX_IO_APIC_BASE_END = FIX_IO_APIC_BASE_0 + 128 - 1,
+# 118 "./arch/x86/include/asm/fixmap.h"
+ __end_of_permanent_fixed_addresses,
+# 130 "./arch/x86/include/asm/fixmap.h"
+ FIX_BTMAP_END =
+  (__end_of_permanent_fixed_addresses ^
+   (__end_of_permanent_fixed_addresses + (64 * 8) - 1)) &
+  -512
+  ? __end_of_permanent_fixed_addresses + (64 * 8) -
+    (__end_of_permanent_fixed_addresses & ((64 * 8) - 1))
+  : __end_of_permanent_fixed_addresses,
+ FIX_BTMAP_BEGIN = FIX_BTMAP_END + (64 * 8) - 1,
+
+
+
+
+
+
+ __end_of_fixed_addresses
+};
+
+
+extern void reserve_top_address(unsigned long reserve);
+
+
+
+
+
+
+extern int fixmaps_set;
+
+extern pte_t *pkmap_page_table;
+
+void __native_set_fixmap(enum fixed_addresses idx, pte_t pte);
+void native_set_fixmap(unsigned idx,
+         phys_addr_t phys, pgprot_t flags);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __set_fixmap(enum fixed_addresses idx,
+    phys_addr_t phys, pgprot_t flags)
+{
+ native_set_fixmap(idx, phys, flags);
+}
+# 182 "./arch/x86/include/asm/fixmap.h"
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) *early_memremap_encrypted(resource_size_t phys_addr,
+          unsigned long size);
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) *early_memremap_encrypted_wp(resource_size_t phys_addr,
+      unsigned long size);
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) *early_memremap_decrypted(resource_size_t phys_addr,
+          unsigned long size);
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) *early_memremap_decrypted_wp(resource_size_t phys_addr,
+      unsigned long size);
+
+# 1 "./include/asm-generic/fixmap.h" 1
+# 30 "./include/asm-generic/fixmap.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned long fix_to_virt(const unsigned int idx)
+{
+ do { extern void __compiletime_assert_237(void) __attribute__((__error__("BUILD_BUG_ON failed: " "idx >= __end_of_fixed_addresses"))); if (!(!(idx >= __end_of_fixed_addresses))) __compiletime_assert_237(); } while (0);
+ return (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - ((idx) << 12));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long virt_to_fix(const unsigned long vaddr)
+{
+ do { if (__builtin_expect(!!(vaddr >= ((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) || vaddr < (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - (__end_of_permanent_fixed_addresses << 12))), 0)) do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/asm-generic/fixmap.h"), "i" (38), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (238)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0); } while (0);
+ return ((((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - ((vaddr)&(~(((1UL) << 12)-1)))) >> 12);
+}
+# 192 "./arch/x86/include/asm/fixmap.h" 2
+
+
+
+
+void __early_set_fixmap(enum fixed_addresses idx,
+   phys_addr_t phys, pgprot_t flags);
+# 18 "./arch/x86/include/asm/pgtable_64.h" 2
+
+extern p4d_t level4_kernel_pgt[512];
+extern p4d_t level4_ident_pgt[512];
+extern pud_t level3_kernel_pgt[512];
+extern pud_t level3_ident_pgt[512];
+extern pmd_t level2_kernel_pgt[512];
+extern pmd_t level2_fixmap_pgt[512];
+extern pmd_t level2_ident_pgt[512];
+extern pte_t level1_fixmap_pgt[512 * 2];
+extern pgd_t init_top_pgt[];
+
+
+
+extern void paging_init(void);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void sync_initial_page_table(void) { }
+# 54 "./arch/x86/include/asm/pgtable_64.h"
+struct mm_struct;
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool mm_p4d_folded(struct mm_struct *mm)
+{
+ return !(__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) ));
+}
+
+void set_pte_vaddr_p4d(p4d_t *p4d_page, unsigned long vaddr, pte_t new_pte);
+void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_pte(pte_t *ptep, pte_t pte)
+{
+ do { do { extern void __compiletime_assert_239(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_239(); } while (0); do { *(volatile typeof(*ptep) *)&(*ptep) = (pte); } while (0); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_pte_clear(struct mm_struct *mm, unsigned long addr,
+        pte_t *ptep)
+{
+ native_set_pte(ptep, native_make_pte(0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_pte_atomic(pte_t *ptep, pte_t pte)
+{
+ native_set_pte(ptep, pte);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_pmd(pmd_t *pmdp, pmd_t pmd)
+{
+ do { do { extern void __compiletime_assert_240(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pmdp) == sizeof(char) || sizeof(*pmdp) == sizeof(short) || sizeof(*pmdp) == sizeof(int) || sizeof(*pmdp) == sizeof(long)) || sizeof(*pmdp) == sizeof(long long))) __compiletime_assert_240(); } while (0); do { *(volatile typeof(*pmdp) *)&(*pmdp) = (pmd); } while (0); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_pmd_clear(pmd_t *pmd)
+{
+ native_set_pmd(pmd, native_make_pmd(0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t native_ptep_get_and_clear(pte_t *xp)
+{
+
+
+
+
+
+ pte_t ret = *xp;
+ native_pte_clear(((void *)0), 0, xp);
+ return ret;
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t native_pmdp_get_and_clear(pmd_t *xp)
+{
+
+
+
+
+
+ pmd_t ret = *xp;
+ native_pmd_clear(xp);
+ return ret;
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_pud(pud_t *pudp, pud_t pud)
+{
+ do { do { extern void __compiletime_assert_241(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pudp) == sizeof(char) || sizeof(*pudp) == sizeof(short) || sizeof(*pudp) == sizeof(int) || sizeof(*pudp) == sizeof(long)) || sizeof(*pudp) == sizeof(long long))) __compiletime_assert_241(); } while (0); do { *(volatile typeof(*pudp) *)&(*pudp) = (pud); } while (0); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_pud_clear(pud_t *pud)
+{
+ native_set_pud(pud, native_make_pud(0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t native_pudp_get_and_clear(pud_t *xp)
+{
+
+
+
+
+
+
+ pud_t ret = *xp;
+
+ native_pud_clear(xp);
+ return ret;
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_p4d(p4d_t *p4dp, p4d_t p4d)
+{
+ pgd_t pgd;
+
+ if ((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )) || !1) {
+  do { do { extern void __compiletime_assert_242(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*p4dp) == sizeof(char) || sizeof(*p4dp) == sizeof(short) || sizeof(*p4dp) == sizeof(int) || sizeof(*p4dp) == sizeof(long)) || sizeof(*p4dp) == sizeof(long long))) __compiletime_assert_242(); } while (0); do { *(volatile typeof(*p4dp) *)&(*p4dp) = (p4d); } while (0); } while (0);
+  return;
+ }
+
+ pgd = native_make_pgd(native_p4d_val(p4d));
+ pgd = pti_set_user_pgtbl((pgd_t *)p4dp, pgd);
+ do { do { extern void __compiletime_assert_243(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*p4dp) == sizeof(char) || sizeof(*p4dp) == sizeof(short) || sizeof(*p4dp) == sizeof(int) || sizeof(*p4dp) == sizeof(long)) || sizeof(*p4dp) == sizeof(long long))) __compiletime_assert_243(); } while (0); do { *(volatile typeof(*p4dp) *)&(*p4dp) = (native_make_p4d(native_pgd_val(pgd))); } while (0); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_p4d_clear(p4d_t *p4d)
+{
+ native_set_p4d(p4d, native_make_p4d(0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_set_pgd(pgd_t *pgdp, pgd_t pgd)
+{
+ do { do { extern void __compiletime_assert_244(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pgdp) == sizeof(char) || sizeof(*pgdp) == sizeof(short) || sizeof(*pgdp) == sizeof(int) || sizeof(*pgdp) == sizeof(long)) || sizeof(*pgdp) == sizeof(long long))) __compiletime_assert_244(); } while (0); do { *(volatile typeof(*pgdp) *)&(*pgdp) = (pti_set_user_pgtbl(pgdp, pgd)); } while (0); } while (0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void native_pgd_clear(pgd_t *pgd)
+{
+ native_set_pgd(pgd, native_make_pgd(0));
+}
+# 241 "./arch/x86/include/asm/pgtable_64.h"
+extern int kern_addr_valid(unsigned long addr);
+extern void cleanup_highmap(void);
+# 258 "./arch/x86/include/asm/pgtable_64.h"
+extern void init_extra_mapping_uc(unsigned long phys, unsigned long size);
+extern void init_extra_mapping_wb(unsigned long phys, unsigned long size);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool gup_fast_permitted(unsigned long start, unsigned long end)
+{
+ if (end >> ((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )) ? 56 : 47))
+  return false;
+ return true;
+}
+
+# 1 "./arch/x86/include/asm/pgtable-invert.h" 1
+# 16 "./arch/x86/include/asm/pgtable-invert.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __pte_needs_invert(u64 val)
+{
+ return val && !(val & (((pteval_t)(1)) << 0));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 protnone_mask(u64 val)
+{
+ return __pte_needs_invert(val) ? ~0ull : 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u64 flip_protnone_guard(u64 oldval, u64 val, u64 mask)
+{
+
+
+
+
+
+ if (__pte_needs_invert(oldval) != __pte_needs_invert(val))
+  val = (val & ~mask) | (~val & mask);
+ return val;
+}
+# 270 "./arch/x86/include/asm/pgtable_64.h" 2
+# 746 "./arch/x86/include/asm/pgtable.h" 2
+# 754 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_none(pte_t pte)
+{
+ return !(pte.pte & ~(((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5))));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_same(pte_t a, pte_t b)
+{
+ return a.pte == b.pte;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_present(pte_t a)
+{
+ return pte_flags(a) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 8));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_devmap(pte_t a)
+{
+ return (pte_flags(a) & (((u64)(1)) << 58)) == (((u64)(1)) << 58);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pte_accessible(struct mm_struct *mm, pte_t a)
+{
+ if (pte_flags(a) & (((pteval_t)(1)) << 0))
+  return true;
+
+ if ((pte_flags(a) & (((pteval_t)(1)) << 8)) &&
+   mm_tlb_flush_pending(mm))
+  return true;
+
+ return false;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_present(pmd_t pmd)
+{
+
+
+
+
+
+
+ return pmd_flags(pmd) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 8) | (((pteval_t)(1)) << 7));
+}
+# 819 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_none(pmd_t pmd)
+{
+
+
+ unsigned long val = native_pmd_val(pmd);
+ return (val & ~((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5))) == 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pmd_page_vaddr(pmd_t pmd)
+{
+ return (unsigned long)((void *)((unsigned long)(native_pmd_val(pmd) & pmd_pfn_mask(pmd))+((unsigned long)page_offset_base)));
+}
+# 847 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_bad(pmd_t pmd)
+{
+ return (pmd_flags(pmd) & ~(((pteval_t)(1)) << 2)) != ((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 1)| 0|(((pteval_t)(1)) << 5)| 0|(((pteval_t)(1)) << 6)| 0| 0| (((pteval_t)(0ULL))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pages_to_mb(unsigned long npg)
+{
+ return npg >> (20 - 12);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_none(pud_t pud)
+{
+ return (native_pud_val(pud) & ~(((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5)))) == 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_present(pud_t pud)
+{
+ return pud_flags(pud) & (((pteval_t)(1)) << 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pud_page_vaddr(pud_t pud)
+{
+ return (unsigned long)((void *)((unsigned long)(native_pud_val(pud) & pud_pfn_mask(pud))+((unsigned long)page_offset_base)));
+}
+# 880 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_large(pud_t pud)
+{
+ return (native_pud_val(pud) & ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0))) ==
+  ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_bad(pud_t pud)
+{
+ return (pud_flags(pud) & ~(((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 1)| 0|(((pteval_t)(1)) << 5)| 0|(((pteval_t)(1)) << 6)| 0| 0| (((pteval_t)(0ULL)))) | (((pteval_t)(1)) << 2))) != 0;
+}
+# 899 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_none(p4d_t p4d)
+{
+ return (native_p4d_val(p4d) & ~(((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5)))) == 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_present(p4d_t p4d)
+{
+ return p4d_flags(p4d) & (((pteval_t)(1)) << 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long p4d_page_vaddr(p4d_t p4d)
+{
+ return (unsigned long)((void *)((unsigned long)(native_p4d_val(p4d) & p4d_pfn_mask(p4d))+((unsigned long)page_offset_base)));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_bad(p4d_t p4d)
+{
+ unsigned long ignore_flags = ((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 1)| 0|(((pteval_t)(1)) << 5)| 0|(((pteval_t)(1)) << 6)| 0| 0| (((pteval_t)(0ULL)))) | (((pteval_t)(1)) << 2);
+
+ if (1)
+  ignore_flags |= (((pteval_t)(1)) << 63);
+
+ return (p4d_flags(p4d) & ~ignore_flags) != 0;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long p4d_index(unsigned long address)
+{
+ return (address >> 39) & (ptrs_per_p4d - 1);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_present(pgd_t pgd)
+{
+ if (!(__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )))
+  return 1;
+ return pgd_flags(pgd) & (((pteval_t)(1)) << 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pgd_page_vaddr(pgd_t pgd)
+{
+ return (unsigned long)((void *)((unsigned long)((unsigned long)native_pgd_val(pgd) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 52) - 1)))))+((unsigned long)page_offset_base)));
+}
+# 956 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4d_t *p4d_offset(pgd_t *pgd, unsigned long address)
+{
+ if (!(__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )))
+  return (p4d_t *)pgd;
+ return (p4d_t *)pgd_page_vaddr(*pgd) + p4d_index(address);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_bad(pgd_t pgd)
+{
+ unsigned long ignore_flags = (((pteval_t)(1)) << 2);
+
+ if (!(__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )))
+  return 0;
+
+ if (1)
+  ignore_flags |= (((pteval_t)(1)) << 63);
+
+ return (pgd_flags(pgd) & ~ignore_flags) != ((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 1)| 0|(((pteval_t)(1)) << 5)| 0|(((pteval_t)(1)) << 6)| 0| 0| (((pteval_t)(0ULL))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_none(pgd_t pgd)
+{
+ if (!(__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+ 2) & 31))|(1<<(( 3*32+ 3) & 31))|(1<<(( 3*32+ 1) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & ((1<<(( 9*32+20) & 31))|(1 << (( 9*32+ 2) & 31))) )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & (0|0|0|(1<<((16*32+ 2) & 31))| (1 << ((16*32+29) & 31))) )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 0 : ( __builtin_constant_p((__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p((16*32+16)) && ( ((((16*32+16))>>5)==(0) && (1UL<<(((16*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+16))>>5)==(1) && (1UL<<(((16*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+16))>>5)==(2) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(3) && (1UL<<(((16*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+16))>>5)==(4) && (1UL<<(((16*32+16))&31) & (0) )) || ((((16*32+16))>>5)==(5) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(6) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(7) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(8) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(9) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(10) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(11) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(12) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(13) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(14) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(15) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(16) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(17) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(18) && (1UL<<(((16*32+16))&31) & 0 )) || ((((16*32+16))>>5)==(19) && (1UL<<(((16*32+16))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((16*32+16), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has((16*32+16)) )))
+  return 0;
+
+
+
+
+
+
+ return !native_pgd_val(pgd);
+}
+# 997 "./arch/x86/include/asm/pgtable.h"
+extern int direct_gbpages;
+void init_mem_mapping(void);
+void early_alloc_pgt_buf(void);
+extern void memblock_find_dma_reserve(void);
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) poking_init(void);
+unsigned long init_memory_mapping(unsigned long start,
+      unsigned long end, pgprot_t prot);
+
+
+extern pgd_t trampoline_pgd_entry;
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t native_local_ptep_get_and_clear(pte_t *ptep)
+{
+ pte_t res = *ptep;
+
+
+ native_pte_clear(((void *)0), 0, ptep);
+ return res;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t native_local_pmdp_get_and_clear(pmd_t *pmdp)
+{
+ pmd_t res = *pmdp;
+
+ native_pmd_clear(pmdp);
+ return res;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t native_local_pudp_get_and_clear(pud_t *pudp)
+{
+ pud_t res = *pudp;
+
+ native_pud_clear(pudp);
+ return res;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_pte_at(struct mm_struct *mm, unsigned long addr,
+         pte_t *ptep, pte_t pte)
+{
+ native_set_pte(ptep, pte);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_pmd_at(struct mm_struct *mm, unsigned long addr,
+         pmd_t *pmdp, pmd_t pmd)
+{
+ native_set_pmd(pmdp, pmd);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void set_pud_at(struct mm_struct *mm, unsigned long addr,
+         pud_t *pudp, pud_t pud)
+{
+ native_set_pud(pudp, pud);
+}
+# 1060 "./arch/x86/include/asm/pgtable.h"
+struct vm_area_struct;
+
+
+extern int ptep_set_access_flags(struct vm_area_struct *vma,
+     unsigned long address, pte_t *ptep,
+     pte_t entry, int dirty);
+
+
+extern int ptep_test_and_clear_young(struct vm_area_struct *vma,
+         unsigned long addr, pte_t *ptep);
+
+
+extern int ptep_clear_flush_young(struct vm_area_struct *vma,
+      unsigned long address, pte_t *ptep);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,
+           pte_t *ptep)
+{
+ pte_t pte = native_ptep_get_and_clear(ptep);
+ return pte;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t ptep_get_and_clear_full(struct mm_struct *mm,
+         unsigned long addr, pte_t *ptep,
+         int full)
+{
+ pte_t pte;
+ if (full) {
+
+
+
+
+  pte = native_local_ptep_get_and_clear(ptep);
+ } else {
+  pte = ptep_get_and_clear(mm, addr, ptep);
+ }
+ return pte;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptep_set_wrprotect(struct mm_struct *mm,
+          unsigned long addr, pte_t *ptep)
+{
+ clear_bit(1, (unsigned long *)&ptep->pte);
+}
+
+
+
+
+
+
+extern int pmdp_set_access_flags(struct vm_area_struct *vma,
+     unsigned long address, pmd_t *pmdp,
+     pmd_t entry, int dirty);
+extern int pudp_set_access_flags(struct vm_area_struct *vma,
+     unsigned long address, pud_t *pudp,
+     pud_t entry, int dirty);
+
+
+extern int pmdp_test_and_clear_young(struct vm_area_struct *vma,
+         unsigned long addr, pmd_t *pmdp);
+extern int pudp_test_and_clear_young(struct vm_area_struct *vma,
+         unsigned long addr, pud_t *pudp);
+
+
+extern int pmdp_clear_flush_young(struct vm_area_struct *vma,
+      unsigned long address, pmd_t *pmdp);
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_write(pmd_t pmd)
+{
+ return pmd_flags(pmd) & (((pteval_t)(1)) << 1);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm, unsigned long addr,
+           pmd_t *pmdp)
+{
+ return native_pmdp_get_and_clear(pmdp);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t pudp_huge_get_and_clear(struct mm_struct *mm,
+     unsigned long addr, pud_t *pudp)
+{
+ return native_pudp_get_and_clear(pudp);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pmdp_set_wrprotect(struct mm_struct *mm,
+          unsigned long addr, pmd_t *pmdp)
+{
+ clear_bit(1, (unsigned long *)pmdp);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_write(pud_t pud)
+{
+ return pud_flags(pud) & (((pteval_t)(1)) << 1);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmdp_establish(struct vm_area_struct *vma,
+  unsigned long address, pmd_t *pmdp, pmd_t pmd)
+{
+ if (0) {
+  return ({ typeof(pmdp) __ai_ptr = (pmdp); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__ (*((__ai_ptr))) __ret = ((pmd)); switch (sizeof(*((__ai_ptr)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }); });
+ } else {
+  pmd_t old = *pmdp;
+  do { do { extern void __compiletime_assert_245(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pmdp) == sizeof(char) || sizeof(*pmdp) == sizeof(short) || sizeof(*pmdp) == sizeof(int) || sizeof(*pmdp) == sizeof(long)) || sizeof(*pmdp) == sizeof(long long))) __compiletime_assert_245(); } while (0); do { *(volatile typeof(*pmdp) *)&(*pmdp) = (pmd); } while (0); } while (0);
+  return old;
+ }
+}
+# 1185 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pgdp_maps_userspace(void *__ptr)
+{
+ unsigned long ptr = (unsigned long)__ptr;
+
+ return (((ptr & ~(~(((1UL) << 12)-1))) / sizeof(pgd_t)) < ((((1UL) << 12) / 2) / sizeof(pgd_t)));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_large(pgd_t pgd) { return 0; }
+# 1208 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *ptr_set_bit(void *ptr, int bit)
+{
+ unsigned long __ptr = (unsigned long)ptr;
+
+ __ptr |= ((((1UL))) << (bit));
+ return (void *)__ptr;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *ptr_clear_bit(void *ptr, int bit)
+{
+ unsigned long __ptr = (unsigned long)ptr;
+
+ __ptr &= ~((((1UL))) << (bit));
+ return (void *)__ptr;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgd_t *kernel_to_user_pgdp(pgd_t *pgdp)
+{
+ return ptr_set_bit(pgdp, 12);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgd_t *user_to_kernel_pgdp(pgd_t *pgdp)
+{
+ return ptr_clear_bit(pgdp, 12);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4d_t *kernel_to_user_p4dp(p4d_t *p4dp)
+{
+ return ptr_set_bit(p4dp, 12);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) p4d_t *user_to_kernel_p4dp(p4d_t *p4dp)
+{
+ return ptr_clear_bit(p4dp, 12);
+}
+# 1254 "./arch/x86/include/asm/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void clone_pgd_range(pgd_t *dst, pgd_t *src, int count)
+{
+ memcpy(dst, src, count * sizeof(pgd_t));
+
+ if (!( __builtin_constant_p((__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(19) && (1UL<<((( 7*32+11))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 7*32+11), (unsigned long *)((&boot_cpu_data)->x86_capability)))) ? (__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(19) && (1UL<<((( 7*32+11))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit(( 7*32+11), (unsigned long *)((&boot_cpu_data)->x86_capability))) : _static_cpu_has(( 7*32+11)) ))
+  return;
+
+ memcpy(kernel_to_user_pgdp(dst), kernel_to_user_pgdp(src),
+        count * sizeof(pgd_t));
+
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int page_level_shift(enum pg_level level)
+{
+ return (12 - ( __builtin_constant_p(512) ? ((512) < 2 ? 0 : 63 - __builtin_clzll(512)) : (sizeof(512) <= 4) ? __ilog2_u32(512) : __ilog2_u64(512) )) + level * ( __builtin_constant_p(512) ? ((512) < 2 ? 0 : 63 - __builtin_clzll(512)) : (sizeof(512) <= 4) ? __ilog2_u32(512) : __ilog2_u64(512) );
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long page_level_size(enum pg_level level)
+{
+ return 1UL << page_level_shift(level);
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long page_level_mask(enum pg_level level)
+{
+ return ~(page_level_size(level) - 1);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_mmu_cache(struct vm_area_struct *vma,
+  unsigned long addr, pte_t *ptep)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_mmu_cache_pmd(struct vm_area_struct *vma,
+  unsigned long addr, pmd_t *pmd)
+{
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_mmu_cache_pud(struct vm_area_struct *vma,
+  unsigned long addr, pud_t *pud)
+{
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_swp_mksoft_dirty(pte_t pte)
+{
+ return pte_set_flags(pte, (((pteval_t)(0))));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_swp_soft_dirty(pte_t pte)
+{
+ return pte_flags(pte) & (((pteval_t)(0)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t pte_swp_clear_soft_dirty(pte_t pte)
+{
+ return pte_clear_flags(pte, (((pteval_t)(0))));
+}
+# 1368 "./arch/x86/include/asm/pgtable.h"
+extern u32 init_pkru_value;
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __pkru_allows_read(u32 pkru, u16 pkey)
+{
+ int pkru_pkey_bits = pkey * 2;
+ return !(pkru & (0x1 << pkru_pkey_bits));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __pkru_allows_write(u32 pkru, u16 pkey)
+{
+ int pkru_pkey_bits = pkey * 2;
+
+
+
+
+ return !(pkru & ((0x1|0x2) << pkru_pkey_bits));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) u16 pte_flags_pkey(unsigned long pte_flags)
+{
+
+
+ return (pte_flags & ((((pteval_t)(1)) << 59) | (((pteval_t)(1)) << 60) | (((pteval_t)(1)) << 61) | (((pteval_t)(1)) << 62))) >> 59;
+
+
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __pkru_allows_pkey(u16 pkey, bool write)
+{
+ u32 pkru = read_pkru();
+
+ if (!__pkru_allows_read(pkru, pkey))
+  return false;
+ if (write && !__pkru_allows_write(pkru, pkey))
+  return false;
+
+ return true;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool __pte_access_permitted(unsigned long pteval, bool write)
+{
+ unsigned long need_pte_bits = (((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 2);
+
+ if (write)
+  need_pte_bits |= (((pteval_t)(1)) << 1);
+
+ if ((pteval & need_pte_bits) != need_pte_bits)
+  return 0;
+
+ return __pkru_allows_pkey(pte_flags_pkey(pteval), write);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pte_access_permitted(pte_t pte, bool write)
+{
+ return __pte_access_permitted(native_pte_val(pte), write);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pmd_access_permitted(pmd_t pmd, bool write)
+{
+ return __pte_access_permitted(native_pmd_val(pmd), write);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool pud_access_permitted(pud_t pud, bool write)
+{
+ return __pte_access_permitted(native_pud_val(pud), write);
+}
+
+
+extern bool pfn_modify_allowed(unsigned long pfn, pgprot_t prot);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_has_pfn_modify_check(void)
+{
+ return (__builtin_constant_p((((20*32 + (18))))) && ( ((((((20*32 + (18)))))>>5)==(0) && (1UL<<(((((20*32 + (18)))))&31) & ((1<<(( 0*32+ 0) & 31))|(1<<(( 0*32+ 3)) & 31)|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|(1<<(( 0*32+13)) & 31)|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((20*32 + (18)))))>>5)==(1) && (1UL<<(((((20*32 + (18)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((20*32 + (18)))))>>5)==(2) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(3) && (1UL<<(((((20*32 + (18)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((20*32 + (18)))))>>5)==(4) && (1UL<<(((((20*32 + (18)))))&31) & (0) )) || ((((((20*32 + (18)))))>>5)==(5) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(6) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(7) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(8) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(9) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(10) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(11) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(12) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(13) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(14) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(15) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(16) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(17) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(18) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((((((20*32 + (18)))))>>5)==(19) && (1UL<<(((((20*32 + (18)))))&31) & 0 )) || ((int)(sizeof(struct { int:(-!!(20 != 20)); }))) || ((int)(sizeof(struct { int:(-!!(20 != 20)); })))) ? 1 : test_bit((((20*32 + (18)))), (unsigned long *)((&boot_cpu_data)->x86_capability)));
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_faults_on_old_pte(void)
+{
+ return false;
+}
+# 7 "./include/linux/pgtable.h" 2
+# 43 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pte_index(unsigned long address)
+{
+ return (address >> 12) & (512 - 1);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pmd_index(unsigned long address)
+{
+ return (address >> 21) & (512 - 1);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long pud_index(unsigned long address)
+{
+ return (address >> 30) & (512 - 1);
+}
+# 70 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t *pte_offset_kernel(pmd_t *pmd, unsigned long address)
+{
+ return (pte_t *)pmd_page_vaddr(*pmd) + pte_index(address);
+}
+# 89 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t *pmd_offset(pud_t *pud, unsigned long address)
+{
+ return (pmd_t *)pud_page_vaddr(*pud) + pmd_index(address);
+}
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pud_t *pud_offset(p4d_t *p4d, unsigned long address)
+{
+ return (pud_t *)p4d_page_vaddr(*p4d) + pud_index(address);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pgd_t *pgd_offset_pgd(pgd_t *pgd, unsigned long address)
+{
+ return (pgd + (((address) >> pgdir_shift) & (512 - 1)));
+};
+# 131 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t *pmd_off(struct mm_struct *mm, unsigned long va)
+{
+ return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((mm)->pgd, (va)), va), va), va);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t *pmd_off_k(unsigned long va)
+{
+ return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((&init_mm)->pgd, ((va))), va), va), va);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t *virt_to_kpte(unsigned long vaddr)
+{
+ pmd_t *pmd = pmd_off_k(vaddr);
+
+ return pmd_none(*pmd) ? ((void *)0) : pte_offset_kernel(pmd, vaddr);
+}
+# 255 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t ptep_get(pte_t *ptep)
+{
+ return ({ do { extern void __compiletime_assert_246(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_246(); } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });
+}
+# 310 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t ptep_get_lockless(pte_t *ptep)
+{
+ return ptep_get(ptep);
+}
+# 381 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void update_mmu_tlb(struct vm_area_struct *vma,
+    unsigned long address, pte_t *ptep)
+{
+}
+# 394 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pte_clear_not_present_full(struct mm_struct *mm,
+           unsigned long address,
+           pte_t *ptep,
+           int full)
+{
+ native_pte_clear(mm, address, ptep);
+}
+
+
+
+extern pte_t ptep_clear_flush(struct vm_area_struct *vma,
+         unsigned long address,
+         pte_t *ptep);
+
+
+
+extern pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,
+         unsigned long address,
+         pmd_t *pmdp);
+extern pud_t pudp_huge_clear_flush(struct vm_area_struct *vma,
+         unsigned long address,
+         pud_t *pudp);
+# 477 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void pudp_set_wrprotect(struct mm_struct *mm,
+          unsigned long address, pud_t *pudp)
+{
+ pud_t old_pud = *pudp;
+
+ set_pud_at(mm, address, pudp, pud_wrprotect(old_pud));
+}
+# 498 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,
+     unsigned long address,
+     pmd_t *pmdp)
+{
+ do { extern void __compiletime_assert_247(void) __attribute__((__error__("BUILD_BUG failed"))); if (!(!(1))) __compiletime_assert_247(); } while (0);
+ return *pmdp;
+}
+
+
+
+
+
+extern void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
+           pgtable_t pgtable);
+
+
+
+extern pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);
+# 534 "./include/linux/pgtable.h"
+extern pmd_t pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
+       pmd_t *pmdp);
+# 552 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_unused(pte_t pte)
+{
+ return 0;
+}
+# 584 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_same(pmd_t pmd_a, pmd_t pmd_b)
+{
+ return native_pmd_val(pmd_a) == native_pmd_val(pmd_b);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_same(pud_t pud_a, pud_t pud_b)
+{
+ return native_pud_val(pud_a) == native_pud_val(pud_b);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_same(p4d_t p4d_a, p4d_t p4d_b)
+{
+ return native_p4d_val(p4d_a) == native_p4d_val(p4d_b);
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_same(pgd_t pgd_a, pgd_t pgd_b)
+{
+ return native_pgd_val(pgd_a) == native_pgd_val(pgd_b);
+}
+# 656 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_do_swap_page(struct mm_struct *mm,
+         struct vm_area_struct *vma,
+         unsigned long addr,
+         pte_t pte, pte_t oldpte)
+{
+
+}
+# 674 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_unmap_one(struct mm_struct *mm,
+      struct vm_area_struct *vma,
+      unsigned long addr,
+      pte_t orig_pte)
+{
+ return 0;
+}
+# 689 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_prepare_to_swap(struct page *page)
+{
+ return 0;
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_swap_invalidate_page(int type, unsigned long offset)
+{
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_swap_invalidate_area(int type)
+{
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void arch_swap_restore(swp_entry_t entry, struct page *page)
+{
+}
+# 764 "./include/linux/pgtable.h"
+void pgd_clear_bad(pgd_t *);
+
+
+void p4d_clear_bad(p4d_t *);
+
+
+
+
+
+void pud_clear_bad(pud_t *);
+
+
+
+
+void pmd_clear_bad(pmd_t *);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_none_or_clear_bad(pgd_t *pgd)
+{
+ if (pgd_none(*pgd))
+  return 1;
+ if (__builtin_expect(!!(pgd_bad(*pgd)), 0)) {
+  pgd_clear_bad(pgd);
+  return 1;
+ }
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int p4d_none_or_clear_bad(p4d_t *p4d)
+{
+ if (p4d_none(*p4d))
+  return 1;
+ if (__builtin_expect(!!(p4d_bad(*p4d)), 0)) {
+  p4d_clear_bad(p4d);
+  return 1;
+ }
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_none_or_clear_bad(pud_t *pud)
+{
+ if (pud_none(*pud))
+  return 1;
+ if (__builtin_expect(!!(pud_bad(*pud)), 0)) {
+  pud_clear_bad(pud);
+  return 1;
+ }
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_none_or_clear_bad(pmd_t *pmd)
+{
+ if (pmd_none(*pmd))
+  return 1;
+ if (__builtin_expect(!!(pmd_bad(*pmd)), 0)) {
+  pmd_clear_bad(pmd);
+  return 1;
+ }
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t __ptep_modify_prot_start(struct vm_area_struct *vma,
+          unsigned long addr,
+          pte_t *ptep)
+{
+
+
+
+
+
+ return ptep_get_and_clear(vma->vm_mm, addr, ptep);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __ptep_modify_prot_commit(struct vm_area_struct *vma,
+          unsigned long addr,
+          pte_t *ptep, pte_t pte)
+{
+
+
+
+
+ set_pte_at(vma->vm_mm, addr, ptep, pte);
+}
+# 862 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pte_t ptep_modify_prot_start(struct vm_area_struct *vma,
+        unsigned long addr,
+        pte_t *ptep)
+{
+ return __ptep_modify_prot_start(vma, addr, ptep);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ptep_modify_prot_commit(struct vm_area_struct *vma,
+        unsigned long addr,
+        pte_t *ptep, pte_t old_pte, pte_t pte)
+{
+ __ptep_modify_prot_commit(vma, addr, ptep, pte);
+}
+# 973 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_swp_mksoft_dirty(pmd_t pmd)
+{
+ return pmd;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_swp_soft_dirty(pmd_t pmd)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_swp_clear_soft_dirty(pmd_t pmd)
+{
+ return pmd;
+}
+# 1103 "./include/linux/pgtable.h"
+extern int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
+      unsigned long pfn, unsigned long addr,
+      unsigned long size);
+extern void track_pfn_insert(struct vm_area_struct *vma, pgprot_t *prot,
+        pfn_t pfn);
+extern int track_pfn_copy(struct vm_area_struct *vma);
+extern void untrack_pfn(struct vm_area_struct *vma, unsigned long pfn,
+   unsigned long size);
+extern void untrack_pfn_moved(struct vm_area_struct *vma);
+# 1125 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int is_zero_pfn(unsigned long pfn)
+{
+ extern unsigned long zero_pfn;
+ return pfn == zero_pfn;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long my_zero_pfn(unsigned long addr)
+{
+ extern unsigned long zero_pfn;
+ return zero_pfn;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_trans_huge(pmd_t pmd)
+{
+ return 0;
+}
+# 1163 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_devmap(pmd_t pmd)
+{
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_devmap(pud_t pud)
+{
+ return 0;
+}
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pgd_devmap(pgd_t pgd)
+{
+ return 0;
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_trans_huge(pud_t pud)
+{
+ return 0;
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_none_or_trans_huge_or_dev_or_clear_bad(pud_t *pud)
+{
+ pud_t pudval = ({ do { extern void __compiletime_assert_248(void) __attribute__((__error__("Unsupported access size for {READ,WRITE}_ONCE()."))); if (!((sizeof(*pud) == sizeof(char) || sizeof(*pud) == sizeof(short) || sizeof(*pud) == sizeof(int) || sizeof(*pud) == sizeof(long)) || sizeof(*pud) == sizeof(long long))) __compiletime_assert_248(); } while (0); (*(const volatile typeof( _Generic((*pud), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*pud))) *)&(*pud)); });
+
+ if (pud_none(pudval) || pud_trans_huge(pudval) || pud_devmap(pudval))
+  return 1;
+ if (__builtin_expect(!!(pud_bad(pudval)), 0)) {
+  pud_clear_bad(pud);
+  return 1;
+ }
+ return 0;
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pud_trans_unstable(pud_t *pud)
+{
+
+
+
+
+ return 0;
+
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) pmd_t pmd_read_atomic(pmd_t *pmdp)
+{
+
+
+
+
+
+ return *pmdp;
+}
+# 1247 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
+{
+ pmd_t pmdval = pmd_read_atomic(pmd);
+# 1282 "./include/linux/pgtable.h"
+ if (pmd_none(pmdval) || pmd_trans_huge(pmdval) ||
+  (0 && !pmd_present(pmdval)))
+  return 1;
+ if (__builtin_expect(!!(pmd_bad(pmdval)), 0)) {
+  pmd_clear_bad(pmd);
+  return 1;
+ }
+ return 0;
+}
+# 1304 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_trans_unstable(pmd_t *pmd)
+{
+
+
+
+ return 0;
+
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_devmap_trans_unstable(pmd_t *pmd)
+{
+ return pmd_devmap(*pmd) || pmd_trans_unstable(pmd);
+}
+# 1333 "./include/linux/pgtable.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pte_protnone(pte_t pte)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int pmd_protnone(pmd_t pmd)
+{
+ return 0;
+}
+
+
+
+
+
+
+
+int p4d_set_huge(p4d_t *p4d, phys_addr_t addr, pgprot_t prot);
+int p4d_clear_huge(p4d_t *p4d);
+# 1362 "./include/linux/pgtable.h"
+int pud_set_huge(pud_t *pud, phys_addr_t addr, pgprot_t prot);
+int pmd_set_huge(pmd_t *pmd, phys_addr_t addr, pgprot_t prot);
+int pud_clear_huge(pud_t *pud);
+int pmd_clear_huge(pmd_t *pmd);
+int p4d_free_pud_page(p4d_t *p4d, unsigned long addr);
+int pud_free_pmd_page(pud_t *pud, unsigned long addr);
+int pmd_free_pte_page(pmd_t *pmd, unsigned long addr);
+# 1427 "./include/linux/pgtable.h"
+struct file;
+int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
+   unsigned long size, pgprot_t *vma_prot);
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_espfix_bsp(void) { }
+
+
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pgtable_cache_init(void);
+# 1488 "./include/linux/pgtable.h"
+typedef unsigned int pgtbl_mod_mask;
+# 29 "./include/linux/kasan.h" 2
+# 42 "./include/linux/kasan.h"
+extern unsigned char kasan_early_shadow_page[((1UL) << 12)];
+extern pte_t kasan_early_shadow_pte[512 + 0];
+extern pmd_t kasan_early_shadow_pmd[512];
+extern pud_t kasan_early_shadow_pud[512];
+extern p4d_t kasan_early_shadow_p4d[512];
+
+int kasan_populate_early_shadow(const void *shadow_start,
+    const void *shadow_end);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kasan_mem_to_shadow(const void *addr)
+{
+ return (void *)((unsigned long)addr >> 3)
+  + (0xdffffc0000000000UL);
+}
+
+int kasan_add_zero_shadow(void *start, unsigned long size);
+void kasan_remove_zero_shadow(void *start, unsigned long size);
+
+
+extern void kasan_enable_current(void);
+
+
+extern void kasan_disable_current(void);
+# 83 "./include/linux/kasan.h"
+struct kasan_cache {
+ int alloc_meta_offset;
+ int free_meta_offset;
+ bool is_kmalloc;
+};
+# 100 "./include/linux/kasan.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool kasan_enabled(void)
+{
+ return true;
+}
+
+
+
+slab_flags_t __kasan_never_merge(void);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) slab_flags_t kasan_never_merge(void)
+{
+ if (kasan_enabled())
+  return __kasan_never_merge();
+ return 0;
+}
+
+void __kasan_unpoison_range(const void *addr, size_t size);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_unpoison_range(const void *addr, size_t size)
+{
+ if (kasan_enabled())
+  __kasan_unpoison_range(addr, size);
+}
+
+void __kasan_alloc_pages(struct page *page, unsigned int order);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_alloc_pages(struct page *page,
+      unsigned int order)
+{
+ if (kasan_enabled())
+  __kasan_alloc_pages(page, order);
+}
+
+void __kasan_free_pages(struct page *page, unsigned int order);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_free_pages(struct page *page,
+      unsigned int order)
+{
+ if (kasan_enabled())
+  __kasan_free_pages(page, order);
+}
+
+void __kasan_cache_create(struct kmem_cache *cache, unsigned int *size,
+    slab_flags_t *flags);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_cache_create(struct kmem_cache *cache,
+    unsigned int *size, slab_flags_t *flags)
+{
+ if (kasan_enabled())
+  __kasan_cache_create(cache, size, flags);
+}
+
+void __kasan_cache_create_kmalloc(struct kmem_cache *cache);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_cache_create_kmalloc(struct kmem_cache *cache)
+{
+ if (kasan_enabled())
+  __kasan_cache_create_kmalloc(cache);
+}
+
+size_t __kasan_metadata_size(struct kmem_cache *cache);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) size_t kasan_metadata_size(struct kmem_cache *cache)
+{
+ if (kasan_enabled())
+  return __kasan_metadata_size(cache);
+ return 0;
+}
+
+void __kasan_poison_slab(struct page *page);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_poison_slab(struct page *page)
+{
+ if (kasan_enabled())
+  __kasan_poison_slab(page);
+}
+
+void __kasan_unpoison_object_data(struct kmem_cache *cache, void *object);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_unpoison_object_data(struct kmem_cache *cache,
+       void *object)
+{
+ if (kasan_enabled())
+  __kasan_unpoison_object_data(cache, object);
+}
+
+void __kasan_poison_object_data(struct kmem_cache *cache, void *object);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_poison_object_data(struct kmem_cache *cache,
+       void *object)
+{
+ if (kasan_enabled())
+  __kasan_poison_object_data(cache, object);
+}
+
+void * __attribute__((__warn_unused_result__)) __kasan_init_slab_obj(struct kmem_cache *cache,
+       const void *object);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void * __attribute__((__warn_unused_result__)) kasan_init_slab_obj(
+    struct kmem_cache *cache, const void *object)
+{
+ if (kasan_enabled())
+  return __kasan_init_slab_obj(cache, object);
+ return (void *)object;
+}
+
+bool __kasan_slab_free(struct kmem_cache *s, void *object, unsigned long ip);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool kasan_slab_free(struct kmem_cache *s, void *object)
+{
+ if (kasan_enabled())
+  return __kasan_slab_free(s, object, (unsigned long)__builtin_return_address(0));
+ return false;
+}
+
+void __kasan_kfree_large(void *ptr, unsigned long ip);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_kfree_large(void *ptr)
+{
+ if (kasan_enabled())
+  __kasan_kfree_large(ptr, (unsigned long)__builtin_return_address(0));
+}
+
+void __kasan_slab_free_mempool(void *ptr, unsigned long ip);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kasan_slab_free_mempool(void *ptr)
+{
+ if (kasan_enabled())
+  __kasan_slab_free_mempool(ptr, (unsigned long)__builtin_return_address(0));
+}
+
+void * __attribute__((__warn_unused_result__)) __kasan_slab_alloc(struct kmem_cache *s,
+           void *object, gfp_t flags);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void * __attribute__((__warn_unused_result__)) kasan_slab_alloc(
+    struct kmem_cache *s, void *object, gfp_t flags)
+{
+ if (kasan_enabled())
+  return __kasan_slab_alloc(s, object, flags);
+ return object;
+}
+
+void * __attribute__((__warn_unused_result__)) __kasan_kmalloc(struct kmem_cache *s, const void *object,
+        size_t size, gfp_t flags);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void * __attribute__((__warn_unused_result__)) kasan_kmalloc(struct kmem_cache *s,
+    const void *object, size_t size, gfp_t flags)
+{
+ if (kasan_enabled())
+  return __kasan_kmalloc(s, object, size, flags);
+ return (void *)object;
+}
+
+void * __attribute__((__warn_unused_result__)) __kasan_kmalloc_large(const void *ptr,
+       size_t size, gfp_t flags);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void * __attribute__((__warn_unused_result__)) kasan_kmalloc_large(const void *ptr,
+            size_t size, gfp_t flags)
+{
+ if (kasan_enabled())
+  return __kasan_kmalloc_large(ptr, size, flags);
+ return (void *)ptr;
+}
+
+void * __attribute__((__warn_unused_result__)) __kasan_krealloc(const void *object,
+         size_t new_size, gfp_t flags);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void * __attribute__((__warn_unused_result__)) kasan_krealloc(const void *object,
+       size_t new_size, gfp_t flags)
+{
+ if (kasan_enabled())
+  return __kasan_krealloc(object, new_size, flags);
+ return (void *)object;
+}
+
+
+
+
+
+bool __kasan_check_byte(const void *addr, unsigned long ip);
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) bool kasan_check_byte(const void *addr)
+{
+ if (kasan_enabled())
+  return __kasan_check_byte(addr, (unsigned long)__builtin_return_address(0));
+ return true;
+}
+
+
+bool kasan_save_enable_multi_shot(void);
+void kasan_restore_multi_shot(bool enabled);
+# 334 "./include/linux/kasan.h"
+void kasan_unpoison_task_stack(struct task_struct *task);
+
+
+
+
+
+
+void kasan_cache_shrink(struct kmem_cache *cache);
+void kasan_cache_shutdown(struct kmem_cache *cache);
+void kasan_record_aux_stack(void *ptr);
+# 372 "./include/linux/kasan.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kasan_reset_tag(const void *addr)
+{
+ return (void *)addr;
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_init_sw_tags(void) { }
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_init_hw_tags_cpu(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_init_hw_tags(void) { }
+# 404 "./include/linux/kasan.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int kasan_populate_vmalloc(unsigned long start,
+     unsigned long size)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_poison_vmalloc(const void *start, unsigned long size)
+{ }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_unpoison_vmalloc(const void *start, unsigned long size)
+{ }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kasan_release_vmalloc(unsigned long start,
+      unsigned long end,
+      unsigned long free_region_start,
+      unsigned long free_region_end) {}
+# 429 "./include/linux/kasan.h"
+int kasan_module_alloc(void *addr, size_t size);
+void kasan_free_shadow(const struct vm_struct *vm);
+# 440 "./include/linux/kasan.h"
+void kasan_non_canonical_hook(unsigned long addr);
+# 137 "./include/linux/slab.h" 2
+
+struct mem_cgroup;
+
+
+
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) kmem_cache_init(void);
+bool slab_is_available(void);
+
+extern bool usercopy_fallback;
+
+struct kmem_cache *kmem_cache_create(const char *name, unsigned int size,
+   unsigned int align, slab_flags_t flags,
+   void (*ctor)(void *));
+struct kmem_cache *kmem_cache_create_usercopy(const char *name,
+   unsigned int size, unsigned int align,
+   slab_flags_t flags,
+   unsigned int useroffset, unsigned int usersize,
+   void (*ctor)(void *));
+void kmem_cache_destroy(struct kmem_cache *);
+int kmem_cache_shrink(struct kmem_cache *);
+# 184 "./include/linux/slab.h"
+void * __attribute__((__warn_unused_result__)) krealloc(const void *, size_t, gfp_t);
+void kfree(const void *);
+void kfree_sensitive(const void *);
+size_t __ksize(const void *);
+size_t ksize(const void *);
+bool kmem_valid_obj(void *object);
+void kmem_dump_obj(void *object);
+
+
+void __check_heap_object(const void *ptr, unsigned long n, struct page *page,
+   bool to_user);
+# 307 "./include/linux/slab.h"
+enum kmalloc_cache_type {
+ KMALLOC_NORMAL = 0,
+ KMALLOC_RECLAIM,
+
+
+
+ NR_KMALLOC_TYPES
+};
+
+
+extern struct kmem_cache *
+kmalloc_caches[NR_KMALLOC_TYPES][(12 + 1) + 1];
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) enum kmalloc_cache_type kmalloc_type(gfp_t flags)
+{
+# 336 "./include/linux/slab.h"
+ return flags & (( gfp_t)0x10u) ? KMALLOC_RECLAIM : KMALLOC_NORMAL;
+
+}
+# 348 "./include/linux/slab.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) unsigned int kmalloc_index(size_t size)
+{
+ if (!size)
+  return 0;
+
+ if (size <= (1 << 3))
+  return 3;
+
+ if ((1 << 3) <= 32 && size > 64 && size <= 96)
+  return 1;
+ if ((1 << 3) <= 64 && size > 128 && size <= 192)
+  return 2;
+ if (size <= 8) return 3;
+ if (size <= 16) return 4;
+ if (size <= 32) return 5;
+ if (size <= 64) return 6;
+ if (size <= 128) return 7;
+ if (size <= 256) return 8;
+ if (size <= 512) return 9;
+ if (size <= 1024) return 10;
+ if (size <= 2 * 1024) return 11;
+ if (size <= 4 * 1024) return 12;
+ if (size <= 8 * 1024) return 13;
+ if (size <= 16 * 1024) return 14;
+ if (size <= 32 * 1024) return 15;
+ if (size <= 64 * 1024) return 16;
+ if (size <= 128 * 1024) return 17;
+ if (size <= 256 * 1024) return 18;
+ if (size <= 512 * 1024) return 19;
+ if (size <= 1024 * 1024) return 20;
+ if (size <= 2 * 1024 * 1024) return 21;
+ if (size <= 4 * 1024 * 1024) return 22;
+ if (size <= 8 * 1024 * 1024) return 23;
+ if (size <= 16 * 1024 * 1024) return 24;
+ if (size <= 32 * 1024 * 1024) return 25;
+ if (size <= 64 * 1024 * 1024) return 26;
+ do { do { } while(0); do { asm __inline volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/slab.h"), "i" (384), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ({ asm volatile("%c0:\n\t" ".pushsection .discard.unreachable\n\t" ".long %c0b - .\n\t" ".popsection\n\t" : : "i" (249)); }); asm volatile(""); __builtin_unreachable(); } while (0); } while (0);
+
+
+ return -1;
+}
+
+
+void *__kmalloc(size_t size, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
+void *kmem_cache_alloc(struct kmem_cache *, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
+void kmem_cache_free(struct kmem_cache *, void *);
+# 402 "./include/linux/slab.h"
+void kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
+int kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void kfree_bulk(size_t size, void **p)
+{
+ kmem_cache_free_bulk(((void *)0), size, p);
+}
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void *__kmalloc_node(size_t size, gfp_t flags, int node)
+{
+ return __kmalloc(size, flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t flags, int node)
+{
+ return kmem_cache_alloc(s, flags);
+}
+
+
+
+extern void *kmem_cache_alloc_trace(struct kmem_cache *, gfp_t, size_t) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void *
+kmem_cache_alloc_node_trace(struct kmem_cache *s,
+         gfp_t gfpflags,
+         int node, size_t size)
+{
+ return kmem_cache_alloc_trace(s, gfpflags, size);
+}
+# 468 "./include/linux/slab.h"
+extern void *kmalloc_order(size_t size, gfp_t flags, unsigned int order) __attribute__((__assume_aligned__(((1UL) << 12)))) __attribute__((__malloc__));
+
+
+extern void *kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order) __attribute__((__assume_aligned__(((1UL) << 12)))) __attribute__((__malloc__));
+# 480 "./include/linux/slab.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void *kmalloc_large(size_t size, gfp_t flags)
+{
+ unsigned int order = get_order(size);
+ return kmalloc_order_trace(size, flags, order);
+}
+# 540 "./include/linux/slab.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void *kmalloc(size_t size, gfp_t flags)
+{
+ if (__builtin_constant_p(size)) {
+
+  unsigned int index;
+
+  if (size > (1UL << (12 + 1)))
+   return kmalloc_large(size, flags);
+
+  index = kmalloc_index(size);
+
+  if (!index)
+   return ((void *)16);
+
+  return kmem_cache_alloc_trace(
+    kmalloc_caches[kmalloc_type(flags)][index],
+    flags, size);
+
+ }
+ return __kmalloc(size, flags);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void *kmalloc_node(size_t size, gfp_t flags, int node)
+{
+
+ if (__builtin_constant_p(size) &&
+  size <= (1UL << (12 + 1))) {
+  unsigned int i = kmalloc_index(size);
+
+  if (!i)
+   return ((void *)16);
+
+  return kmem_cache_alloc_node_trace(
+    kmalloc_caches[kmalloc_type(flags)][i],
+      flags, node, size);
+ }
+
+ return __kmalloc_node(size, flags, node);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmalloc_array(size_t n, size_t size, gfp_t flags)
+{
+ size_t bytes;
+
+ if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
+  return ((void *)0);
+ if (__builtin_constant_p(n) && __builtin_constant_p(size))
+  return kmalloc(bytes, flags);
+ return __kmalloc(bytes, flags);
+}
+# 604 "./include/linux/slab.h"
+static __attribute__((__warn_unused_result__)) inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *
+krealloc_array(void *p, size_t new_n, size_t new_size, gfp_t flags)
+{
+ size_t bytes;
+
+ if (__builtin_expect(!!(__must_check_overflow(({ typeof(new_n) __a = (new_n); typeof(new_size) __b = (new_size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
+  return ((void *)0);
+
+ return krealloc(p, bytes, flags);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kcalloc(size_t n, size_t size, gfp_t flags)
+{
+ return kmalloc_array(n, size, flags | (( gfp_t)0x100u));
+}
+# 634 "./include/linux/slab.h"
+extern void *__kmalloc_track_caller(size_t, gfp_t, unsigned long);
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmalloc_array_node(size_t n, size_t size, gfp_t flags,
+           int node)
+{
+ size_t bytes;
+
+ if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
+  return ((void *)0);
+ if (__builtin_constant_p(n) && __builtin_constant_p(size))
+  return kmalloc_node(bytes, flags, node);
+ return __kmalloc_node(bytes, flags, node);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kcalloc_node(size_t n, size_t size, gfp_t flags, int node)
+{
+ return kmalloc_array_node(n, size, flags | (( gfp_t)0x100u), node);
+}
+# 672 "./include/linux/slab.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
+{
+ return kmem_cache_alloc(k, flags | (( gfp_t)0x100u));
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kzalloc(size_t size, gfp_t flags)
+{
+ return kmalloc(size, flags | (( gfp_t)0x100u));
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *kzalloc_node(size_t size, gfp_t flags, int node)
+{
+ return kmalloc_node(size, flags | (( gfp_t)0x100u), node);
+}
+
+unsigned int kmem_cache_size(struct kmem_cache *s);
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) kmem_cache_init_late(void);
+# 8 "./rust/kernel/bindings_helper.h" 2
+
+
+# 1 "./include/generated/uapi/linux/version.h" 1
+# 11 "./rust/kernel/bindings_helper.h" 2
+# 1 "./include/linux/miscdevice.h" 1
+
+
+
+# 1 "./include/uapi/linux/major.h" 1
+# 5 "./include/linux/miscdevice.h" 2
+# 76 "./include/linux/miscdevice.h"
+struct device;
+struct attribute_group;
+
+struct miscdevice {
+ int minor;
+ const char *name;
+ const struct file_operations *fops;
+ struct list_head list;
+ struct device *parent;
+ struct device *this_device;
+ const struct attribute_group **groups;
+ const char *nodename;
+ umode_t mode;
+};
+
+extern int misc_register(struct miscdevice *misc);
+extern void misc_deregister(struct miscdevice *misc);
+# 12 "./rust/kernel/bindings_helper.h" 2
+# 1 "./include/linux/poll.h" 1
+# 13 "./include/linux/poll.h"
+# 1 "./include/uapi/linux/poll.h" 1
+# 1 "./arch/x86/include/generated/uapi/asm/poll.h" 1
+# 1 "./include/uapi/asm-generic/poll.h" 1
+# 36 "./include/uapi/asm-generic/poll.h"
+struct pollfd {
+ int fd;
+ short events;
+ short revents;
+};
+# 2 "./arch/x86/include/generated/uapi/asm/poll.h" 2
+# 2 "./include/uapi/linux/poll.h" 2
+# 14 "./include/linux/poll.h" 2
+# 1 "./include/uapi/linux/eventpoll.h" 1
+# 77 "./include/uapi/linux/eventpoll.h"
+struct epoll_event {
+ __poll_t events;
+ __u64 data;
+} __attribute__((packed));
+# 89 "./include/uapi/linux/eventpoll.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ep_take_care_of_epollwakeup(struct epoll_event *epev)
+{
+ epev->events &= ~(( __poll_t)(1U << 29));
+}
+# 15 "./include/linux/poll.h" 2
+
+extern struct ctl_table epoll_table[];
+# 32 "./include/linux/poll.h"
+struct poll_table_struct;
+
+
+
+
+typedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *);
+
+
+
+
+
+typedef struct poll_table_struct {
+ poll_queue_proc _qproc;
+ __poll_t _key;
+} poll_table;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)
+{
+ if (p && p->_qproc && wait_address)
+  p->_qproc(filp, wait_address, p);
+}
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool poll_does_not_wait(const poll_table *p)
+{
+ return p == ((void *)0) || p->_qproc == ((void *)0);
+}
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __poll_t poll_requested_events(const poll_table *p)
+{
+ return p ? p->_key : ~(__poll_t)0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void init_poll_funcptr(poll_table *pt, poll_queue_proc qproc)
+{
+ pt->_qproc = qproc;
+ pt->_key = ~(__poll_t)0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool file_can_poll(struct file *file)
+{
+ return file->f_op->poll;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __poll_t vfs_poll(struct file *file, struct poll_table_struct *pt)
+{
+ if (__builtin_expect(!!(!file->f_op->poll), 0))
+  return (( __poll_t)0x00000001 | ( __poll_t)0x00000004 | ( __poll_t)0x00000040 | ( __poll_t)0x00000100);
+ return file->f_op->poll(file, pt);
+}
+
+struct poll_table_entry {
+ struct file *filp;
+ __poll_t key;
+ wait_queue_entry_t wait;
+ wait_queue_head_t *wait_address;
+};
+
+
+
+
+struct poll_wqueues {
+ poll_table pt;
+ struct poll_table_page *table;
+ struct task_struct *polling_task;
+ int triggered;
+ int error;
+ int inline_index;
+ struct poll_table_entry inline_entries[((832 - 256) / sizeof(struct poll_table_entry))];
+};
+
+extern void poll_initwait(struct poll_wqueues *pwq);
+extern void poll_freewait(struct poll_wqueues *pwq);
+extern u64 select_estimate_accuracy(struct timespec64 *tv);
+
+
+
+extern int core_sys_select(int n, fd_set *inp, fd_set *outp,
+      fd_set *exp, struct timespec64 *end_time);
+
+extern int poll_select_set_timeout(struct timespec64 *to, time64_t sec,
+       long nsec);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __u16 mangle_poll(__poll_t val)
+{
+ __u16 v = ( __u16)val;
+
+ return (( __u16)( __poll_t)0x00000001 < 0x0001 ? (v & ( __u16)( __poll_t)0x00000001) * (0x0001/( __u16)( __poll_t)0x00000001) : (v & ( __u16)( __poll_t)0x00000001) / (( __u16)( __poll_t)0x00000001/0x0001)) | (( __u16)( __poll_t)0x00000004 < 0x0004 ? (v & ( __u16)( __poll_t)0x00000004) * (0x0004/( __u16)( __poll_t)0x00000004) : (v & ( __u16)( __poll_t)0x00000004) / (( __u16)( __poll_t)0x00000004/0x0004)) | (( __u16)( __poll_t)0x00000002 < 0x0002 ? (v & ( __u16)( __poll_t)0x00000002) * (0x0002/( __u16)( __poll_t)0x00000002) : (v & ( __u16)( __poll_t)0x00000002) / (( __u16)( __poll_t)0x00000002/0x0002)) | (( __u16)( __poll_t)0x00000008 < 0x0008 ? (v & ( __u16)( __poll_t)0x00000008) * (0x0008/( __u16)( __poll_t)0x00000008) : (v & ( __u16)( __poll_t)0x00000008) / (( __u16)( __poll_t)0x00000008/0x0008)) | (( __u16)( __poll_t)0x00000020 < 0x0020 ? (v & ( __u16)( __poll_t)0x00000020) * (0x0020/( __u16)( __poll_t)0x00000020) : (v & ( __u16)( __poll_t)0x00000020) / (( __u16)( __poll_t)0x00000020/0x0020)) |
+  (( __u16)( __poll_t)0x00000040 < 0x0040 ? (v & ( __u16)( __poll_t)0x00000040) * (0x0040/( __u16)( __poll_t)0x00000040) : (v & ( __u16)( __poll_t)0x00000040) / (( __u16)( __poll_t)0x00000040/0x0040)) | (( __u16)( __poll_t)0x00000080 < 0x0080 ? (v & ( __u16)( __poll_t)0x00000080) * (0x0080/( __u16)( __poll_t)0x00000080) : (v & ( __u16)( __poll_t)0x00000080) / (( __u16)( __poll_t)0x00000080/0x0080)) | (( __u16)( __poll_t)0x00000100 < 0x0100 ? (v & ( __u16)( __poll_t)0x00000100) * (0x0100/( __u16)( __poll_t)0x00000100) : (v & ( __u16)( __poll_t)0x00000100) / (( __u16)( __poll_t)0x00000100/0x0100)) | (( __u16)( __poll_t)0x00000200 < 0x0200 ? (v & ( __u16)( __poll_t)0x00000200) * (0x0200/( __u16)( __poll_t)0x00000200) : (v & ( __u16)( __poll_t)0x00000200) / (( __u16)( __poll_t)0x00000200/0x0200)) |
+  (( __u16)( __poll_t)0x00000010 < 0x0010 ? (v & ( __u16)( __poll_t)0x00000010) * (0x0010/( __u16)( __poll_t)0x00000010) : (v & ( __u16)( __poll_t)0x00000010) / (( __u16)( __poll_t)0x00000010/0x0010)) | (( __u16)( __poll_t)0x00002000 < 0x2000 ? (v & ( __u16)( __poll_t)0x00002000) * (0x2000/( __u16)( __poll_t)0x00002000) : (v & ( __u16)( __poll_t)0x00002000) / (( __u16)( __poll_t)0x00002000/0x2000)) | (( __u16)( __poll_t)0x00000400 < 0x0400 ? (v & ( __u16)( __poll_t)0x00000400) * (0x0400/( __u16)( __poll_t)0x00000400) : (v & ( __u16)( __poll_t)0x00000400) / (( __u16)( __poll_t)0x00000400/0x0400));
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __poll_t demangle_poll(u16 val)
+{
+
+ return ( __poll_t)(0x0001 < ( __u16)( __poll_t)0x00000001 ? (val & 0x0001) * (( __u16)( __poll_t)0x00000001/0x0001) : (val & 0x0001) / (0x0001/( __u16)( __poll_t)0x00000001)) | ( __poll_t)(0x0004 < ( __u16)( __poll_t)0x00000004 ? (val & 0x0004) * (( __u16)( __poll_t)0x00000004/0x0004) : (val & 0x0004) / (0x0004/( __u16)( __poll_t)0x00000004)) | ( __poll_t)(0x0002 < ( __u16)( __poll_t)0x00000002 ? (val & 0x0002) * (( __u16)( __poll_t)0x00000002/0x0002) : (val & 0x0002) / (0x0002/( __u16)( __poll_t)0x00000002)) | ( __poll_t)(0x0008 < ( __u16)( __poll_t)0x00000008 ? (val & 0x0008) * (( __u16)( __poll_t)0x00000008/0x0008) : (val & 0x0008) / (0x0008/( __u16)( __poll_t)0x00000008)) | ( __poll_t)(0x0020 < ( __u16)( __poll_t)0x00000020 ? (val & 0x0020) * (( __u16)( __poll_t)0x00000020/0x0020) : (val & 0x0020) / (0x0020/( __u16)( __poll_t)0x00000020)) |
+  ( __poll_t)(0x0040 < ( __u16)( __poll_t)0x00000040 ? (val & 0x0040) * (( __u16)( __poll_t)0x00000040/0x0040) : (val & 0x0040) / (0x0040/( __u16)( __poll_t)0x00000040)) | ( __poll_t)(0x0080 < ( __u16)( __poll_t)0x00000080 ? (val & 0x0080) * (( __u16)( __poll_t)0x00000080/0x0080) : (val & 0x0080) / (0x0080/( __u16)( __poll_t)0x00000080)) | ( __poll_t)(0x0100 < ( __u16)( __poll_t)0x00000100 ? (val & 0x0100) * (( __u16)( __poll_t)0x00000100/0x0100) : (val & 0x0100) / (0x0100/( __u16)( __poll_t)0x00000100)) | ( __poll_t)(0x0200 < ( __u16)( __poll_t)0x00000200 ? (val & 0x0200) * (( __u16)( __poll_t)0x00000200/0x0200) : (val & 0x0200) / (0x0200/( __u16)( __poll_t)0x00000200)) |
+  ( __poll_t)(0x0010 < ( __u16)( __poll_t)0x00000010 ? (val & 0x0010) * (( __u16)( __poll_t)0x00000010/0x0010) : (val & 0x0010) / (0x0010/( __u16)( __poll_t)0x00000010)) | ( __poll_t)(0x2000 < ( __u16)( __poll_t)0x00002000 ? (val & 0x2000) * (( __u16)( __poll_t)0x00002000/0x2000) : (val & 0x2000) / (0x2000/( __u16)( __poll_t)0x00002000)) | ( __poll_t)(0x0400 < ( __u16)( __poll_t)0x00000400 ? (val & 0x0400) * (( __u16)( __poll_t)0x00000400/0x0400) : (val & 0x0400) / (0x0400/( __u16)( __poll_t)0x00000400));
+
+}
+# 13 "./rust/kernel/bindings_helper.h" 2
+# 1 "./include/linux/interrupt.h" 1
+# 9 "./include/linux/interrupt.h"
+# 1 "./include/linux/irqreturn.h" 1
+# 11 "./include/linux/irqreturn.h"
+enum irqreturn {
+ IRQ_NONE = (0 << 0),
+ IRQ_HANDLED = (1 << 0),
+ IRQ_WAKE_THREAD = (1 << 1),
+};
+
+typedef enum irqreturn irqreturn_t;
+# 10 "./include/linux/interrupt.h" 2
+
+# 1 "./include/linux/hardirq.h" 1
+
+
+
+
+# 1 "./include/linux/context_tracking_state.h" 1
+
+
+
+
+
+# 1 "./include/linux/static_key.h" 1
+# 7 "./include/linux/context_tracking_state.h" 2
+
+struct context_tracking {
+
+
+
+
+
+
+ bool active;
+ int recursion;
+ enum ctx_state {
+  CONTEXT_DISABLED = -1,
+  CONTEXT_KERNEL = 0,
+  CONTEXT_USER,
+  CONTEXT_GUEST,
+ } state;
+};
+# 49 "./include/linux/context_tracking_state.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool context_tracking_in_user(void) { return false; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool context_tracking_enabled(void) { return false; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool context_tracking_enabled_cpu(int cpu) { return false; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool context_tracking_enabled_this_cpu(void) { return false; }
+# 6 "./include/linux/hardirq.h" 2
+
+
+# 1 "./include/linux/ftrace_irq.h" 1
+# 10 "./include/linux/ftrace_irq.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_nmi_enter(void)
+{
+
+
+
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ftrace_nmi_exit(void)
+{
+
+
+
+
+}
+# 9 "./include/linux/hardirq.h" 2
+# 1 "./include/linux/vtime.h" 1
+# 11 "./include/linux/vtime.h"
+struct task_struct;
+# 54 "./include/linux/vtime.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vtime_accounting_enabled_cpu(int cpu) {return false; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool vtime_accounting_enabled_this_cpu(void) { return false; }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_task_switch(struct task_struct *prev) { }
+# 67 "./include/linux/vtime.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_account_kernel(struct task_struct *tsk) { }
+# 78 "./include/linux/vtime.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_user_enter(struct task_struct *tsk) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_user_exit(struct task_struct *tsk) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_guest_enter(struct task_struct *tsk) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_guest_exit(struct task_struct *tsk) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_init_idle(struct task_struct *tsk, int cpu) { }
+# 91 "./include/linux/vtime.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_account_irq(struct task_struct *tsk, unsigned int offset) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_account_softirq(struct task_struct *tsk) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_account_hardirq(struct task_struct *tsk) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void vtime_flush(struct task_struct *tsk) { }
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void irqtime_account_irq(struct task_struct *tsk, unsigned int offset) { }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void account_softirq_enter(struct task_struct *tsk)
+{
+ vtime_account_irq(tsk, (1UL << (0 + 8)));
+ irqtime_account_irq(tsk, (1UL << (0 + 8)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void account_softirq_exit(struct task_struct *tsk)
+{
+ vtime_account_softirq(tsk);
+ irqtime_account_irq(tsk, 0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void account_hardirq_enter(struct task_struct *tsk)
+{
+ vtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
+ irqtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void account_hardirq_exit(struct task_struct *tsk)
+{
+ vtime_account_hardirq(tsk);
+ irqtime_account_irq(tsk, 0);
+}
+# 10 "./include/linux/hardirq.h" 2
+# 1 "./arch/x86/include/asm/hardirq.h" 1
+
+
+
+
+
+
+typedef struct {
+ u16 __softirq_pending;
+
+
+
+ unsigned int __nmi_count;
+
+ unsigned int apic_timer_irqs;
+ unsigned int irq_spurious_count;
+ unsigned int icr_read_retry_count;
+
+
+ unsigned int kvm_posted_intr_ipis;
+ unsigned int kvm_posted_intr_wakeup_ipis;
+ unsigned int kvm_posted_intr_nested_ipis;
+
+ unsigned int x86_platform_ipis;
+ unsigned int apic_perf_irqs;
+ unsigned int apic_irq_work_irqs;
+
+
+
+
+ unsigned int irq_tlb_count;
+# 47 "./arch/x86/include/asm/hardirq.h"
+} __attribute__((__aligned__((1 << (6))))) irq_cpustat_t;
+
+extern __attribute__((section(".data" ""))) __typeof__(irq_cpustat_t) irq_stat ;
+
+
+
+
+
+extern void ack_bad_irq(unsigned int irq);
+
+extern u64 arch_irq_stat_cpu(unsigned int cpu);
+
+
+extern u64 arch_irq_stat(void);
+# 80 "./arch/x86/include/asm/hardirq.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void kvm_set_cpu_l1tf_flush_l1d(void) { }
+# 11 "./include/linux/hardirq.h" 2
+
+extern void synchronize_irq(unsigned int irq);
+extern bool synchronize_hardirq(unsigned int irq);
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void __rcu_irq_enter_check_tick(void) { }
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) __attribute__((__always_inline__)) void rcu_irq_enter_check_tick(void)
+{
+ if (context_tracking_enabled())
+  __rcu_irq_enter_check_tick();
+}
+# 54 "./include/linux/hardirq.h"
+void irq_enter(void);
+
+
+
+void irq_enter_rcu(void);
+# 82 "./include/linux/hardirq.h"
+void irq_exit(void);
+
+
+
+
+void irq_exit_rcu(void);
+
+
+
+
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_nmi_enter(void) { }
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void rcu_nmi_exit(void) { }
+# 12 "./include/linux/interrupt.h" 2
+
+
+
+
+
+
+
+# 1 "./arch/x86/include/asm/irq.h" 1
+# 12 "./arch/x86/include/asm/irq.h"
+# 1 "./arch/x86/include/asm/irq_vectors.h" 1
+# 13 "./arch/x86/include/asm/irq.h" 2
+# 21 "./arch/x86/include/asm/irq.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_canonicalize(int irq)
+{
+ return ((irq == 2) ? 9 : irq);
+}
+
+extern int irq_init_percpu_irqstack(unsigned int cpu);
+
+struct irq_desc;
+
+extern void fixup_irqs(void);
+
+
+extern void kvm_set_posted_intr_wakeup_handler(void (*handler)(void));
+
+
+extern void (*x86_platform_ipi_callback)(void);
+extern void native_init_IRQ(void);
+
+extern void __handle_irq(struct irq_desc *desc, struct pt_regs *regs);
+
+extern void init_ISA_irqs(void);
+
+extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) init_IRQ(void);
+
+
+void arch_trigger_cpumask_backtrace(const struct cpumask *mask,
+        bool exclude_self);
+# 20 "./include/linux/interrupt.h" 2
+# 1 "./arch/x86/include/asm/sections.h" 1
+
+
+
+
+
+
+# 1 "./include/asm-generic/sections.h" 1
+# 35 "./include/asm-generic/sections.h"
+extern char _text[], _stext[], _etext[];
+extern char _data[], _sdata[], _edata[];
+extern char __bss_start[], __bss_stop[];
+extern char __init_begin[], __init_end[];
+extern char _sinittext[], _einittext[];
+extern char __start_ro_after_init[], __end_ro_after_init[];
+extern char _end[];
+extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
+extern char __kprobes_text_start[], __kprobes_text_end[];
+extern char __entry_text_start[], __entry_text_end[];
+extern char __start_rodata[], __end_rodata[];
+extern char __irqentry_text_start[], __irqentry_text_end[];
+extern char __softirqentry_text_start[], __softirqentry_text_end[];
+extern char __start_once[], __end_once[];
+
+
+extern char __ctors_start[], __ctors_end[];
+
+
+extern char __start_opd[], __end_opd[];
+
+
+extern char __noinstr_text_start[], __noinstr_text_end[];
+
+extern __attribute__((__externally_visible__)) const void __nosave_begin, __nosave_end;
+# 70 "./include/asm-generic/sections.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_is_kernel_text(unsigned long addr)
+{
+ return 0;
+}
+
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int arch_is_kernel_data(unsigned long addr)
+{
+ return 0;
+}
+# 108 "./include/asm-generic/sections.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool memory_contains(void *begin, void *end, void *virt,
+       size_t size)
+{
+ return virt >= begin && virt + size <= end;
+}
+# 125 "./include/asm-generic/sections.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool memory_intersects(void *begin, void *end, void *virt,
+         size_t size)
+{
+ void *vend = virt + size;
+
+ return (virt >= begin && virt < end) || (vend >= begin && vend < end);
+}
+# 142 "./include/asm-generic/sections.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool init_section_contains(void *virt, size_t size)
+{
+ return memory_contains(__init_begin, __init_end, virt, size);
+}
+# 156 "./include/asm-generic/sections.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool init_section_intersects(void *virt, size_t size)
+{
+ return memory_intersects(__init_begin, __init_end, virt, size);
+}
+# 169 "./include/asm-generic/sections.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool is_kernel_rodata(unsigned long addr)
+{
+ return addr >= (unsigned long)__start_rodata &&
+        addr < (unsigned long)__end_rodata;
+}
+# 8 "./arch/x86/include/asm/sections.h" 2
+
+
+extern char __brk_base[], __brk_limit[];
+extern char __end_rodata_aligned[];
+
+
+extern char __end_rodata_hpage_align[];
+
+
+extern char __end_of_kernel_reserve[];
+
+extern unsigned long _brk_start, _brk_end;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool arch_is_kernel_initmem_freed(unsigned long addr)
+{
+
+
+
+
+ if (_brk_start)
+  return 0;
+
+
+
+
+
+ return addr >= _brk_end && addr < (unsigned long)&_end;
+}
+# 21 "./include/linux/interrupt.h" 2
+# 87 "./include/linux/interrupt.h"
+enum {
+ IRQC_IS_HARDIRQ = 0,
+ IRQC_IS_NESTED,
+};
+
+typedef irqreturn_t (*irq_handler_t)(int, void *);
+# 110 "./include/linux/interrupt.h"
+struct irqaction {
+ irq_handler_t handler;
+ void *dev_id;
+ void *percpu_dev_id;
+ struct irqaction *next;
+ irq_handler_t thread_fn;
+ struct task_struct *thread;
+ struct irqaction *secondary;
+ unsigned int irq;
+ unsigned int flags;
+ unsigned long thread_flags;
+ unsigned long thread_mask;
+ const char *name;
+ struct proc_dir_entry *dir;
+} ;
+
+extern irqreturn_t no_action(int cpl, void *dev_id);
+# 138 "./include/linux/interrupt.h"
+extern int __attribute__((__warn_unused_result__))
+request_threaded_irq(unsigned int irq, irq_handler_t handler,
+       irq_handler_t thread_fn,
+       unsigned long flags, const char *name, void *dev);
+# 156 "./include/linux/interrupt.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__))
+request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags,
+     const char *name, void *dev)
+{
+ return request_threaded_irq(irq, handler, ((void *)0), flags, name, dev);
+}
+
+extern int __attribute__((__warn_unused_result__))
+request_any_context_irq(unsigned int irq, irq_handler_t handler,
+   unsigned long flags, const char *name, void *dev_id);
+
+extern int __attribute__((__warn_unused_result__))
+__request_percpu_irq(unsigned int irq, irq_handler_t handler,
+       unsigned long flags, const char *devname,
+       void *percpu_dev_id);
+
+extern int __attribute__((__warn_unused_result__))
+request_nmi(unsigned int irq, irq_handler_t handler, unsigned long flags,
+     const char *name, void *dev);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__))
+request_percpu_irq(unsigned int irq, irq_handler_t handler,
+     const char *devname, void *percpu_dev_id)
+{
+ return __request_percpu_irq(irq, handler, 0,
+        devname, percpu_dev_id);
+}
+
+extern int __attribute__((__warn_unused_result__))
+request_percpu_nmi(unsigned int irq, irq_handler_t handler,
+     const char *devname, void *dev);
+
+extern const void *free_irq(unsigned int, void *);
+extern void free_percpu_irq(unsigned int, void *);
+
+extern const void *free_nmi(unsigned int irq, void *dev_id);
+extern void free_percpu_nmi(unsigned int irq, void *percpu_dev_id);
+
+struct device;
+
+extern int __attribute__((__warn_unused_result__))
+devm_request_threaded_irq(struct device *dev, unsigned int irq,
+     irq_handler_t handler, irq_handler_t thread_fn,
+     unsigned long irqflags, const char *devname,
+     void *dev_id);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int __attribute__((__warn_unused_result__))
+devm_request_irq(struct device *dev, unsigned int irq, irq_handler_t handler,
+   unsigned long irqflags, const char *devname, void *dev_id)
+{
+ return devm_request_threaded_irq(dev, irq, handler, ((void *)0), irqflags,
+      devname, dev_id);
+}
+
+extern int __attribute__((__warn_unused_result__))
+devm_request_any_context_irq(struct device *dev, unsigned int irq,
+   irq_handler_t handler, unsigned long irqflags,
+   const char *devname, void *dev_id);
+
+extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
+# 235 "./include/linux/interrupt.h"
+bool irq_has_action(unsigned int irq);
+extern void disable_irq_nosync(unsigned int irq);
+extern bool disable_hardirq(unsigned int irq);
+extern void disable_irq(unsigned int irq);
+extern void disable_percpu_irq(unsigned int irq);
+extern void enable_irq(unsigned int irq);
+extern void enable_percpu_irq(unsigned int irq, unsigned int type);
+extern bool irq_percpu_is_enabled(unsigned int irq);
+extern void irq_wake_thread(unsigned int irq, void *dev_id);
+
+extern void disable_nmi_nosync(unsigned int irq);
+extern void disable_percpu_nmi(unsigned int irq);
+extern void enable_nmi(unsigned int irq);
+extern void enable_percpu_nmi(unsigned int irq, unsigned int type);
+extern int prepare_percpu_nmi(unsigned int irq);
+extern void teardown_percpu_nmi(unsigned int irq);
+
+extern int irq_inject_interrupt(unsigned int irq);
+
+
+extern void suspend_device_irqs(void);
+extern void resume_device_irqs(void);
+extern void rearm_wake_irq(unsigned int irq);
+# 271 "./include/linux/interrupt.h"
+struct irq_affinity_notify {
+ unsigned int irq;
+ struct kref kref;
+ struct work_struct work;
+ void (*notify)(struct irq_affinity_notify *, const cpumask_t *mask);
+ void (*release)(struct kref *ref);
+};
+# 295 "./include/linux/interrupt.h"
+struct irq_affinity {
+ unsigned int pre_vectors;
+ unsigned int post_vectors;
+ unsigned int nr_sets;
+ unsigned int set_size[4];
+ void (*calc_sets)(struct irq_affinity *, unsigned int nvecs);
+ void *priv;
+};
+
+
+
+
+
+
+struct irq_affinity_desc {
+ struct cpumask mask;
+ unsigned int is_managed : 1;
+};
+# 370 "./include/linux/interrupt.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_set_affinity(unsigned int irq, const struct cpumask *m)
+{
+ return -22;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_force_affinity(unsigned int irq, const struct cpumask *cpumask)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_can_set_affinity(unsigned int irq)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_select_affinity(unsigned int irq) { return 0; }
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_set_affinity_hint(unsigned int irq,
+     const struct cpumask *m)
+{
+ return -22;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int irq_update_affinity_desc(unsigned int irq,
+        struct irq_affinity_desc *affinity)
+{
+ return -22;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int
+irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify)
+{
+ return 0;
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct irq_affinity_desc *
+irq_create_affinity_masks(unsigned int nvec, struct irq_affinity *affd)
+{
+ return ((void *)0);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned int
+irq_calc_affinity_vectors(unsigned int minvec, unsigned int maxvec,
+     const struct irq_affinity *affd)
+{
+ return maxvec;
+}
+# 431 "./include/linux/interrupt.h"
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void disable_irq_nosync_lockdep(unsigned int irq)
+{
+ disable_irq_nosync(irq);
+
+ do { bool was_disabled = (arch_irqs_disabled()); arch_local_irq_disable(); if (!was_disabled) trace_hardirqs_off(); } while (0);
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void disable_irq_nosync_lockdep_irqsave(unsigned int irq, unsigned long *flags)
+{
+ disable_irq_nosync(irq);
+
+ do { do { ({ unsigned long __dummy; typeof(*flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); *flags = arch_local_irq_save(); } while (0); if (!({ ({ unsigned long __dummy; typeof(*flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(*flags); })) trace_hardirqs_off(); } while (0);
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void disable_irq_lockdep(unsigned int irq)
+{
+ disable_irq(irq);
+
+ do { bool was_disabled = (arch_irqs_disabled()); arch_local_irq_disable(); if (!was_disabled) trace_hardirqs_off(); } while (0);
+
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void enable_irq_lockdep(unsigned int irq)
+{
+
+ do { trace_hardirqs_on(); arch_local_irq_enable(); } while (0);
+
+ enable_irq(irq);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void enable_irq_lockdep_irqrestore(unsigned int irq, unsigned long *flags)
+{
+
+ do { if (!({ ({ unsigned long __dummy; typeof(*flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(*flags); })) trace_hardirqs_on(); do { ({ unsigned long __dummy; typeof(*flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { if (__builtin_expect(!!(!arch_irqs_disabled()), 0)) warn_bogus_irq_restore(); } while (0); arch_local_irq_restore(*flags); } while (0); } while (0);
+
+ enable_irq(irq);
+}
+
+
+extern int irq_set_irq_wake(unsigned int irq, unsigned int on);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int enable_irq_wake(unsigned int irq)
+{
+ return irq_set_irq_wake(irq, 1);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) int disable_irq_wake(unsigned int irq)
+{
+ return irq_set_irq_wake(irq, 0);
+}
+
+
+
+
+enum irqchip_irq_state {
+ IRQCHIP_STATE_PENDING,
+ IRQCHIP_STATE_ACTIVE,
+ IRQCHIP_STATE_MASKED,
+ IRQCHIP_STATE_LINE_LEVEL,
+};
+
+extern int irq_get_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
+     bool *state);
+extern int irq_set_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
+     bool state);
+
+
+
+
+
+extern bool force_irqthreads;
+# 537 "./include/linux/interrupt.h"
+enum
+{
+ HI_SOFTIRQ=0,
+ TIMER_SOFTIRQ,
+ NET_TX_SOFTIRQ,
+ NET_RX_SOFTIRQ,
+ BLOCK_SOFTIRQ,
+ IRQ_POLL_SOFTIRQ,
+ TASKLET_SOFTIRQ,
+ SCHED_SOFTIRQ,
+ HRTIMER_SOFTIRQ,
+ RCU_SOFTIRQ,
+
+ NR_SOFTIRQS
+};
+
+
+
+
+
+
+extern const char * const softirq_to_name[NR_SOFTIRQS];
+
+
+
+
+
+struct softirq_action
+{
+ void (*action)(struct softirq_action *);
+};
+
+ void do_softirq(void);
+ void __do_softirq(void);
+
+extern void open_softirq(int nr, void (*action)(struct softirq_action *));
+extern void softirq_init(void);
+extern void __raise_softirq_irqoff(unsigned int nr);
+
+extern void raise_softirq_irqoff(unsigned int nr);
+extern void raise_softirq(unsigned int nr);
+
+extern __attribute__((section(".data" ""))) __typeof__(struct task_struct *) ksoftirqd;
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct task_struct *this_cpu_ksoftirqd(void)
+{
+ return ({ typeof(ksoftirqd) pscr_ret__; do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(ksoftirqd)) { case 1: pscr_ret__ = ({ u8 pfo_val__; asm volatile ("mov" "b " "" "%" "[var]" ", " "%[val]" : [val] "=" "q" (pfo_val__) : [var] "m" (ksoftirqd)); (typeof(ksoftirqd))(unsigned long) pfo_val__; }); break; case 2: pscr_ret__ = ({ u16 pfo_val__; asm volatile ("mov" "w " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (ksoftirqd)); (typeof(ksoftirqd))(unsigned long) pfo_val__; }); break; case 4: pscr_ret__ = ({ u32 pfo_val__; asm volatile ("mov" "l " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (ksoftirqd)); (typeof(ksoftirqd))(unsigned long) pfo_val__; }); break; case 8: pscr_ret__ = ({ u64 pfo_val__; asm volatile ("mov" "q " "" "%" "[var]" ", " "%[val]" : [val] "=" "r" (pfo_val__) : [var] "m" (ksoftirqd)); (typeof(ksoftirqd))(unsigned long) pfo_val__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
+}
+# 609 "./include/linux/interrupt.h"
+struct tasklet_struct
+{
+ struct tasklet_struct *next;
+ unsigned long state;
+ atomic_t count;
+ bool use_callback;
+ union {
+  void (*func)(unsigned long data);
+  void (*callback)(struct tasklet_struct *t);
+ };
+ unsigned long data;
+};
+# 651 "./include/linux/interrupt.h"
+enum
+{
+ TASKLET_STATE_SCHED,
+ TASKLET_STATE_RUN
+};
+# 679 "./include/linux/interrupt.h"
+extern void __tasklet_schedule(struct tasklet_struct *t);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_schedule(struct tasklet_struct *t)
+{
+ if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
+  __tasklet_schedule(t);
+}
+
+extern void __tasklet_hi_schedule(struct tasklet_struct *t);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_hi_schedule(struct tasklet_struct *t)
+{
+ if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
+  __tasklet_hi_schedule(t);
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_disable_nosync(struct tasklet_struct *t)
+{
+ atomic_inc(&t->count);
+ __asm__ __volatile__("": : :"memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_disable(struct tasklet_struct *t)
+{
+ tasklet_disable_nosync(t);
+ do { } while (0);
+ __asm__ __volatile__("": : :"memory");
+}
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void tasklet_enable(struct tasklet_struct *t)
+{
+ __asm__ __volatile__("": : :"memory");
+ atomic_dec(&t->count);
+}
+
+extern void tasklet_kill(struct tasklet_struct *t);
+extern void tasklet_kill_immediate(struct tasklet_struct *t, unsigned int cpu);
+extern void tasklet_init(struct tasklet_struct *t,
+    void (*func)(unsigned long), unsigned long data);
+extern void tasklet_setup(struct tasklet_struct *t,
+     void (*callback)(struct tasklet_struct *));
+# 763 "./include/linux/interrupt.h"
+extern unsigned long probe_irq_on(void);
+extern int probe_irq_off(unsigned long);
+extern unsigned int probe_irq_mask(unsigned long);
+
+
+
+
+extern void init_irq_proc(void);
+# 783 "./include/linux/interrupt.h"
+struct seq_file;
+int show_interrupts(struct seq_file *p, void *v);
+int arch_show_interrupts(struct seq_file *p, int prec);
+
+extern int early_irq_init(void);
+extern int arch_probe_nr_irqs(void);
+extern int arch_early_irq_init(void);
+# 14 "./rust/kernel/bindings_helper.h" 2
+
+# 1 "./include/linux/delay.h" 1
+# 24 "./include/linux/delay.h"
+extern unsigned long loops_per_jiffy;
+
+# 1 "./arch/x86/include/asm/delay.h" 1
+
+
+
+
+# 1 "./include/asm-generic/delay.h" 1
+
+
+
+
+
+extern void __bad_udelay(void);
+extern void __bad_ndelay(void);
+
+extern void __udelay(unsigned long usecs);
+extern void __ndelay(unsigned long nsecs);
+extern void __const_udelay(unsigned long xloops);
+extern void __delay(unsigned long loops);
+# 6 "./arch/x86/include/asm/delay.h" 2
+
+
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) use_tsc_delay(void);
+void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) use_tpause_delay(void);
+void use_mwaitx_delay(void);
+# 27 "./include/linux/delay.h" 2
+# 56 "./include/linux/delay.h"
+extern unsigned long lpj_fine;
+void calibrate_delay(void);
+void __attribute__((weak)) calibration_delay_done(void);
+void msleep(unsigned int msecs);
+unsigned long msleep_interruptible(unsigned int msecs);
+void usleep_range(unsigned long min, unsigned long max);
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void ssleep(unsigned int seconds)
+{
+ msleep(seconds * 1000);
+}
+
+
+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void fsleep(unsigned long usecs)
+{
+ if (usecs <= 10)
+  ({ if (__builtin_constant_p(usecs)) { if ((usecs) / 20000 >= 1) __bad_udelay(); else __const_udelay((usecs) * 0x10c7ul); } else { __udelay(usecs); } });
+ else if (usecs <= 20000)
+  usleep_range(usecs, 2 * usecs);
+ else
+  msleep((((usecs) + (1000) - 1) / (1000)));
+}
+# 16 "./rust/kernel/bindings_helper.h" 2
+
+
+
+const gfp_t BINDINGS_GFP_KERNEL = ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u));
+const gfp_t BINDINGS___GFP_ZERO = (( gfp_t)0x100u);
