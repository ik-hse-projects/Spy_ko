diff --git a/drivers/ps2_counter.rs b/drivers/ps2_counter.rs
new file mode 100644
index 000000000..149ed9ae1
--- /dev/null
+++ b/drivers/ps2_counter.rs
@@ -0,0 +1,211 @@
+#![no_std]
+#![feature(allocator_api, global_asm, asm)]
+#![feature(test)]
+
+use kernel::prelude::*;
+use kernel::cstr;
+use kernel::c_types::c_void;
+use kernel::bindings::{
+    timer_list,
+    del_timer,
+    mod_timer
+};
+use kernel::bindings::{
+    request_threaded_irq, free_irq,
+    irqreturn_t,
+    irqreturn_IRQ_HANDLED as IRQ_HANDLED,
+    irqreturn_IRQ_NONE as IRQ_NONE,
+    IRQF_SHARED,
+    HZ
+};
+use alloc::boxed::Box;
+use core::sync::atomic::{
+    AtomicUsize,
+    AtomicU64,
+    Ordering
+};
+use core::mem::MaybeUninit;
+
+module! {
+    type: Ps2Counter,
+    name: b"ps2_counter",
+    author: b"Ilya Konnov",
+    description: b"Simple module that counts number of PS/2 keypresses",
+    license: b"GPL v2",
+    params: {},
+}
+
+// I'm not sure is reading directly from bindings::jiffies_64 will be really volatile.
+// Also we can't use get_jiffies_u64, since it is inlined.
+// So let's hope, that our machine can read u64 atomically.
+fn jiffies() -> u64 {
+    unsafe {
+        core::ptr::read_volatile(&kernel::bindings::jiffies_64 as *const u64)
+    }
+}
+
+// https://elixir.bootlin.com/linux/v5.11.9/source/arch/x86/boot/boot.h#L43
+// https://c9x.me/x86/html/file_module_x86_id_139.html
+fn inb(port: u16) -> u8 {
+    unsafe {
+        let v: u8;
+        asm!("in {}, dx", out(reg_byte) v, in("dx") port);
+        v
+    }
+}
+
+// https://elixir.bootlin.com/linux/v5.11.9/source/arch/x86/boot/boot.h#L39
+// https://c9x.me/x86/html/file_module_x86_id_222.html
+fn outb(v: u8, port: u16) -> u8 {
+    unsafe {
+        asm!("out dx, {}", in(reg_byte) v, in("dx") port);
+        v
+    }
+}
+
+struct CounterData {
+    counter: AtomicUsize,
+    last_printed: AtomicU64
+}
+
+static CounterInstance: CounterData = CounterData::new();
+
+impl CounterData {
+    const fn new() -> Self {
+        CounterData {
+            counter: AtomicUsize::new(0),
+            // FIXME: It should be initial jiffies value
+            last_printed: AtomicU64::new(0),
+        }
+    }
+
+    fn handle_key(&self) -> irqreturn_t {
+        // Reading scancodes is fun, but that makes keylogger very obvious,
+        // since keypresses are not processed by "real" driver.
+        /*let scancode = inb(0x60);
+        println!("[{:x}]", scancode);*/
+
+        // Relaxed will work fine: https://doc.rust-lang.org/nomicon/atomics.html#relaxed
+        CounterInstance.counter.fetch_add(1, Ordering::Relaxed);
+
+        IRQ_HANDLED
+    }
+
+    unsafe extern "C" fn timer_callback(timer: *mut timer_list) {
+        let now: u64 = jiffies();
+        let last = CounterInstance.last_printed.load(Ordering::Relaxed);
+        let (mut diff, overflowed) = now.overflowing_sub(last);
+        if overflowed {
+            diff += u64::MAX;
+        }
+        if diff < delay {
+            let (until, _) = now.overflowing_add(diff);
+            unsafe {
+                let _res = mod_timer(timer, until);
+            }
+            return;
+        }
+
+        let counter = CounterInstance.counter.swap(0, Ordering::SeqCst);
+        // Account that PS/2 sends events for keydown and for keyup.
+        let counter = counter / 2;
+        println!("{} keys pressed", counter);
+        CounterInstance.last_printed.store(now, Ordering::Relaxed);
+
+        let (until, _) = now.overflowing_add(delay);
+        unsafe {
+            let _res = mod_timer(timer, until);
+        }
+    }
+
+    fn get_ptr(&self) -> *const Self {
+        self as *const Self
+    }
+
+    unsafe extern "C" fn trampoline(irq: i32, cookie: *mut c_void) -> irqreturn_t {
+        // It's important to not trust signature, that cookie is mut.
+        // We can't crate mutable reference to it, since there is immutable one exist.
+        if !core::ptr::eq(CounterInstance.get_ptr(), cookie as *const _) || irq != 1 {
+            println!("Something went wrong. Ignoring.");
+            IRQ_NONE
+        } else {
+            CounterInstance.handle_key()
+        }
+    }
+}
+
+const delay: u64 = 10 * (HZ as u64);
+
+struct Ps2Counter {
+    timer: *mut kernel::bindings::timer_list,
+}
+
+// Ps2Counter does about nothing, so we can share this pointer.
+unsafe impl Sync for Ps2Counter {}
+
+impl KernelModule for Ps2Counter {
+    fn init() -> KernelResult<Self> {
+        // Firstly, setup an interrupt handler.
+        println!("Setting handler");
+        unsafe {
+            let res = request_threaded_irq(
+                /* line */ 1,
+                /* handler */ Some(CounterData::trampoline),
+                /* thread_fn */ None,
+                /* irqflags */ IRQF_SHARED as _,
+                /* name */ (b"ps2counter\0") as *const _ as *const _,
+                /* cookie */ CounterInstance.get_ptr() as *mut _
+            );
+            if res < 0 { return Err(kernel::Error::from_kernel_errno(res)) }
+        }
+
+        // Then initialize timer.
+        println!("Setting timer");
+        let timer = unsafe {
+            // `timer_setup` is a macro, that calls `__init_timer`
+            //     (https://elixir.bootlin.com/linux/v5.11.10/source/include/linux/timer.h#L141)
+            // `__init_timer` is a macro too, that calls `init_timer_key`
+            //     (https://elixir.bootlin.com/linux/v5.11.10/source/include/linux/timer.h#L125)
+            // Finally, `init_timer_key` is a function that we can use.
+            use kernel::bindings::{
+                init_timer_key,
+                lock_class_key,
+            };
+            static mut key: MaybeUninit<lock_class_key> = MaybeUninit::uninit();
+            static mut timer: MaybeUninit<timer_list> = MaybeUninit::uninit();
+            let res = init_timer_key(
+                /* timer */ timer.as_mut_ptr(),
+                /* func */ Some(CounterData::timer_callback),
+                /* flags */ 0,
+                /* name */ b"ps2counter_timer\0" as *const _ as *const _,
+                /* key */ key.as_mut_ptr()
+            );
+
+            // Return initialized timer from this block:
+            timer.as_mut_ptr()
+        };
+
+        // Finally we want to set timer
+        println!("mod_timer for {} jiffies", delay);
+        unsafe {
+            // We can't use msecs_to_jiffies directly, since this function is always inlined.
+            // So we will just use HZ directly.
+            let res = mod_timer(timer, jiffies() + delay);
+            if res < 0 { return Err(kernel::Error::from_kernel_errno(res)) }
+        }
+
+        Ok(Ps2Counter {
+            timer
+        })
+    }
+}
+
+impl Drop for Ps2Counter {
+    fn drop(&mut self) {
+        unsafe {
+            free_irq(1, CounterInstance.get_ptr() as *mut _);
+            del_timer(self.timer);
+            self.timer = core::ptr::null_mut();
+        }
+    }
+}
